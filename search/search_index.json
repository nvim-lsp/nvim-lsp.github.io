{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"lspconfig A collection of common configurations for Neovim's built-in language server client . This plugin allows for declaratively configuring, launching, and initializing language servers you have installed on your system. Disclaimer: Language server configurations are provided on a best-effort basis and are community-maintained. lspconfig has extensive help documentation, see :help lspconfig . LSP overview Neovim supports the Language Server Protocol (LSP), which means it acts as a client to language servers and includes a Lua framework vim.lsp for building enhanced LSP tools. LSP facilitates features like: go-to-definition find-references hover completion rename format refactor Neovim provides an interface for all of these features, and the language server client is designed to be highly extensible to allow plugins to integrate language server features which are not yet present in Neovim core such as auto -completion (as opposed to manual completion with omnifunc) and snippet integration .","title":"Home"},{"location":"#lspconfig","text":"A collection of common configurations for Neovim's built-in language server client . This plugin allows for declaratively configuring, launching, and initializing language servers you have installed on your system. Disclaimer: Language server configurations are provided on a best-effort basis and are community-maintained. lspconfig has extensive help documentation, see :help lspconfig .","title":"lspconfig"},{"location":"#lsp-overview","text":"Neovim supports the Language Server Protocol (LSP), which means it acts as a client to language servers and includes a Lua framework vim.lsp for building enhanced LSP tools. LSP facilitates features like: go-to-definition find-references hover completion rename format refactor Neovim provides an interface for all of these features, and the language server client is designed to be highly extensible to allow plugins to integrate language server features which are not yet present in Neovim core such as auto -completion (as opposed to manual completion with omnifunc) and snippet integration .","title":"LSP overview"},{"location":"install/","text":"Install Requires Neovim v0.6.1 or Nightly . Update Neovim and 'lspconfig' before reporting an issue. Install 'lspconfig' like any other Vim plugin, e.g. with packer.nvim : local use = require ( 'packer' ). use require ( 'packer' ). startup ( function () use 'wbthomason/packer.nvim' -- Package manager use 'neovim/nvim-lspconfig' -- Collection of configurations for the built-in LSP client end ) Quickstart Install a language server, e.g. pyright npm i -g pyright Add the language server setup to your init.lua. require 'lspconfig' . pyright . setup {} Launch neovim, the language server will now be attached and providing diagnostics (see :LspInfo ) nvim main.py See Keybindings and completion for mapping useful functions and enabling omnifunc completion For a full list of servers, see configurations or :help lspconfig-server-configurations . This document contains installation instructions and additional, optional, customization suggestions for each language server. For some servers that are not on your system path (e.g., jdtls , elixirls ), you will be required to manually add cmd as an entry in the table passed to setup . Most language servers can be installed in less than a minute. Suggested configuration 'lspconfig' does not map keybindings or enable completion by default. The following example configuration provides suggested keymaps for the most commonly used language server functions, and manually triggered completion with omnifunc (\\<c-x>\\<c-o>). Note: you must pass the defined on_attach as an argument to every setup {} call and the keybindings in on_attach only take effect on buffers with an active language server . -- Mappings. -- See `:help vim.diagnostic.*` for documentation on any of the below functions local opts = { noremap = true , silent = true } vim . keymap . set ( 'n' , '<space>e' , vim . diagnostic . open_float , opts ) vim . keymap . set ( 'n' , '[d' , vim . diagnostic . goto_prev , opts ) vim . keymap . set ( 'n' , ']d' , vim . diagnostic . goto_next , opts ) vim . keymap . set ( 'n' , '<space>q' , vim . diagnostic . setloclist , opts ) -- Use an on_attach function to only map the following keys -- after the language server attaches to the current buffer local on_attach = function ( client , bufnr ) -- Enable completion triggered by <c-x><c-o> vim . api . nvim_buf_set_option ( bufnr , 'omnifunc' , 'v:lua.vim.lsp.omnifunc' ) -- Mappings. -- See `:help vim.lsp.*` for documentation on any of the below functions local bufopts = { noremap = true , silent = true , buffer = bufnr } vim . keymap . set ( 'n' , 'gD' , vim . lsp . buf . declaration , bufopts ) vim . keymap . set ( 'n' , 'gd' , vim . lsp . buf . definition , bufopts ) vim . keymap . set ( 'n' , 'K' , vim . lsp . buf . hover , bufopts ) vim . keymap . set ( 'n' , 'gi' , vim . lsp . buf . implementation , bufopts ) vim . keymap . set ( 'n' , '<C-k>' , vim . lsp . buf . signature_help , bufopts ) vim . keymap . set ( 'n' , '<space>wa' , vim . lsp . buf . add_workspace_folder , bufopts ) vim . keymap . set ( 'n' , '<space>wr' , vim . lsp . buf . remove_workspace_folder , bufopts ) vim . keymap . set ( 'n' , '<space>wl' , function () print ( vim . inspect ( vim . lsp . buf . list_workspace_folders ())) end , bufopts ) vim . keymap . set ( 'n' , '<space>D' , vim . lsp . buf . type_definition , bufopts ) vim . keymap . set ( 'n' , '<space>rn' , vim . lsp . buf . rename , bufopts ) vim . keymap . set ( 'n' , '<space>ca' , vim . lsp . buf . code_action , bufopts ) vim . keymap . set ( 'n' , 'gr' , vim . lsp . buf . references , bufopts ) vim . keymap . set ( 'n' , '<space>f' , vim . lsp . buf . formatting , bufopts ) end local lsp_flags = { -- This is the default in Nvim 0.7+ debounce_text_changes = 150 , } require ( 'lspconfig' )[ 'pyright' ]. setup { on_attach = on_attach , flags = lsp_flags , } require ( 'lspconfig' )[ 'tsserver' ]. setup { on_attach = on_attach , flags = lsp_flags , } require ( 'lspconfig' )[ 'rust_analyzer' ]. setup { on_attach = on_attach , flags = lsp_flags , -- Server-specific settings... settings = { [ \"rust-analyzer\" ] = {} } } Manual, triggered completion is provided by neovim's built-in omnifunc. For auto completion, a general purpose autocompletion plugin is required. Debugging If you have an issue with 'lspconfig', the first step is to reproduce with a minimal configuration . The most common reasons a language server does not start or attach are: The language server is not installed. 'lspconfig' does not install language servers for you. You should be able to run the cmd defined in each server's lua module from the command line and see that the language server starts. If the cmd is an executable name instead of an absolute path to the executable, ensure it is on your path. Missing filetype plugins. Certain languages are not detecting by vim/neovim because they have not yet been added to the filetype detection system. Ensure :set ft? shows the filetype and not an empty value. Not triggering root detection. Some language servers will only start if it is opened in a directory, or child directory, containing a file which signals the root of the project. Most of the time, this is a .git folder, but each server defines the root config in the lua file. See server configurations or the source for the list of root directories. You must pass on_attach and capabilities for each setup {} if you want these to take effect. Do not call setup {} twice for the same server . The second call to setup {} will overwrite the first. Before reporting a bug, check your logs and the output of :LspInfo . Add the following to your init.vim to enable logging: vim . lsp . set_log_level ( \"debug\" ) Attempt to run the language server, and open the log with: :lua vim.cmd('e'..vim.lsp.get_log_path()) Most of the time, the reason for failure is present in the logs. Built-in commands :LspInfo shows the status of active and configured language servers. The following support tab-completion for all arguments: :LspStart <config_name> Start the requested server name. Will only successfully start if the command detects a root directory matching the current config. Pass autostart = false to your .setup{} call for a language server if you would like to launch clients solely with this command. Defaults to all servers matching current buffer filetype. :LspStop <client_id> Defaults to stopping all buffer clients. :LspRestart <client_id> Defaults to restarting all buffer clients.","title":"Install"},{"location":"install/#install","text":"Requires Neovim v0.6.1 or Nightly . Update Neovim and 'lspconfig' before reporting an issue. Install 'lspconfig' like any other Vim plugin, e.g. with packer.nvim : local use = require ( 'packer' ). use require ( 'packer' ). startup ( function () use 'wbthomason/packer.nvim' -- Package manager use 'neovim/nvim-lspconfig' -- Collection of configurations for the built-in LSP client end )","title":"Install"},{"location":"install/#quickstart","text":"Install a language server, e.g. pyright npm i -g pyright Add the language server setup to your init.lua. require 'lspconfig' . pyright . setup {} Launch neovim, the language server will now be attached and providing diagnostics (see :LspInfo ) nvim main.py See Keybindings and completion for mapping useful functions and enabling omnifunc completion For a full list of servers, see configurations or :help lspconfig-server-configurations . This document contains installation instructions and additional, optional, customization suggestions for each language server. For some servers that are not on your system path (e.g., jdtls , elixirls ), you will be required to manually add cmd as an entry in the table passed to setup . Most language servers can be installed in less than a minute.","title":"Quickstart"},{"location":"install/#suggested-configuration","text":"'lspconfig' does not map keybindings or enable completion by default. The following example configuration provides suggested keymaps for the most commonly used language server functions, and manually triggered completion with omnifunc (\\<c-x>\\<c-o>). Note: you must pass the defined on_attach as an argument to every setup {} call and the keybindings in on_attach only take effect on buffers with an active language server . -- Mappings. -- See `:help vim.diagnostic.*` for documentation on any of the below functions local opts = { noremap = true , silent = true } vim . keymap . set ( 'n' , '<space>e' , vim . diagnostic . open_float , opts ) vim . keymap . set ( 'n' , '[d' , vim . diagnostic . goto_prev , opts ) vim . keymap . set ( 'n' , ']d' , vim . diagnostic . goto_next , opts ) vim . keymap . set ( 'n' , '<space>q' , vim . diagnostic . setloclist , opts ) -- Use an on_attach function to only map the following keys -- after the language server attaches to the current buffer local on_attach = function ( client , bufnr ) -- Enable completion triggered by <c-x><c-o> vim . api . nvim_buf_set_option ( bufnr , 'omnifunc' , 'v:lua.vim.lsp.omnifunc' ) -- Mappings. -- See `:help vim.lsp.*` for documentation on any of the below functions local bufopts = { noremap = true , silent = true , buffer = bufnr } vim . keymap . set ( 'n' , 'gD' , vim . lsp . buf . declaration , bufopts ) vim . keymap . set ( 'n' , 'gd' , vim . lsp . buf . definition , bufopts ) vim . keymap . set ( 'n' , 'K' , vim . lsp . buf . hover , bufopts ) vim . keymap . set ( 'n' , 'gi' , vim . lsp . buf . implementation , bufopts ) vim . keymap . set ( 'n' , '<C-k>' , vim . lsp . buf . signature_help , bufopts ) vim . keymap . set ( 'n' , '<space>wa' , vim . lsp . buf . add_workspace_folder , bufopts ) vim . keymap . set ( 'n' , '<space>wr' , vim . lsp . buf . remove_workspace_folder , bufopts ) vim . keymap . set ( 'n' , '<space>wl' , function () print ( vim . inspect ( vim . lsp . buf . list_workspace_folders ())) end , bufopts ) vim . keymap . set ( 'n' , '<space>D' , vim . lsp . buf . type_definition , bufopts ) vim . keymap . set ( 'n' , '<space>rn' , vim . lsp . buf . rename , bufopts ) vim . keymap . set ( 'n' , '<space>ca' , vim . lsp . buf . code_action , bufopts ) vim . keymap . set ( 'n' , 'gr' , vim . lsp . buf . references , bufopts ) vim . keymap . set ( 'n' , '<space>f' , vim . lsp . buf . formatting , bufopts ) end local lsp_flags = { -- This is the default in Nvim 0.7+ debounce_text_changes = 150 , } require ( 'lspconfig' )[ 'pyright' ]. setup { on_attach = on_attach , flags = lsp_flags , } require ( 'lspconfig' )[ 'tsserver' ]. setup { on_attach = on_attach , flags = lsp_flags , } require ( 'lspconfig' )[ 'rust_analyzer' ]. setup { on_attach = on_attach , flags = lsp_flags , -- Server-specific settings... settings = { [ \"rust-analyzer\" ] = {} } } Manual, triggered completion is provided by neovim's built-in omnifunc. For auto completion, a general purpose autocompletion plugin is required.","title":"Suggested configuration"},{"location":"install/#debugging","text":"If you have an issue with 'lspconfig', the first step is to reproduce with a minimal configuration . The most common reasons a language server does not start or attach are: The language server is not installed. 'lspconfig' does not install language servers for you. You should be able to run the cmd defined in each server's lua module from the command line and see that the language server starts. If the cmd is an executable name instead of an absolute path to the executable, ensure it is on your path. Missing filetype plugins. Certain languages are not detecting by vim/neovim because they have not yet been added to the filetype detection system. Ensure :set ft? shows the filetype and not an empty value. Not triggering root detection. Some language servers will only start if it is opened in a directory, or child directory, containing a file which signals the root of the project. Most of the time, this is a .git folder, but each server defines the root config in the lua file. See server configurations or the source for the list of root directories. You must pass on_attach and capabilities for each setup {} if you want these to take effect. Do not call setup {} twice for the same server . The second call to setup {} will overwrite the first. Before reporting a bug, check your logs and the output of :LspInfo . Add the following to your init.vim to enable logging: vim . lsp . set_log_level ( \"debug\" ) Attempt to run the language server, and open the log with: :lua vim.cmd('e'..vim.lsp.get_log_path()) Most of the time, the reason for failure is present in the logs.","title":"Debugging"},{"location":"install/#built-in-commands","text":":LspInfo shows the status of active and configured language servers. The following support tab-completion for all arguments: :LspStart <config_name> Start the requested server name. Will only successfully start if the command detects a root directory matching the current config. Pass autostart = false to your .setup{} call for a language server if you would like to launch clients solely with this command. Defaults to all servers matching current buffer filetype. :LspStop <client_id> Defaults to stopping all buffer clients. :LspRestart <client_id> Defaults to restarting all buffer clients.","title":"Built-in commands"},{"location":"configurations/","text":"Introduction Configuration instructions for each language server can be found in the navigation. Installation for the vast majority of servers is a one-time, one-line installation ( npm i -g pyright , dnf install clang-tools-extra , brew install lua-language-server , etc.). It is preferred to use your system package manager as this will handle automatic updates for you. Installing servers manually and ensuring they are on your path minimizes the point of failure, and makes it easier to debug server breakage.","title":"Introduction"},{"location":"configurations/#introduction","text":"Configuration instructions for each language server can be found in the navigation. Installation for the vast majority of servers is a one-time, one-line installation ( npm i -g pyright , dnf install clang-tools-extra , brew install lua-language-server , etc.). It is preferred to use your system package manager as this will handle automatic updates for you. Installing servers manually and ensuring they are on your path minimizes the point of failure, and makes it easier to debug server breakage.","title":"Introduction"},{"location":"configurations/als/","text":"als (Ada) https://github.com/AdaCore/ada_language_server Installation instructions can be found here . Can be configured by passing a \"settings\" object to als.setup{} : require ( 'lspconfig' ). als . setup { settings = { ada = { projectFile = \"project.gpr\" ; scenarioVariables = { ... }; } } } Setup require 'lspconfig' . als . setup {} Default values { cmd = { 'ada_language_server' }, filetypes = { 'ada' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"als (Ada)"},{"location":"configurations/als/#als-ada","text":"https://github.com/AdaCore/ada_language_server Installation instructions can be found here . Can be configured by passing a \"settings\" object to als.setup{} : require ( 'lspconfig' ). als . setup { settings = { ada = { projectFile = \"project.gpr\" ; scenarioVariables = { ... }; } } }","title":"als (Ada)"},{"location":"configurations/als/#setup","text":"require 'lspconfig' . als . setup {}","title":"Setup"},{"location":"configurations/als/#default-values","text":"{ cmd = { 'ada_language_server' }, filetypes = { 'ada' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/angularls/","text":"angularls (Angular) https://github.com/angular/vscode-ng-language-service angular-language-server can be installed via npm npm install -g @angular/language-server . Note, that if you override the default cmd , you must also update on_new_config to set new_config.cmd during startup. local project_library_path = \"/path/to/project/lib\" local cmd = { \"ngserver\" , \"--stdio\" , \"--tsProbeLocations\" , project_library_path , \"--ngProbeLocations\" , project_library_path } require 'lspconfig' . angularls . setup { cmd = cmd , on_new_config = function ( new_config , new_root_dir ) new_config . cmd = cmd end , } Setup require 'lspconfig' . angularls . setup {} Default values { cmd = { 'ngserver' , '--stdio' , '--tsProbeLocations' , '' , '--ngProbeLocations' , '' }, filetypes = { 'typescript' , 'html' , 'typescriptreact' , 'typescript.tsx' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"angularls (Angular)"},{"location":"configurations/angularls/#angularls-angular","text":"https://github.com/angular/vscode-ng-language-service angular-language-server can be installed via npm npm install -g @angular/language-server . Note, that if you override the default cmd , you must also update on_new_config to set new_config.cmd during startup. local project_library_path = \"/path/to/project/lib\" local cmd = { \"ngserver\" , \"--stdio\" , \"--tsProbeLocations\" , project_library_path , \"--ngProbeLocations\" , project_library_path } require 'lspconfig' . angularls . setup { cmd = cmd , on_new_config = function ( new_config , new_root_dir ) new_config . cmd = cmd end , }","title":"angularls (Angular)"},{"location":"configurations/angularls/#setup","text":"require 'lspconfig' . angularls . setup {}","title":"Setup"},{"location":"configurations/angularls/#default-values","text":"{ cmd = { 'ngserver' , '--stdio' , '--tsProbeLocations' , '' , '--ngProbeLocations' , '' }, filetypes = { 'typescript' , 'html' , 'typescriptreact' , 'typescript.tsx' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/ansiblels/","text":"ansiblels (Ansible) https://github.com/ansible/ansible-language-server Language server for the ansible configuration management tool. ansible-language-server can be installed via npm : npm install -g @ansible/ansible-language-server Setup require 'lspconfig' . ansiblels . setup {} Default values { cmd = { 'ansible-language-server' , '--stdio' }, filetypes = { 'yaml.ansible' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = { ansible = { ansible = { path = 'ansible' , }, ansibleLint = { enabled = true , path = 'ansible-lint' , }, executionEnvironment = { enabled = false , }, python = { interpreterPath = 'python' , }, }, }, single_file_support = true , }","title":"ansiblels (Ansible)"},{"location":"configurations/ansiblels/#ansiblels-ansible","text":"https://github.com/ansible/ansible-language-server Language server for the ansible configuration management tool. ansible-language-server can be installed via npm : npm install -g @ansible/ansible-language-server","title":"ansiblels (Ansible)"},{"location":"configurations/ansiblels/#setup","text":"require 'lspconfig' . ansiblels . setup {}","title":"Setup"},{"location":"configurations/ansiblels/#default-values","text":"{ cmd = { 'ansible-language-server' , '--stdio' }, filetypes = { 'yaml.ansible' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = { ansible = { ansible = { path = 'ansible' , }, ansibleLint = { enabled = true , path = 'ansible-lint' , }, executionEnvironment = { enabled = false , }, python = { interpreterPath = 'python' , }, }, }, single_file_support = true , }","title":"Default values"},{"location":"configurations/antlersls/","text":"antlersls (antlersls) https://www.npmjs.com/package/antlers-language-server antlersls can be installed via npm : npm install -g antlers-language-server Setup require 'lspconfig' . antlersls . setup {} Default values { cmd = { 'antlersls' , '--stdio' }, filetypes = { 'html' , 'antlers' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"antlersls (antlersls)"},{"location":"configurations/antlersls/#antlersls-antlersls","text":"https://www.npmjs.com/package/antlers-language-server antlersls can be installed via npm : npm install -g antlers-language-server","title":"antlersls (antlersls)"},{"location":"configurations/antlersls/#setup","text":"require 'lspconfig' . antlersls . setup {}","title":"Setup"},{"location":"configurations/antlersls/#default-values","text":"{ cmd = { 'antlersls' , '--stdio' }, filetypes = { 'html' , 'antlers' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/apex_ls/","text":"apex_ls (apex_ls) https://github.com/forcedotcom/salesforcedx-vscode Language server for Apex. For manual installation, download the JAR file from the VSCode extension . require 'lspconfig' . apex_ls . setup { apex_jar_path = '/path/to/apex-jorje-lsp.jar' , apex_enable_semantic_errors = false , -- Whether to allow Apex Language Server to surface semantic errors apex_enable_completion_statistics = false , -- Whether to allow Apex Language Server to collect telemetry on code completion usage } Setup require 'lspconfig' . apex_ls . setup {} Default values { filetypes = { 'apexcode' }, on_new_config = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/apex_ls.lua:7 end , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"apex_ls (apex_ls)"},{"location":"configurations/apex_ls/#apex_ls-apex_ls","text":"https://github.com/forcedotcom/salesforcedx-vscode Language server for Apex. For manual installation, download the JAR file from the VSCode extension . require 'lspconfig' . apex_ls . setup { apex_jar_path = '/path/to/apex-jorje-lsp.jar' , apex_enable_semantic_errors = false , -- Whether to allow Apex Language Server to surface semantic errors apex_enable_completion_statistics = false , -- Whether to allow Apex Language Server to collect telemetry on code completion usage }","title":"apex_ls (apex_ls)"},{"location":"configurations/apex_ls/#setup","text":"require 'lspconfig' . apex_ls . setup {}","title":"Setup"},{"location":"configurations/apex_ls/#default-values","text":"{ filetypes = { 'apexcode' }, on_new_config = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/apex_ls.lua:7 end , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/arduino_language_server/","text":"arduino_language_server (Arduino) https://github.com/arduino/arduino-language-server Language server for Arduino The arduino-language-server can be installed by running: go install github.com/arduino/arduino-language-server@latest The arduino-cli tool must also be installed. Follow these installation instructions for your platform. After installing arduino-cli , follow these instructions for generating a configuration file if you haven't done so already, and make sure you install any relevant platforms libraries . Make sure to save the full path to the created arduino-cli.yaml file for later. The language server also requires clangd to be installed. Follow these installation instructions for your platform. Next, you will need to decide which FQBN to use. To identify the available FQBNs for boards you currently have connected, you may use the arduino-cli command, like so: $ arduino-cli board list Port Protocol Type Board Name FQBN Core /dev/ttyACM0 serial Serial Port ( USB ) Arduino Uno arduino:avr:uno arduino:avr ^^^^^^^^^^^^^^^ After all dependencies are installed you'll need to set the command for the language server in your setup: require 'lspconfig' . arduino_language_server . setup { cmd = { \"arduino-language-server\" , \"-cli-config\" , \"/path/to/arduino-cli.yaml\" , \"-fqbn\" , \"arduino:avr:uno\" , \"-cli\" , \"arduino-cli\" , \"-clangd\" , \"clangd\" } } For further instruction about configuration options, run arduino-language-server --help . Setup require 'lspconfig' . arduino_language_server . setup {} Default values { filetypes = { 'arduino' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"arduino_language_server (Arduino)"},{"location":"configurations/arduino_language_server/#arduino_language_server-arduino","text":"https://github.com/arduino/arduino-language-server Language server for Arduino The arduino-language-server can be installed by running: go install github.com/arduino/arduino-language-server@latest The arduino-cli tool must also be installed. Follow these installation instructions for your platform. After installing arduino-cli , follow these instructions for generating a configuration file if you haven't done so already, and make sure you install any relevant platforms libraries . Make sure to save the full path to the created arduino-cli.yaml file for later. The language server also requires clangd to be installed. Follow these installation instructions for your platform. Next, you will need to decide which FQBN to use. To identify the available FQBNs for boards you currently have connected, you may use the arduino-cli command, like so: $ arduino-cli board list Port Protocol Type Board Name FQBN Core /dev/ttyACM0 serial Serial Port ( USB ) Arduino Uno arduino:avr:uno arduino:avr ^^^^^^^^^^^^^^^ After all dependencies are installed you'll need to set the command for the language server in your setup: require 'lspconfig' . arduino_language_server . setup { cmd = { \"arduino-language-server\" , \"-cli-config\" , \"/path/to/arduino-cli.yaml\" , \"-fqbn\" , \"arduino:avr:uno\" , \"-cli\" , \"arduino-cli\" , \"-clangd\" , \"clangd\" } } For further instruction about configuration options, run arduino-language-server --help .","title":"arduino_language_server (Arduino)"},{"location":"configurations/arduino_language_server/#setup","text":"require 'lspconfig' . arduino_language_server . setup {}","title":"Setup"},{"location":"configurations/arduino_language_server/#default-values","text":"{ filetypes = { 'arduino' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/asm_lsp/","text":"asm_lsp (Assembly) https://github.com/bergercookie/asm-lsp Language Server for GAS/GO Assembly asm-lsp can be installed via cargo: cargo install asm-lsp Setup require 'lspconfig' . asm_lsp . setup {} Default values { cmd = { 'asm-lsp' }, filetypes = { 'asm' , 'vmasm' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"asm_lsp (Assembly)"},{"location":"configurations/asm_lsp/#asm_lsp-assembly","text":"https://github.com/bergercookie/asm-lsp Language Server for GAS/GO Assembly asm-lsp can be installed via cargo: cargo install asm-lsp","title":"asm_lsp (Assembly)"},{"location":"configurations/asm_lsp/#setup","text":"require 'lspconfig' . asm_lsp . setup {}","title":"Setup"},{"location":"configurations/asm_lsp/#default-values","text":"{ cmd = { 'asm-lsp' }, filetypes = { 'asm' , 'vmasm' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"Default values"},{"location":"configurations/astro/","text":"astro (astro) https://github.com/withastro/language-tools/tree/main/packages/language-server astro-ls can be installed via npm : npm install -g @astrojs/language-server Setup require 'lspconfig' . astro . setup {} Default values { cmd = { 'astro-ls' , '--stdio' }, filetypes = { 'astro' }, init_options = { configuration = {}, }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"astro (astro)"},{"location":"configurations/astro/#astro-astro","text":"https://github.com/withastro/language-tools/tree/main/packages/language-server astro-ls can be installed via npm : npm install -g @astrojs/language-server","title":"astro (astro)"},{"location":"configurations/astro/#setup","text":"require 'lspconfig' . astro . setup {}","title":"Setup"},{"location":"configurations/astro/#default-values","text":"{ cmd = { 'astro-ls' , '--stdio' }, filetypes = { 'astro' }, init_options = { configuration = {}, }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/awk_ls/","text":"awk_ls (awk) https://github.com/Beaglefoot/awk-language-server/ awk-language-server can be installed via npm : npm install -g awk-language-server Setup require 'lspconfig' . awk_ls . setup {} Default values { cmd = { 'awk-language-server' }, filetypes = { 'awk' }, single_file_support = true }","title":"awk_ls (awk)"},{"location":"configurations/awk_ls/#awk_ls-awk","text":"https://github.com/Beaglefoot/awk-language-server/ awk-language-server can be installed via npm : npm install -g awk-language-server","title":"awk_ls (awk)"},{"location":"configurations/awk_ls/#setup","text":"require 'lspconfig' . awk_ls . setup {}","title":"Setup"},{"location":"configurations/awk_ls/#default-values","text":"{ cmd = { 'awk-language-server' }, filetypes = { 'awk' }, single_file_support = true }","title":"Default values"},{"location":"configurations/bashls/","text":"bashls (Bash) https://github.com/mads-hartmann/bash-language-server bash-language-server can be installed via npm : npm i -g bash-language-server Language server for bash, written using tree sitter in typescript. Setup require 'lspconfig' . bashls . setup {} Default values { cmd = { 'bash-language-server' , 'start' }, cmd_env = { GLOB_PATTERN = '*@(.sh|.inc|.bash|.command)' , }, filetypes = { 'sh' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"bashls (Bash)"},{"location":"configurations/bashls/#bashls-bash","text":"https://github.com/mads-hartmann/bash-language-server bash-language-server can be installed via npm : npm i -g bash-language-server Language server for bash, written using tree sitter in typescript.","title":"bashls (Bash)"},{"location":"configurations/bashls/#setup","text":"require 'lspconfig' . bashls . setup {}","title":"Setup"},{"location":"configurations/bashls/#default-values","text":"{ cmd = { 'bash-language-server' , 'start' }, cmd_env = { GLOB_PATTERN = '*@(.sh|.inc|.bash|.command)' , }, filetypes = { 'sh' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/beancount/","text":"beancount (Beancount) https://github.com/polarmutex/beancount-language-server#installation See https://github.com/polarmutex/beancount-language-server#configuration for configuration options Setup require 'lspconfig' . beancount . setup {} Default values { cmd = { 'beancount-language-server' , '--stdio' }, filetypes = { 'beancount' , 'bean' }, init_options = { journalFile = '' , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"beancount (Beancount)"},{"location":"configurations/beancount/#beancount-beancount","text":"https://github.com/polarmutex/beancount-language-server#installation See https://github.com/polarmutex/beancount-language-server#configuration for configuration options","title":"beancount (Beancount)"},{"location":"configurations/beancount/#setup","text":"require 'lspconfig' . beancount . setup {}","title":"Setup"},{"location":"configurations/beancount/#default-values","text":"{ cmd = { 'beancount-language-server' , '--stdio' }, filetypes = { 'beancount' , 'bean' }, init_options = { journalFile = '' , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/bicep/","text":"bicep (Bicep) https://github.com/azure/bicep Bicep language server Bicep language server can be installed by downloading and extracting a release of bicep-langserver.zip from Bicep GitHub releases . Bicep language server requires the dotnet-sdk to be installed. Neovim does not have built-in support for the bicep filetype which is required for lspconfig to automatically launch the language server. Filetype detection can be added via an autocmd: vim . cmd [[ autocmd BufNewFile,BufRead *.bicep set filetype=bicep ]] By default, bicep language server does not have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You must add the following to your init.vim or init.lua to set cmd to the absolute path ($HOME and ~ are not expanded) of the unzipped run script or binary. local bicep_lsp_bin = \"/path/to/bicep-langserver/Bicep.LangServer.dll\" require 'lspconfig' . bicep . setup { cmd = { \"dotnet\" , bicep_lsp_bin }; ... } To download the latest release and place in /usr/local/bin/bicep-langserver: ( cd $( mktemp -d ) \\ && curl -fLO https://github.com/Azure/bicep/releases/latest/download/bicep-langserver.zip \\ && rm -rf /usr/local/bin/bicep-langserver \\ && unzip -d /usr/local/bin/bicep-langserver bicep-langserver.zip ) Setup require 'lspconfig' . bicep . setup {} Default values { filetypes = { 'bicep' }, init_options = {}, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"bicep (Bicep)"},{"location":"configurations/bicep/#bicep-bicep","text":"https://github.com/azure/bicep Bicep language server Bicep language server can be installed by downloading and extracting a release of bicep-langserver.zip from Bicep GitHub releases . Bicep language server requires the dotnet-sdk to be installed. Neovim does not have built-in support for the bicep filetype which is required for lspconfig to automatically launch the language server. Filetype detection can be added via an autocmd: vim . cmd [[ autocmd BufNewFile,BufRead *.bicep set filetype=bicep ]] By default, bicep language server does not have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You must add the following to your init.vim or init.lua to set cmd to the absolute path ($HOME and ~ are not expanded) of the unzipped run script or binary. local bicep_lsp_bin = \"/path/to/bicep-langserver/Bicep.LangServer.dll\" require 'lspconfig' . bicep . setup { cmd = { \"dotnet\" , bicep_lsp_bin }; ... } To download the latest release and place in /usr/local/bin/bicep-langserver: ( cd $( mktemp -d ) \\ && curl -fLO https://github.com/Azure/bicep/releases/latest/download/bicep-langserver.zip \\ && rm -rf /usr/local/bin/bicep-langserver \\ && unzip -d /usr/local/bin/bicep-langserver bicep-langserver.zip )","title":"bicep (Bicep)"},{"location":"configurations/bicep/#setup","text":"require 'lspconfig' . bicep . setup {}","title":"Setup"},{"location":"configurations/bicep/#default-values","text":"{ filetypes = { 'bicep' }, init_options = {}, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"Default values"},{"location":"configurations/bsl_ls/","text":"bsl_ls (OneScript) https://github.com/1c-syntax/bsl-language-server Language Server Protocol implementation for 1C (BSL) - 1C:Enterprise 8 and OneScript languages. Setup require 'lspconfig' . bsl_ls . setup {} Default values { filetypes = { 'bsl' , 'os' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"bsl_ls (OneScript)"},{"location":"configurations/bsl_ls/#bsl_ls-onescript","text":"https://github.com/1c-syntax/bsl-language-server Language Server Protocol implementation for 1C (BSL) - 1C:Enterprise 8 and OneScript languages.","title":"bsl_ls (OneScript)"},{"location":"configurations/bsl_ls/#setup","text":"require 'lspconfig' . bsl_ls . setup {}","title":"Setup"},{"location":"configurations/bsl_ls/#default-values","text":"{ filetypes = { 'bsl' , 'os' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"Default values"},{"location":"configurations/ccls/","text":"ccls (C/C++/ObjC) https://github.com/MaskRay/ccls/wiki ccls relies on a JSON compilation database specified as compile_commands.json or, for simpler projects, a .ccls. For details on how to automatically generate one using CMake look here . Alternatively, you can use Bear . Customization options are passed to ccls at initialization time via init_options, a list of available options can be found here . For example: local lspconfig = require 'lspconfig' lspconfig . ccls . setup { init_options = { compilationDatabaseDirectory = \"build\" ; index = { threads = 0 ; }; clang = { excludeArgs = { \"-frounding-math\" } ; }; } } Setup require 'lspconfig' . ccls . setup {} Default values { cmd = { 'ccls' }, filetypes = { 'c' , 'cpp' , 'objc' , 'objcpp' }, offset_encoding = 'utf-32' , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/ccls.lua:12 end , single_file_support = false , }","title":"ccls (C/C++/ObjC)"},{"location":"configurations/ccls/#ccls-ccobjc","text":"https://github.com/MaskRay/ccls/wiki ccls relies on a JSON compilation database specified as compile_commands.json or, for simpler projects, a .ccls. For details on how to automatically generate one using CMake look here . Alternatively, you can use Bear . Customization options are passed to ccls at initialization time via init_options, a list of available options can be found here . For example: local lspconfig = require 'lspconfig' lspconfig . ccls . setup { init_options = { compilationDatabaseDirectory = \"build\" ; index = { threads = 0 ; }; clang = { excludeArgs = { \"-frounding-math\" } ; }; } }","title":"ccls (C/C++/ObjC)"},{"location":"configurations/ccls/#setup","text":"require 'lspconfig' . ccls . setup {}","title":"Setup"},{"location":"configurations/ccls/#default-values","text":"{ cmd = { 'ccls' }, filetypes = { 'c' , 'cpp' , 'objc' , 'objcpp' }, offset_encoding = 'utf-32' , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/ccls.lua:12 end , single_file_support = false , }","title":"Default values"},{"location":"configurations/clangd/","text":"clangd (C/C++/ObjC) https://clangd.llvm.org/installation.html NOTE: Clang >= 11 is recommended! See #23 . If compile_commands.json lives in a build directory, you should symlink it to the root of your source tree. ln -s /path/to/myproject/build/compile_commands.json /path/to/myproject/ clangd relies on a JSON compilation database specified as compile_commands.json, see https://clangd.llvm.org/installation#compile_commandsjson Setup require 'lspconfig' . clangd . setup {} Default values { capabilities = { offsetEncoding = { 'utf-8' , 'utf-16' }, textDocument = { completion = { editsNearCursor = true , }, }, }, cmd = { 'clangd' }, filetypes = { 'c' , 'cpp' , 'objc' , 'objcpp' , 'cuda' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/clangd.lua:46 end , single_file_support = true , } Commands :ClangdSwitchSourceHeader : Switch between source/header","title":"clangd (C/C++/ObjC)"},{"location":"configurations/clangd/#clangd-ccobjc","text":"https://clangd.llvm.org/installation.html NOTE: Clang >= 11 is recommended! See #23 . If compile_commands.json lives in a build directory, you should symlink it to the root of your source tree. ln -s /path/to/myproject/build/compile_commands.json /path/to/myproject/ clangd relies on a JSON compilation database specified as compile_commands.json, see https://clangd.llvm.org/installation#compile_commandsjson","title":"clangd (C/C++/ObjC)"},{"location":"configurations/clangd/#setup","text":"require 'lspconfig' . clangd . setup {}","title":"Setup"},{"location":"configurations/clangd/#default-values","text":"{ capabilities = { offsetEncoding = { 'utf-8' , 'utf-16' }, textDocument = { completion = { editsNearCursor = true , }, }, }, cmd = { 'clangd' }, filetypes = { 'c' , 'cpp' , 'objc' , 'objcpp' , 'cuda' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/clangd.lua:46 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/clangd/#commands","text":":ClangdSwitchSourceHeader : Switch between source/header","title":"Commands"},{"location":"configurations/clarity_lsp/","text":"clarity_lsp (clarity_lsp) clarity-lsp is a language server for the Clarity language. Clarity is a decidable smart contract language that optimizes for predictability and security. Smart contracts allow developers to encode essential business logic on a blockchain. To learn how to configure the clarity language server, see the clarity-lsp documentation . Setup require 'lspconfig' . clarity_lsp . setup {} Default values { cmd = { 'clarity-lsp' }, filetypes = { 'clar' , 'clarity' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"clarity_lsp (clarity_lsp)"},{"location":"configurations/clarity_lsp/#clarity_lsp-clarity_lsp","text":"clarity-lsp is a language server for the Clarity language. Clarity is a decidable smart contract language that optimizes for predictability and security. Smart contracts allow developers to encode essential business logic on a blockchain. To learn how to configure the clarity language server, see the clarity-lsp documentation .","title":"clarity_lsp (clarity_lsp)"},{"location":"configurations/clarity_lsp/#setup","text":"require 'lspconfig' . clarity_lsp . setup {}","title":"Setup"},{"location":"configurations/clarity_lsp/#default-values","text":"{ cmd = { 'clarity-lsp' }, filetypes = { 'clar' , 'clarity' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/clojure_lsp/","text":"clojure_lsp (Clojure) https://github.com/snoe/clojure-lsp Clojure Language Server Setup require 'lspconfig' . clojure_lsp . setup {} Default values { cmd = { 'clojure-lsp' }, filetypes = { 'clojure' , 'edn' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"clojure_lsp (Clojure)"},{"location":"configurations/clojure_lsp/#clojure_lsp-clojure","text":"https://github.com/snoe/clojure-lsp Clojure Language Server","title":"clojure_lsp (Clojure)"},{"location":"configurations/clojure_lsp/#setup","text":"require 'lspconfig' . clojure_lsp . setup {}","title":"Setup"},{"location":"configurations/clojure_lsp/#default-values","text":"{ cmd = { 'clojure-lsp' }, filetypes = { 'clojure' , 'edn' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/cmake/","text":"cmake (CMake) https://github.com/regen100/cmake-language-server CMake LSP Implementation Setup require 'lspconfig' . cmake . setup {} Default values { cmd = { 'cmake-language-server' }, filetypes = { 'cmake' }, init_options = { buildDirectory = 'build' , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/cmake.lua:8 end , single_file_support = true , }","title":"cmake (CMake)"},{"location":"configurations/cmake/#cmake-cmake","text":"https://github.com/regen100/cmake-language-server CMake LSP Implementation","title":"cmake (CMake)"},{"location":"configurations/cmake/#setup","text":"require 'lspconfig' . cmake . setup {}","title":"Setup"},{"location":"configurations/cmake/#default-values","text":"{ cmd = { 'cmake-language-server' }, filetypes = { 'cmake' }, init_options = { buildDirectory = 'build' , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/cmake.lua:8 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/codeqlls/","text":"codeqlls (CodeQL) Reference: https://help.semmle.com/codeql/codeql-cli.html Binaries: https://github.com/github/codeql-cli-binaries Setup require 'lspconfig' . codeqlls . setup {} Default values { before_init = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/codeqlls.lua:9 end , cmd = { 'codeql' , 'execute' , 'language-server' , '--check-errors' , 'ON_CHANGE' , '-q' }, filetypes = { 'ql' }, log_level = 2 , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = { search_path = vim . empty_dict (), }, }","title":"codeqlls (CodeQL)"},{"location":"configurations/codeqlls/#codeqlls-codeql","text":"Reference: https://help.semmle.com/codeql/codeql-cli.html Binaries: https://github.com/github/codeql-cli-binaries","title":"codeqlls (CodeQL)"},{"location":"configurations/codeqlls/#setup","text":"require 'lspconfig' . codeqlls . setup {}","title":"Setup"},{"location":"configurations/codeqlls/#default-values","text":"{ before_init = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/codeqlls.lua:9 end , cmd = { 'codeql' , 'execute' , 'language-server' , '--check-errors' , 'ON_CHANGE' , '-q' }, filetypes = { 'ql' }, log_level = 2 , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = { search_path = vim . empty_dict (), }, }","title":"Default values"},{"location":"configurations/crystalline/","text":"crystalline (Crystalline) https://github.com/elbywan/crystalline Crystal language server. Setup require 'lspconfig' . crystalline . setup {} Default values { cmd = { 'crystalline' }, filetypes = { 'crystal' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"crystalline (Crystalline)"},{"location":"configurations/crystalline/#crystalline-crystalline","text":"https://github.com/elbywan/crystalline Crystal language server.","title":"crystalline (Crystalline)"},{"location":"configurations/crystalline/#setup","text":"require 'lspconfig' . crystalline . setup {}","title":"Setup"},{"location":"configurations/crystalline/#default-values","text":"{ cmd = { 'crystalline' }, filetypes = { 'crystal' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/csharp_ls/","text":"csharp_ls (C#) https://github.com/razzmatazz/csharp-language-server Language Server for C#. csharp-ls requires the dotnet-sdk to be installed. The preferred way to install csharp-ls is with dotnet tool install --global csharp-ls . Setup require 'lspconfig' . csharp_ls . setup {} Default values { cmd = { 'csharp-ls' }, filetypes = { 'cs' }, init_options = { AutomaticWorkspaceInit = true , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"csharp_ls (C#)"},{"location":"configurations/csharp_ls/#csharp_ls-c","text":"https://github.com/razzmatazz/csharp-language-server Language Server for C#. csharp-ls requires the dotnet-sdk to be installed. The preferred way to install csharp-ls is with dotnet tool install --global csharp-ls .","title":"csharp_ls (C#)"},{"location":"configurations/csharp_ls/#setup","text":"require 'lspconfig' . csharp_ls . setup {}","title":"Setup"},{"location":"configurations/csharp_ls/#default-values","text":"{ cmd = { 'csharp-ls' }, filetypes = { 'cs' }, init_options = { AutomaticWorkspaceInit = true , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/cssls/","text":"cssls (CSS) https://github.com/hrsh7th/vscode-langservers-extracted css-languageserver can be installed via npm : npm i -g vscode-langservers-extracted Neovim does not currently include built-in snippets. vscode-css-language-server only provides completions when snippet support is enabled. To enable completion, install a snippet plugin and add the following override to your language client capabilities during setup. --Enable (broadcasting) snippet capability for completion local capabilities = vim . lsp . protocol . make_client_capabilities () capabilities . textDocument . completion . completionItem . snippetSupport = true require 'lspconfig' . cssls . setup { capabilities = capabilities , } Setup require 'lspconfig' . cssls . setup {} Default values { cmd = { 'vscode-css-language-server' , '--stdio' }, filetypes = { 'css' , 'scss' , 'less' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = { css = { validate = true , }, less = { validate = true , }, scss = { validate = true , }, }, single_file_support = true , }","title":"cssls (CSS)"},{"location":"configurations/cssls/#cssls-css","text":"https://github.com/hrsh7th/vscode-langservers-extracted css-languageserver can be installed via npm : npm i -g vscode-langservers-extracted Neovim does not currently include built-in snippets. vscode-css-language-server only provides completions when snippet support is enabled. To enable completion, install a snippet plugin and add the following override to your language client capabilities during setup. --Enable (broadcasting) snippet capability for completion local capabilities = vim . lsp . protocol . make_client_capabilities () capabilities . textDocument . completion . completionItem . snippetSupport = true require 'lspconfig' . cssls . setup { capabilities = capabilities , }","title":"cssls (CSS)"},{"location":"configurations/cssls/#setup","text":"require 'lspconfig' . cssls . setup {}","title":"Setup"},{"location":"configurations/cssls/#default-values","text":"{ cmd = { 'vscode-css-language-server' , '--stdio' }, filetypes = { 'css' , 'scss' , 'less' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = { css = { validate = true , }, less = { validate = true , }, scss = { validate = true , }, }, single_file_support = true , }","title":"Default values"},{"location":"configurations/cssmodules_ls/","text":"cssmodules_ls (CSS) https://github.com/antonk52/cssmodules-language-server Language server for autocompletion and go-to-definition functionality for CSS modules. You can install cssmodules-language-server via npm: npm install -g cssmodules-language-server Setup require 'lspconfig' . cssmodules_ls . setup {} Default values { cmd = { 'cssmodules-language-server' }, filetypes = { 'javascript' , 'javascriptreact' , 'typescript' , 'typescriptreact' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:370 end , }","title":"cssmodules_ls (CSS)"},{"location":"configurations/cssmodules_ls/#cssmodules_ls-css","text":"https://github.com/antonk52/cssmodules-language-server Language server for autocompletion and go-to-definition functionality for CSS modules. You can install cssmodules-language-server via npm: npm install -g cssmodules-language-server","title":"cssmodules_ls (CSS)"},{"location":"configurations/cssmodules_ls/#setup","text":"require 'lspconfig' . cssmodules_ls . setup {}","title":"Setup"},{"location":"configurations/cssmodules_ls/#default-values","text":"{ cmd = { 'cssmodules-language-server' }, filetypes = { 'javascript' , 'javascriptreact' , 'typescript' , 'typescriptreact' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:370 end , }","title":"Default values"},{"location":"configurations/cucumber_language_server/","text":"cucumber_language_server (Cucumber) https://cucumber.io https://github.com/cucumber/common https://www.npmjs.com/package/@cucumber/language-server Language server for Cucumber. cucumber-language-server can be installed via npm : npm install -g @cucumber/language-server Setup require 'lspconfig' . cucumber_language_server . setup {} Default values { cmd = { 'cucumber-language-server' , '--stdio' }, filetypes = { 'cucumber' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"cucumber_language_server (Cucumber)"},{"location":"configurations/cucumber_language_server/#cucumber_language_server-cucumber","text":"https://cucumber.io https://github.com/cucumber/common https://www.npmjs.com/package/@cucumber/language-server Language server for Cucumber. cucumber-language-server can be installed via npm : npm install -g @cucumber/language-server","title":"cucumber_language_server (Cucumber)"},{"location":"configurations/cucumber_language_server/#setup","text":"require 'lspconfig' . cucumber_language_server . setup {}","title":"Setup"},{"location":"configurations/cucumber_language_server/#default-values","text":"{ cmd = { 'cucumber-language-server' , '--stdio' }, filetypes = { 'cucumber' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"Default values"},{"location":"configurations/dagger/","text":"dagger (dagger) https://github.com/dagger/cuelsp Dagger's lsp server for cuelang. Setup require 'lspconfig' . dagger . setup {} Default values { cmd = { 'cuelsp' }, filetypes = { 'cue' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/dagger.lua:7 end , single_file_support = true , }","title":"dagger (dagger)"},{"location":"configurations/dagger/#dagger-dagger","text":"https://github.com/dagger/cuelsp Dagger's lsp server for cuelang.","title":"dagger (dagger)"},{"location":"configurations/dagger/#setup","text":"require 'lspconfig' . dagger . setup {}","title":"Setup"},{"location":"configurations/dagger/#default-values","text":"{ cmd = { 'cuelsp' }, filetypes = { 'cue' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/dagger.lua:7 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/dartls/","text":"dartls (Dart) https://github.com/dart-lang/sdk/tree/master/pkg/analysis_server/tool/lsp_spec Language server for dart. Setup require 'lspconfig' . dartls . setup {} Default values { cmd = { 'dart' , 'language-server' , '--protocol=lsp' }, filetypes = { 'dart' }, init_options = { closingLabels = true , flutterOutline = true , onlyAnalyzeProjectsWithOpenFiles = true , outline = true , suggestFromUnimportedLibraries = true , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = { dart = { completeFunctionCalls = true , showTodos = true , }, }, }","title":"dartls (Dart)"},{"location":"configurations/dartls/#dartls-dart","text":"https://github.com/dart-lang/sdk/tree/master/pkg/analysis_server/tool/lsp_spec Language server for dart.","title":"dartls (Dart)"},{"location":"configurations/dartls/#setup","text":"require 'lspconfig' . dartls . setup {}","title":"Setup"},{"location":"configurations/dartls/#default-values","text":"{ cmd = { 'dart' , 'language-server' , '--protocol=lsp' }, filetypes = { 'dart' }, init_options = { closingLabels = true , flutterOutline = true , onlyAnalyzeProjectsWithOpenFiles = true , outline = true , suggestFromUnimportedLibraries = true , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = { dart = { completeFunctionCalls = true , showTodos = true , }, }, }","title":"Default values"},{"location":"configurations/denols/","text":"denols (Deno) https://github.com/denoland/deno Deno's built-in language server To appropriately highlight codefences returned from denols, you will need to augment vim.g.markdown_fenced languages in your init.lua. Example: vim . g . markdown_fenced_languages = { \"ts=typescript\" } Setup require 'lspconfig' . denols . setup {} Default values { cmd = { 'deno' , 'lsp' }, filetypes = { 'javascript' , 'javascriptreact' , 'javascript.jsx' , 'typescript' , 'typescriptreact' , 'typescript.tsx' , }, handlers = { [ 'textDocument/definition' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/denols.lua end , [ 'textDocument/references' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/denols.lua end , [ 'workspace/executeCommand' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/denols.lua end , }, init_options = { enable = true , unstable = false , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , } Commands :DenolsCache : Cache a module and all of its dependencies.","title":"denols (Deno)"},{"location":"configurations/denols/#denols-deno","text":"https://github.com/denoland/deno Deno's built-in language server To appropriately highlight codefences returned from denols, you will need to augment vim.g.markdown_fenced languages in your init.lua. Example: vim . g . markdown_fenced_languages = { \"ts=typescript\" }","title":"denols (Deno)"},{"location":"configurations/denols/#setup","text":"require 'lspconfig' . denols . setup {}","title":"Setup"},{"location":"configurations/denols/#default-values","text":"{ cmd = { 'deno' , 'lsp' }, filetypes = { 'javascript' , 'javascriptreact' , 'javascript.jsx' , 'typescript' , 'typescriptreact' , 'typescript.tsx' , }, handlers = { [ 'textDocument/definition' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/denols.lua end , [ 'textDocument/references' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/denols.lua end , [ 'workspace/executeCommand' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/denols.lua end , }, init_options = { enable = true , unstable = false , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/denols/#commands","text":":DenolsCache : Cache a module and all of its dependencies.","title":"Commands"},{"location":"configurations/dhall_lsp_server/","text":"dhall_lsp_server (Dhall) https://github.com/dhall-lang/dhall-haskell/tree/master/dhall-lsp-server language server for dhall dhall-lsp-server can be installed via cabal: cabal install dhall-lsp-server prebuilt binaries can be found here . Setup require 'lspconfig' . dhall_lsp_server . setup {} Default values { cmd = { 'dhall-lsp-server' }, filetypes = { 'dhall' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"dhall_lsp_server (Dhall)"},{"location":"configurations/dhall_lsp_server/#dhall_lsp_server-dhall","text":"https://github.com/dhall-lang/dhall-haskell/tree/master/dhall-lsp-server language server for dhall dhall-lsp-server can be installed via cabal: cabal install dhall-lsp-server prebuilt binaries can be found here .","title":"dhall_lsp_server (Dhall)"},{"location":"configurations/dhall_lsp_server/#setup","text":"require 'lspconfig' . dhall_lsp_server . setup {}","title":"Setup"},{"location":"configurations/dhall_lsp_server/#default-values","text":"{ cmd = { 'dhall-lsp-server' }, filetypes = { 'dhall' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/diagnosticls/","text":"diagnosticls (Diagnostics) https://github.com/iamcco/diagnostic-languageserver Diagnostic language server integrate with linters. Setup require 'lspconfig' . diagnosticls . setup {} Default values { cmd = { 'diagnostic-languageserver' , '--stdio' }, filetypes = {}, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"diagnosticls (Diagnostics)"},{"location":"configurations/diagnosticls/#diagnosticls-diagnostics","text":"https://github.com/iamcco/diagnostic-languageserver Diagnostic language server integrate with linters.","title":"diagnosticls (Diagnostics)"},{"location":"configurations/diagnosticls/#setup","text":"require 'lspconfig' . diagnosticls . setup {}","title":"Setup"},{"location":"configurations/diagnosticls/#default-values","text":"{ cmd = { 'diagnostic-languageserver' , '--stdio' }, filetypes = {}, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/dockerls/","text":"dockerls (Docker) https://github.com/rcjsuen/dockerfile-language-server-nodejs docker-langserver can be installed via npm : npm install -g dockerfile-language-server-nodejs Setup require 'lspconfig' . dockerls . setup {} Default values { cmd = { 'docker-langserver' , '--stdio' }, filetypes = { 'dockerfile' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"dockerls (Docker)"},{"location":"configurations/dockerls/#dockerls-docker","text":"https://github.com/rcjsuen/dockerfile-language-server-nodejs docker-langserver can be installed via npm : npm install -g dockerfile-language-server-nodejs","title":"dockerls (Docker)"},{"location":"configurations/dockerls/#setup","text":"require 'lspconfig' . dockerls . setup {}","title":"Setup"},{"location":"configurations/dockerls/#default-values","text":"{ cmd = { 'docker-langserver' , '--stdio' }, filetypes = { 'dockerfile' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/dotls/","text":"dotls (Dot) https://github.com/nikeee/dot-language-server dot-language-server can be installed via npm : npm install -g dot-language-server Setup require 'lspconfig' . dotls . setup {} Default values { cmd = { 'dot-language-server' , '--stdio' }, filetypes = { 'dot' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"dotls (Dot)"},{"location":"configurations/dotls/#dotls-dot","text":"https://github.com/nikeee/dot-language-server dot-language-server can be installed via npm : npm install -g dot-language-server","title":"dotls (Dot)"},{"location":"configurations/dotls/#setup","text":"require 'lspconfig' . dotls . setup {}","title":"Setup"},{"location":"configurations/dotls/#default-values","text":"{ cmd = { 'dot-language-server' , '--stdio' }, filetypes = { 'dot' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/efm/","text":"efm (Diagnostics) https://github.com/mattn/efm-langserver General purpose Language Server that can use specified error message format generated from specified command. Requires at minimum EFM version v0.0.38 to support launching the language server on single files. If on an older version of EFM, disable single file support: require ( 'lspconfig' )[ 'efm' ]. setup { settings = ..., -- You must populate this according to the EFM readme filetypes = ..., -- Populate this according to the note below single_file_support = false , -- This is the important line for supporting older version of EFM } Note: In order for neovim's built-in language server client to send the appropriate languageId to EFM, you must specify filetypes in your call to setup{} . Otherwise lspconfig will launch EFM on the BufEnter instead of the FileType autocommand, and the filetype variable used to populate the languageId will not yet be set. require ( 'lspconfig' )[ 'efm' ]. setup { settings = ..., -- You must populate this according to the EFM readme filetypes = { 'python' , 'cpp' , 'lua' } } Setup require 'lspconfig' . efm . setup {} Default values { cmd = { 'efm-langserver' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"efm (Diagnostics)"},{"location":"configurations/efm/#efm-diagnostics","text":"https://github.com/mattn/efm-langserver General purpose Language Server that can use specified error message format generated from specified command. Requires at minimum EFM version v0.0.38 to support launching the language server on single files. If on an older version of EFM, disable single file support: require ( 'lspconfig' )[ 'efm' ]. setup { settings = ..., -- You must populate this according to the EFM readme filetypes = ..., -- Populate this according to the note below single_file_support = false , -- This is the important line for supporting older version of EFM } Note: In order for neovim's built-in language server client to send the appropriate languageId to EFM, you must specify filetypes in your call to setup{} . Otherwise lspconfig will launch EFM on the BufEnter instead of the FileType autocommand, and the filetype variable used to populate the languageId will not yet be set. require ( 'lspconfig' )[ 'efm' ]. setup { settings = ..., -- You must populate this according to the EFM readme filetypes = { 'python' , 'cpp' , 'lua' } }","title":"efm (Diagnostics)"},{"location":"configurations/efm/#setup","text":"require 'lspconfig' . efm . setup {}","title":"Setup"},{"location":"configurations/efm/#default-values","text":"{ cmd = { 'efm-langserver' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/elixirls/","text":"elixirls (Elexir) https://github.com/elixir-lsp/elixir-ls elixir-ls can be installed by following the instructions here . curl -fLO https://github.com/elixir-lsp/elixir-ls/releases/latest/download/elixir-ls.zip unzip elixir-ls.zip -d /path/to/elixir-ls # Unix chmod +x /path/to/elixir-ls/language_server.sh By default, elixir-ls doesn't have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You must add the following to your init.vim or init.lua to set cmd to the absolute path ($HOME and ~ are not expanded) of your unzipped elixir-ls. require 'lspconfig' . elixirls . setup { -- Unix cmd = { \"/path/to/elixir-ls/language_server.sh\" }; -- Windows cmd = { \"/path/to/elixir-ls/language_server.bat\" }; ... } Setup require 'lspconfig' . elixirls . setup {} Default values { filetypes = { 'elixir' , 'eelixir' , 'heex' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/elixirls.lua:6 end , }","title":"elixirls (Elexir)"},{"location":"configurations/elixirls/#elixirls-elexir","text":"https://github.com/elixir-lsp/elixir-ls elixir-ls can be installed by following the instructions here . curl -fLO https://github.com/elixir-lsp/elixir-ls/releases/latest/download/elixir-ls.zip unzip elixir-ls.zip -d /path/to/elixir-ls # Unix chmod +x /path/to/elixir-ls/language_server.sh By default, elixir-ls doesn't have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You must add the following to your init.vim or init.lua to set cmd to the absolute path ($HOME and ~ are not expanded) of your unzipped elixir-ls. require 'lspconfig' . elixirls . setup { -- Unix cmd = { \"/path/to/elixir-ls/language_server.sh\" }; -- Windows cmd = { \"/path/to/elixir-ls/language_server.bat\" }; ... }","title":"elixirls (Elexir)"},{"location":"configurations/elixirls/#setup","text":"require 'lspconfig' . elixirls . setup {}","title":"Setup"},{"location":"configurations/elixirls/#default-values","text":"{ filetypes = { 'elixir' , 'eelixir' , 'heex' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/elixirls.lua:6 end , }","title":"Default values"},{"location":"configurations/elmls/","text":"elmls (Elm) https://github.com/elm-tooling/elm-language-server#installation If you don't want to use Nvim to install it, then you can use: npm install -g elm elm-test elm-format @elm-tooling/elm-language-server Setup require 'lspconfig' . elmls . setup {} Default values { cmd = { 'elm-language-server' }, filetypes = { 'elm' }, init_options = { elmAnalyseTrigger = 'change' , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/elmls.lua:21 end , }","title":"elmls (Elm)"},{"location":"configurations/elmls/#elmls-elm","text":"https://github.com/elm-tooling/elm-language-server#installation If you don't want to use Nvim to install it, then you can use: npm install -g elm elm-test elm-format @elm-tooling/elm-language-server","title":"elmls (Elm)"},{"location":"configurations/elmls/#setup","text":"require 'lspconfig' . elmls . setup {}","title":"Setup"},{"location":"configurations/elmls/#default-values","text":"{ cmd = { 'elm-language-server' }, filetypes = { 'elm' }, init_options = { elmAnalyseTrigger = 'change' , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/elmls.lua:21 end , }","title":"Default values"},{"location":"configurations/ember/","text":"ember (Ember) https://github.com/lifeart/ember-language-server ember-language-server can be installed via npm : npm install -g @lifeart/ember-language-server Setup require 'lspconfig' . ember . setup {} Default values { cmd = { 'ember-language-server' , '--stdio' }, filetypes = { 'handlebars' , 'typescript' , 'javascript' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"ember (Ember)"},{"location":"configurations/ember/#ember-ember","text":"https://github.com/lifeart/ember-language-server ember-language-server can be installed via npm : npm install -g @lifeart/ember-language-server","title":"ember (Ember)"},{"location":"configurations/ember/#setup","text":"require 'lspconfig' . ember . setup {}","title":"Setup"},{"location":"configurations/ember/#default-values","text":"{ cmd = { 'ember-language-server' , '--stdio' }, filetypes = { 'handlebars' , 'typescript' , 'javascript' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/emmet_ls/","text":"emmet_ls (Emmet) https://github.com/aca/emmet-ls Package can be installed via npm : npm install -g emmet-ls Setup require 'lspconfig' . emmet_ls . setup {} Default values { cmd = { 'emmet-ls' , '--stdio' }, filetypes = { 'html' , 'typescriptreact' , 'javascriptreact' , 'css' , 'sass' , 'scss' , 'less' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"emmet_ls (Emmet)"},{"location":"configurations/emmet_ls/#emmet_ls-emmet","text":"https://github.com/aca/emmet-ls Package can be installed via npm : npm install -g emmet-ls","title":"emmet_ls (Emmet)"},{"location":"configurations/emmet_ls/#setup","text":"require 'lspconfig' . emmet_ls . setup {}","title":"Setup"},{"location":"configurations/emmet_ls/#default-values","text":"{ cmd = { 'emmet-ls' , '--stdio' }, filetypes = { 'html' , 'typescriptreact' , 'javascriptreact' , 'css' , 'sass' , 'scss' , 'less' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/erlangls/","text":"erlangls (Erlang) https://erlang-ls.github.io Language Server for Erlang. Clone erlang_ls Compile the project with make and copy resulting binaries somewhere in your $PATH eg. cp _build/*/bin/* ~/local/bin Installation instruction can be found here . Installation requirements: - Erlang OTP 21+ - rebar3 3.9.1+ Setup require 'lspconfig' . erlangls . setup {} Default values { cmd = { 'erlang_ls' }, filetypes = { 'erlang' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"erlangls (Erlang)"},{"location":"configurations/erlangls/#erlangls-erlang","text":"https://erlang-ls.github.io Language Server for Erlang. Clone erlang_ls Compile the project with make and copy resulting binaries somewhere in your $PATH eg. cp _build/*/bin/* ~/local/bin Installation instruction can be found here . Installation requirements: - Erlang OTP 21+ - rebar3 3.9.1+","title":"erlangls (Erlang)"},{"location":"configurations/erlangls/#setup","text":"require 'lspconfig' . erlangls . setup {}","title":"Setup"},{"location":"configurations/erlangls/#default-values","text":"{ cmd = { 'erlang_ls' }, filetypes = { 'erlang' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/esbonio/","text":"esbonio (Sphinx) https://github.com/swyddfa/esbonio Esbonio is a language server for Sphinx documentation projects. The language server can be installed via pip pip install esbonio Since Sphinx is highly extensible you will get best results if you install the language server in the same Python environment as the one used to build your documentation. To ensure that the correct Python environment is picked up, you can either launch nvim with the correct environment activated. source env/bin/activate nvim Or you can modify the default cmd to include the full path to the Python interpreter. require 'lspconfig' . esbonio . setup { cmd = { '/path/to/virtualenv/bin/python' , '-m' , 'esbonio' } } Esbonio supports a number of config values passed as init_options on startup, for example. require 'lspconfig' . esbonio . setup { init_options = { server = { logLevel = \"debug\" }, sphinx = { confDir = \"/path/to/docs\" , srcDir = \"${confDir}/../docs-src\" } } A full list and explanation of the available options can be found here Setup require 'lspconfig' . esbonio . setup {} Default values { cmd = { 'python3' , '-m' , 'esbonio' }, filetypes = { 'rst' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"esbonio (Sphinx)"},{"location":"configurations/esbonio/#esbonio-sphinx","text":"https://github.com/swyddfa/esbonio Esbonio is a language server for Sphinx documentation projects. The language server can be installed via pip pip install esbonio Since Sphinx is highly extensible you will get best results if you install the language server in the same Python environment as the one used to build your documentation. To ensure that the correct Python environment is picked up, you can either launch nvim with the correct environment activated. source env/bin/activate nvim Or you can modify the default cmd to include the full path to the Python interpreter. require 'lspconfig' . esbonio . setup { cmd = { '/path/to/virtualenv/bin/python' , '-m' , 'esbonio' } } Esbonio supports a number of config values passed as init_options on startup, for example. require 'lspconfig' . esbonio . setup { init_options = { server = { logLevel = \"debug\" }, sphinx = { confDir = \"/path/to/docs\" , srcDir = \"${confDir}/../docs-src\" } } A full list and explanation of the available options can be found here","title":"esbonio (Sphinx)"},{"location":"configurations/esbonio/#setup","text":"require 'lspconfig' . esbonio . setup {}","title":"Setup"},{"location":"configurations/esbonio/#default-values","text":"{ cmd = { 'python3' , '-m' , 'esbonio' }, filetypes = { 'rst' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"Default values"},{"location":"configurations/eslint/","text":"eslint (JavaScript) https://github.com/hrsh7th/vscode-langservers-extracted vscode-eslint-language-server is a linting engine for JavaScript / Typescript. It can be installed via npm : npm i -g vscode-langservers-extracted vscode-eslint-language-server provides an EslintFixAll command that can be used to format a document on save: autocmd BufWritePre *.tsx , *. ts , *.jsx , *. js EslintFixAll See vscode-eslint for configuration options. Messages handled in lspconfig: eslint/openDoc , eslint/confirmESLintExecution , eslint/probeFailed , eslint/noLibrary Additional messages you can handle: eslint/noConfig Setup require 'lspconfig' . eslint . setup {} Default values { cmd = { 'vscode-eslint-language-server' , '--stdio' }, filetypes = { 'javascript' , 'javascriptreact' , 'javascript.jsx' , 'typescript' , 'typescriptreact' , 'typescript.tsx' , 'vue' , }, handlers = { [ 'eslint/confirmESLintExecution' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/eslint.lua end , [ 'eslint/noLibrary' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/eslint.lua end , [ 'eslint/openDoc' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/eslint.lua end , [ 'eslint/probeFailed' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/eslint.lua end , }, on_new_config = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/eslint.lua:93 end , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = { codeAction = { disableRuleComment = { enable = true , location = 'separateLine' , }, showDocumentation = { enable = true , }, }, codeActionOnSave = { enable = false , mode = 'all' , }, format = true , nodePath = '' , onIgnoredFiles = 'off' , packageManager = 'npm' , quiet = false , rulesCustomizations = {}, run = 'onType' , useESLintClass = false , validate = 'on' , workingDirectory = { mode = 'location' , }, }, } Commands :EslintFixAll : Fix all eslint problems for this buffer","title":"eslint (JavaScript)"},{"location":"configurations/eslint/#eslint-javascript","text":"https://github.com/hrsh7th/vscode-langservers-extracted vscode-eslint-language-server is a linting engine for JavaScript / Typescript. It can be installed via npm : npm i -g vscode-langservers-extracted vscode-eslint-language-server provides an EslintFixAll command that can be used to format a document on save: autocmd BufWritePre *.tsx , *. ts , *.jsx , *. js EslintFixAll See vscode-eslint for configuration options. Messages handled in lspconfig: eslint/openDoc , eslint/confirmESLintExecution , eslint/probeFailed , eslint/noLibrary Additional messages you can handle: eslint/noConfig","title":"eslint (JavaScript)"},{"location":"configurations/eslint/#setup","text":"require 'lspconfig' . eslint . setup {}","title":"Setup"},{"location":"configurations/eslint/#default-values","text":"{ cmd = { 'vscode-eslint-language-server' , '--stdio' }, filetypes = { 'javascript' , 'javascriptreact' , 'javascript.jsx' , 'typescript' , 'typescriptreact' , 'typescript.tsx' , 'vue' , }, handlers = { [ 'eslint/confirmESLintExecution' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/eslint.lua end , [ 'eslint/noLibrary' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/eslint.lua end , [ 'eslint/openDoc' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/eslint.lua end , [ 'eslint/probeFailed' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/eslint.lua end , }, on_new_config = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/eslint.lua:93 end , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = { codeAction = { disableRuleComment = { enable = true , location = 'separateLine' , }, showDocumentation = { enable = true , }, }, codeActionOnSave = { enable = false , mode = 'all' , }, format = true , nodePath = '' , onIgnoredFiles = 'off' , packageManager = 'npm' , quiet = false , rulesCustomizations = {}, run = 'onType' , useESLintClass = false , validate = 'on' , workingDirectory = { mode = 'location' , }, }, }","title":"Default values"},{"location":"configurations/eslint/#commands","text":":EslintFixAll : Fix all eslint problems for this buffer","title":"Commands"},{"location":"configurations/flow/","text":"flow (Flow) https://flow.org/ https://github.com/facebook/flow See below for how to setup Flow itself. https://flow.org/en/docs/install/ See below for lsp command options. npx flow lsp --help Setup require 'lspconfig' . flow . setup {} Default values { cmd = { 'npx' , '--no-install' , 'flow' , 'lsp' }, filetypes = { 'javascript' , 'javascriptreact' , 'javascript.jsx' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"flow (Flow)"},{"location":"configurations/flow/#flow-flow","text":"https://flow.org/ https://github.com/facebook/flow See below for how to setup Flow itself. https://flow.org/en/docs/install/ See below for lsp command options. npx flow lsp --help","title":"flow (Flow)"},{"location":"configurations/flow/#setup","text":"require 'lspconfig' . flow . setup {}","title":"Setup"},{"location":"configurations/flow/#default-values","text":"{ cmd = { 'npx' , '--no-install' , 'flow' , 'lsp' }, filetypes = { 'javascript' , 'javascriptreact' , 'javascript.jsx' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/flux_lsp/","text":"flux_lsp (Flux) https://github.com/influxdata/flux-lsp flux-lsp can be installed via cargo : cargo install --git https://github.com/influxdata/flux-lsp Setup require 'lspconfig' . flux_lsp . setup {} Default values { cmd = { 'flux-lsp' }, filetypes = { 'flux' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"flux_lsp (Flux)"},{"location":"configurations/flux_lsp/#flux_lsp-flux","text":"https://github.com/influxdata/flux-lsp flux-lsp can be installed via cargo : cargo install --git https://github.com/influxdata/flux-lsp","title":"flux_lsp (Flux)"},{"location":"configurations/flux_lsp/#setup","text":"require 'lspconfig' . flux_lsp . setup {}","title":"Setup"},{"location":"configurations/flux_lsp/#default-values","text":"{ cmd = { 'flux-lsp' }, filetypes = { 'flux' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/foam_ls/","text":"foam_ls (Foam) https://github.com/FoamScience/foam-language-server foam-language-server can be installed via npm npm install -g foam-language-server Setup require 'lspconfig' . foam_ls . setup {} Default values { cmd = { 'foam-ls' , '--stdio' }, filetypes = { 'foam' , 'OpenFOAM' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/foam_ls.lua:13 end , }","title":"foam_ls (Foam)"},{"location":"configurations/foam_ls/#foam_ls-foam","text":"https://github.com/FoamScience/foam-language-server foam-language-server can be installed via npm npm install -g foam-language-server","title":"foam_ls (Foam)"},{"location":"configurations/foam_ls/#setup","text":"require 'lspconfig' . foam_ls . setup {}","title":"Setup"},{"location":"configurations/foam_ls/#default-values","text":"{ cmd = { 'foam-ls' , '--stdio' }, filetypes = { 'foam' , 'OpenFOAM' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/foam_ls.lua:13 end , }","title":"Default values"},{"location":"configurations/fortls/","text":"fortls (Fortan) https://github.com/gnikit/fortls fortls is a Fortran Language Server, the server can be installed via pip pip install fortls Settings to the server can be passed either through the cmd option or through a local configuration file e.g. .fortls . For more information see the fortls documentation . Setup require 'lspconfig' . fortls . setup {} Default values { cmd = { 'fortls' , '--notify_init' , '--hover_signature' , '--hover_language=fortran' , '--use_signature_help' }, filetypes = { 'fortran' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/fortls.lua:13 end , settings = {}, }","title":"fortls (Fortan)"},{"location":"configurations/fortls/#fortls-fortan","text":"https://github.com/gnikit/fortls fortls is a Fortran Language Server, the server can be installed via pip pip install fortls Settings to the server can be passed either through the cmd option or through a local configuration file e.g. .fortls . For more information see the fortls documentation .","title":"fortls (Fortan)"},{"location":"configurations/fortls/#setup","text":"require 'lspconfig' . fortls . setup {}","title":"Setup"},{"location":"configurations/fortls/#default-values","text":"{ cmd = { 'fortls' , '--notify_init' , '--hover_signature' , '--hover_language=fortran' , '--use_signature_help' }, filetypes = { 'fortran' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/fortls.lua:13 end , settings = {}, }","title":"Default values"},{"location":"configurations/fsautocomplete/","text":"fsautocomplete (F#) https://github.com/fsharp/FsAutoComplete Language Server for F# provided by FsAutoComplete (FSAC). FsAutoComplete requires the dotnet-sdk to be installed. The preferred way to install FsAutoComplete is with dotnet tool install --global fsautocomplete . Instructions to compile from source are found on the main repository . You may also need to configure the filetype as Vim defaults to Forth for *.fs files: autocmd BufNewFile,BufRead *.fs,*.fsx,*.fsi set filetype=fsharp This is automatically done by plugins such as PhilT/vim-fsharp , fsharp/vim-fsharp , and adelarsq/neofsharp.vim . Setup require 'lspconfig' . fsautocomplete . setup {} Default values { cmd = { 'fsautocomplete' , '--background-service-enabled' }, filetypes = { 'fsharp' }, init_options = { AutomaticWorkspaceInit = true , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"fsautocomplete (F#)"},{"location":"configurations/fsautocomplete/#fsautocomplete-f","text":"https://github.com/fsharp/FsAutoComplete Language Server for F# provided by FsAutoComplete (FSAC). FsAutoComplete requires the dotnet-sdk to be installed. The preferred way to install FsAutoComplete is with dotnet tool install --global fsautocomplete . Instructions to compile from source are found on the main repository . You may also need to configure the filetype as Vim defaults to Forth for *.fs files: autocmd BufNewFile,BufRead *.fs,*.fsx,*.fsi set filetype=fsharp This is automatically done by plugins such as PhilT/vim-fsharp , fsharp/vim-fsharp , and adelarsq/neofsharp.vim .","title":"fsautocomplete (F#)"},{"location":"configurations/fsautocomplete/#setup","text":"require 'lspconfig' . fsautocomplete . setup {}","title":"Setup"},{"location":"configurations/fsautocomplete/#default-values","text":"{ cmd = { 'fsautocomplete' , '--background-service-enabled' }, filetypes = { 'fsharp' }, init_options = { AutomaticWorkspaceInit = true , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/fstar/","text":"fstar (FStar) https://github.com/FStarLang/FStar LSP support is included in FStar. Make sure fstar.exe is in your PATH. Setup require 'lspconfig' . fstar . setup {} Default values { cmd = { 'fstar.exe' , '--lsp' }, filetypes = { 'fstar' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"fstar (FStar)"},{"location":"configurations/fstar/#fstar-fstar","text":"https://github.com/FStarLang/FStar LSP support is included in FStar. Make sure fstar.exe is in your PATH.","title":"fstar (FStar)"},{"location":"configurations/fstar/#setup","text":"require 'lspconfig' . fstar . setup {}","title":"Setup"},{"location":"configurations/fstar/#default-values","text":"{ cmd = { 'fstar.exe' , '--lsp' }, filetypes = { 'fstar' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"Default values"},{"location":"configurations/gdscript/","text":"gdscript (GDScript) https://github.com/godotengine/godot Language server for GDScript, used by Godot Engine. Setup require 'lspconfig' . gdscript . setup {} Default values { cmd = { 'nc' , 'localhost' , '6008' }, filetypes = { 'gd' , 'gdscript' , 'gdscript3' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"gdscript (GDScript)"},{"location":"configurations/gdscript/#gdscript-gdscript","text":"https://github.com/godotengine/godot Language server for GDScript, used by Godot Engine.","title":"gdscript (GDScript)"},{"location":"configurations/gdscript/#setup","text":"require 'lspconfig' . gdscript . setup {}","title":"Setup"},{"location":"configurations/gdscript/#default-values","text":"{ cmd = { 'nc' , 'localhost' , '6008' }, filetypes = { 'gd' , 'gdscript' , 'gdscript3' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/ghcide/","text":"ghcide (Haskell) https://github.com/digital-asset/ghcide A library for building Haskell IDE tooling. \"ghcide\" isn't for end users now. Use \"haskell-language-server\" instead of \"ghcide\". Setup require 'lspconfig' . ghcide . setup {} Default values { cmd = { 'ghcide' , '--lsp' }, filetypes = { 'haskell' , 'lhaskell' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"ghcide (Haskell)"},{"location":"configurations/ghcide/#ghcide-haskell","text":"https://github.com/digital-asset/ghcide A library for building Haskell IDE tooling. \"ghcide\" isn't for end users now. Use \"haskell-language-server\" instead of \"ghcide\".","title":"ghcide (Haskell)"},{"location":"configurations/ghcide/#setup","text":"require 'lspconfig' . ghcide . setup {}","title":"Setup"},{"location":"configurations/ghcide/#default-values","text":"{ cmd = { 'ghcide' , '--lsp' }, filetypes = { 'haskell' , 'lhaskell' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/ghdl_ls/","text":"ghdl_ls (ghdl_ls) https://github.com/ghdl/ghdl-language-server A language server for VHDL, using ghdl as its backend. ghdl-ls is part of pyghdl, for installation instructions see the upstream README . Setup require 'lspconfig' . ghdl_ls . setup {} Default values { cmd = { 'ghdl-ls' }, filetypes = { 'vhdl' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/ghdl_ls.lua:7 end , single_file_support = true , }","title":"ghdl_ls (ghdl_ls)"},{"location":"configurations/ghdl_ls/#ghdl_ls-ghdl_ls","text":"https://github.com/ghdl/ghdl-language-server A language server for VHDL, using ghdl as its backend. ghdl-ls is part of pyghdl, for installation instructions see the upstream README .","title":"ghdl_ls (ghdl_ls)"},{"location":"configurations/ghdl_ls/#setup","text":"require 'lspconfig' . ghdl_ls . setup {}","title":"Setup"},{"location":"configurations/ghdl_ls/#default-values","text":"{ cmd = { 'ghdl-ls' }, filetypes = { 'vhdl' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/ghdl_ls.lua:7 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/glint/","text":"glint (glint) https://github.com/typed-ember/glint https://typed-ember.gitbook.io/glint/ glint-language-server is installed when adding @glint/core to your project's devDependencies: npm install @glint/core --save-dev or yarn add -D @glint/core or pnpm add -D @glint/core Setup require 'lspconfig' . glint . setup {} Default values { cmd = { 'glint-language-server' }, filetypes = { 'html.handlebars' , 'handlebars' , 'typescript' , 'typescript.glimmer' , 'javascript' , 'javascript.glimmer' , }, on_new_config = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/glint.lua:13 end , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"glint (glint)"},{"location":"configurations/glint/#glint-glint","text":"https://github.com/typed-ember/glint https://typed-ember.gitbook.io/glint/ glint-language-server is installed when adding @glint/core to your project's devDependencies: npm install @glint/core --save-dev or yarn add -D @glint/core or pnpm add -D @glint/core","title":"glint (glint)"},{"location":"configurations/glint/#setup","text":"require 'lspconfig' . glint . setup {}","title":"Setup"},{"location":"configurations/glint/#default-values","text":"{ cmd = { 'glint-language-server' }, filetypes = { 'html.handlebars' , 'handlebars' , 'typescript' , 'typescript.glimmer' , 'javascript' , 'javascript.glimmer' , }, on_new_config = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/glint.lua:13 end , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/golangci_lint_ls/","text":"golangci_lint_ls (Go) Combination of both lint server and client https://github.com/nametake/golangci-lint-langserver https://github.com/golangci/golangci-lint Installation of binaries needed is done via go install github.com/nametake/golangci-lint-langserver@latest go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.42.1 Setup require 'lspconfig' . golangci_lint_ls . setup {} Default values { cmd = { 'golangci-lint-langserver' }, filetypes = { 'go' , 'gomod' }, init_options = { command = { 'golangci-lint' , 'run' , '--out-format' , 'json' }, }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/golangci_lint_ls.lua:10 end , }","title":"golangci_lint_ls (Go)"},{"location":"configurations/golangci_lint_ls/#golangci_lint_ls-go","text":"Combination of both lint server and client https://github.com/nametake/golangci-lint-langserver https://github.com/golangci/golangci-lint Installation of binaries needed is done via go install github.com/nametake/golangci-lint-langserver@latest go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.42.1","title":"golangci_lint_ls (Go)"},{"location":"configurations/golangci_lint_ls/#setup","text":"require 'lspconfig' . golangci_lint_ls . setup {}","title":"Setup"},{"location":"configurations/golangci_lint_ls/#default-values","text":"{ cmd = { 'golangci-lint-langserver' }, filetypes = { 'go' , 'gomod' }, init_options = { command = { 'golangci-lint' , 'run' , '--out-format' , 'json' }, }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/golangci_lint_ls.lua:10 end , }","title":"Default values"},{"location":"configurations/gopls/","text":"gopls (Go) https://github.com/golang/tools/tree/master/gopls Google's lsp server for golang. Setup require 'lspconfig' . gopls . setup {} Default values { cmd = { 'gopls' }, filetypes = { 'go' , 'gomod' , 'gowork' , 'gotmpl' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/gopls.lua:7 end , single_file_support = true , }","title":"gopls (Go)"},{"location":"configurations/gopls/#gopls-go","text":"https://github.com/golang/tools/tree/master/gopls Google's lsp server for golang.","title":"gopls (Go)"},{"location":"configurations/gopls/#setup","text":"require 'lspconfig' . gopls . setup {}","title":"Setup"},{"location":"configurations/gopls/#default-values","text":"{ cmd = { 'gopls' }, filetypes = { 'go' , 'gomod' , 'gowork' , 'gotmpl' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/gopls.lua:7 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/gradle_ls/","text":"gradle_ls (gradle_ls) https://github.com/microsoft/vscode-gradle Microsoft's lsp server for gradle files If you're setting this up manually, build vscode-gradle using ./gradlew installDist and point cmd to the gradle-language-server generated in the build directory Setup require 'lspconfig' . gradle_ls . setup {} Default values { cmd = { 'gradle-language-server' }, filetypes = { 'groovy' }, init_options = { settings = { gradleWrapperEnabled = true , }, }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/gradle_ls.lua:19 end , }","title":"gradle_ls (gradle_ls)"},{"location":"configurations/gradle_ls/#gradle_ls-gradle_ls","text":"https://github.com/microsoft/vscode-gradle Microsoft's lsp server for gradle files If you're setting this up manually, build vscode-gradle using ./gradlew installDist and point cmd to the gradle-language-server generated in the build directory","title":"gradle_ls (gradle_ls)"},{"location":"configurations/gradle_ls/#setup","text":"require 'lspconfig' . gradle_ls . setup {}","title":"Setup"},{"location":"configurations/gradle_ls/#default-values","text":"{ cmd = { 'gradle-language-server' }, filetypes = { 'groovy' }, init_options = { settings = { gradleWrapperEnabled = true , }, }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/gradle_ls.lua:19 end , }","title":"Default values"},{"location":"configurations/grammarly/","text":"grammarly (Grammarly) https://github.com/znck/grammarly grammarly-languageserver can be installed via npm : npm i -g grammarly-languageserver WARNING: Since this language server uses Grammarly's API, any document you open with it running is shared with them. Please evaluate their privacy policy before using this. Setup require 'lspconfig' . grammarly . setup {} Default values { cmd = { 'grammarly-languageserver' , '--stdio' }, filetypes = { 'markdown' }, handlers = { [ '$/updateDocumentState' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/grammarly.lua end , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"grammarly (Grammarly)"},{"location":"configurations/grammarly/#grammarly-grammarly","text":"https://github.com/znck/grammarly grammarly-languageserver can be installed via npm : npm i -g grammarly-languageserver WARNING: Since this language server uses Grammarly's API, any document you open with it running is shared with them. Please evaluate their privacy policy before using this.","title":"grammarly (Grammarly)"},{"location":"configurations/grammarly/#setup","text":"require 'lspconfig' . grammarly . setup {}","title":"Setup"},{"location":"configurations/grammarly/#default-values","text":"{ cmd = { 'grammarly-languageserver' , '--stdio' }, filetypes = { 'markdown' }, handlers = { [ '$/updateDocumentState' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/grammarly.lua end , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/graphql/","text":"graphql (GraphQL) https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-cli graphql-lsp can be installed via npm : npm install -g graphql-language-service-cli Note that you must also have the graphql package installed and create a GraphQL config file . Setup require 'lspconfig' . graphql . setup {} Default values { cmd = { 'graphql-lsp' , 'server' , '-m' , 'stream' }, filetypes = { 'graphql' , 'typescriptreact' , 'javascriptreact' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"graphql (GraphQL)"},{"location":"configurations/graphql/#graphql-graphql","text":"https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-cli graphql-lsp can be installed via npm : npm install -g graphql-language-service-cli Note that you must also have the graphql package installed and create a GraphQL config file .","title":"graphql (GraphQL)"},{"location":"configurations/graphql/#setup","text":"require 'lspconfig' . graphql . setup {}","title":"Setup"},{"location":"configurations/graphql/#default-values","text":"{ cmd = { 'graphql-lsp' , 'server' , '-m' , 'stream' }, filetypes = { 'graphql' , 'typescriptreact' , 'javascriptreact' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/groovyls/","text":"groovyls (Java) https://github.com/prominic/groovy-language-server.git Requirements: - Linux/macOS (for now) - Java 11+ groovyls can be installed by following the instructions here . If you have installed groovy language server, you can set the cmd custom path as follow: require 'lspconfig' . groovyls . setup { -- Unix cmd = { \"java\" , \"-jar\" , \"path/to/groovyls/groovy-language-server-all.jar\" }, ... } Setup require 'lspconfig' . groovyls . setup {} Default values { cmd = { 'java' , '-jar' , 'groovy-language-server-all.jar' }, filetypes = { 'groovy' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/groovyls.lua:11 end , }","title":"groovyls (Java)"},{"location":"configurations/groovyls/#groovyls-java","text":"https://github.com/prominic/groovy-language-server.git Requirements: - Linux/macOS (for now) - Java 11+ groovyls can be installed by following the instructions here . If you have installed groovy language server, you can set the cmd custom path as follow: require 'lspconfig' . groovyls . setup { -- Unix cmd = { \"java\" , \"-jar\" , \"path/to/groovyls/groovy-language-server-all.jar\" }, ... }","title":"groovyls (Java)"},{"location":"configurations/groovyls/#setup","text":"require 'lspconfig' . groovyls . setup {}","title":"Setup"},{"location":"configurations/groovyls/#default-values","text":"{ cmd = { 'java' , '-jar' , 'groovy-language-server-all.jar' }, filetypes = { 'groovy' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/groovyls.lua:11 end , }","title":"Default values"},{"location":"configurations/haxe_language_server/","text":"haxe_language_server (Haxe) https://github.com/vshaxe/haxe-language-server The Haxe language server can be built by running the following commands from the project's root directory: npm install npx lix run vshaxe-build -t language-server This will create bin/server.js . Note that the server requires Haxe 3.4.0 or higher. After building the language server, set the cmd setting in your setup function: lspconfig . haxe_language_server . setup ({ cmd = { \"node\" , \"path/to/bin/server.js\" }, }) By default, an HXML compiler arguments file named build.hxml is expected in your project's root directory. If your file is named something different, specify it using the init_options.displayArguments setting. Setup require 'lspconfig' . haxe_language_server . setup {} Default values { cmd = { 'haxe-language-server' }, filetypes = { 'haxe' }, init_options = { displayArguments = { 'build.hxml' }, }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = { haxe = { executable = 'haxe' , }, }, }","title":"haxe_language_server (Haxe)"},{"location":"configurations/haxe_language_server/#haxe_language_server-haxe","text":"https://github.com/vshaxe/haxe-language-server The Haxe language server can be built by running the following commands from the project's root directory: npm install npx lix run vshaxe-build -t language-server This will create bin/server.js . Note that the server requires Haxe 3.4.0 or higher. After building the language server, set the cmd setting in your setup function: lspconfig . haxe_language_server . setup ({ cmd = { \"node\" , \"path/to/bin/server.js\" }, }) By default, an HXML compiler arguments file named build.hxml is expected in your project's root directory. If your file is named something different, specify it using the init_options.displayArguments setting.","title":"haxe_language_server (Haxe)"},{"location":"configurations/haxe_language_server/#setup","text":"require 'lspconfig' . haxe_language_server . setup {}","title":"Setup"},{"location":"configurations/haxe_language_server/#default-values","text":"{ cmd = { 'haxe-language-server' }, filetypes = { 'haxe' }, init_options = { displayArguments = { 'build.hxml' }, }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = { haxe = { executable = 'haxe' , }, }, }","title":"Default values"},{"location":"configurations/hdl_checker/","text":"hdl_checker (hdl_checker) https://github.com/suoto/hdl_checker Language server for hdl-checker. Install using: pip install hdl-checker --upgrade Setup require 'lspconfig' . hdl_checker . setup {} Default values { cmd = { 'hdl_checker' , '--lsp' }, filetypes = { 'vhdl' , 'verilog' , 'systemverilog' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"hdl_checker (hdl_checker)"},{"location":"configurations/hdl_checker/#hdl_checker-hdl_checker","text":"https://github.com/suoto/hdl_checker Language server for hdl-checker. Install using: pip install hdl-checker --upgrade","title":"hdl_checker (hdl_checker)"},{"location":"configurations/hdl_checker/#setup","text":"require 'lspconfig' . hdl_checker . setup {}","title":"Setup"},{"location":"configurations/hdl_checker/#default-values","text":"{ cmd = { 'hdl_checker' , '--lsp' }, filetypes = { 'vhdl' , 'verilog' , 'systemverilog' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/hhvm/","text":"hhvm (hhvm) Language server for programs written in Hack https://hhvm.com/ https://github.com/facebook/hhvm See below for how to setup HHVM & typechecker: https://docs.hhvm.com/hhvm/getting-started/getting-started Setup require 'lspconfig' . hhvm . setup {} Default values { cmd = { 'hh_client' , 'lsp' }, filetypes = { 'php' , 'hack' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"hhvm (hhvm)"},{"location":"configurations/hhvm/#hhvm-hhvm","text":"Language server for programs written in Hack https://hhvm.com/ https://github.com/facebook/hhvm See below for how to setup HHVM & typechecker: https://docs.hhvm.com/hhvm/getting-started/getting-started","title":"hhvm (hhvm)"},{"location":"configurations/hhvm/#setup","text":"require 'lspconfig' . hhvm . setup {}","title":"Setup"},{"location":"configurations/hhvm/#default-values","text":"{ cmd = { 'hh_client' , 'lsp' }, filetypes = { 'php' , 'hack' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/hie/","text":"hie (Haskell) https://github.com/haskell/haskell-ide-engine the following init_options are supported (see https://github.com/haskell/haskell-ide-engine#configuration ): init_options = { languageServerHaskell = { hlintOn = bool ; maxNumberOfProblems = number ; diagnosticsDebounceDuration = number ; liquidOn = bool ( default false ); completionSnippetsOn = bool ( default true ); formatOnImportOn = bool ( default true ); formattingProvider = string ( default \"brittany\" , alternate \"floskell\" ); } } Setup require 'lspconfig' . hie . setup {} Default values { cmd = { 'hie-wrapper' , '--lsp' }, filetypes = { 'haskell' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"hie (Haskell)"},{"location":"configurations/hie/#hie-haskell","text":"https://github.com/haskell/haskell-ide-engine the following init_options are supported (see https://github.com/haskell/haskell-ide-engine#configuration ): init_options = { languageServerHaskell = { hlintOn = bool ; maxNumberOfProblems = number ; diagnosticsDebounceDuration = number ; liquidOn = bool ( default false ); completionSnippetsOn = bool ( default true ); formatOnImportOn = bool ( default true ); formattingProvider = string ( default \"brittany\" , alternate \"floskell\" ); } }","title":"hie (Haskell)"},{"location":"configurations/hie/#setup","text":"require 'lspconfig' . hie . setup {}","title":"Setup"},{"location":"configurations/hie/#default-values","text":"{ cmd = { 'hie-wrapper' , '--lsp' }, filetypes = { 'haskell' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/hls/","text":"hls (Haskell) https://github.com/haskell/haskell-language-server Haskell Language Server Setup require 'lspconfig' . hls . setup {} Default values { cmd = { 'haskell-language-server-wrapper' , '--lsp' }, filetypes = { 'haskell' , 'lhaskell' }, lspinfo = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/hls.lua:19 end , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/hls.lua:7 end , settings = { haskell = { formattingProvider = 'ormolu' , }, }, single_file_support = true , }","title":"hls (Haskell)"},{"location":"configurations/hls/#hls-haskell","text":"https://github.com/haskell/haskell-language-server Haskell Language Server","title":"hls (Haskell)"},{"location":"configurations/hls/#setup","text":"require 'lspconfig' . hls . setup {}","title":"Setup"},{"location":"configurations/hls/#default-values","text":"{ cmd = { 'haskell-language-server-wrapper' , '--lsp' }, filetypes = { 'haskell' , 'lhaskell' }, lspinfo = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/hls.lua:19 end , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/hls.lua:7 end , settings = { haskell = { formattingProvider = 'ormolu' , }, }, single_file_support = true , }","title":"Default values"},{"location":"configurations/hoon_ls/","text":"hoon_ls (hoon_ls) https://github.com/urbit/hoon-language-server A language server for Hoon. The language server can be installed via npm install -g @hoon-language-server Start a fake ~zod with urbit -F zod . Start the language server at the Urbit Dojo prompt with: |start %language-server Setup require 'lspconfig' . hoon_ls . setup {} Default values { cmd = { 'hoon-language-server' }, filetypes = { 'hoon' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"hoon_ls (hoon_ls)"},{"location":"configurations/hoon_ls/#hoon_ls-hoon_ls","text":"https://github.com/urbit/hoon-language-server A language server for Hoon. The language server can be installed via npm install -g @hoon-language-server Start a fake ~zod with urbit -F zod . Start the language server at the Urbit Dojo prompt with: |start %language-server","title":"hoon_ls (hoon_ls)"},{"location":"configurations/hoon_ls/#setup","text":"require 'lspconfig' . hoon_ls . setup {}","title":"Setup"},{"location":"configurations/hoon_ls/#default-values","text":"{ cmd = { 'hoon-language-server' }, filetypes = { 'hoon' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/html/","text":"html (HTML) https://github.com/hrsh7th/vscode-langservers-extracted vscode-html-language-server can be installed via npm : npm i -g vscode-langservers-extracted Neovim does not currently include built-in snippets. vscode-html-language-server only provides completions when snippet support is enabled. To enable completion, install a snippet plugin and add the following override to your language client capabilities during setup. The code-formatting feature of the lsp can be controlled with the provideFormatter option. --Enable (broadcasting) snippet capability for completion local capabilities = vim . lsp . protocol . make_client_capabilities () capabilities . textDocument . completion . completionItem . snippetSupport = true require 'lspconfig' . html . setup { capabilities = capabilities , } Setup require 'lspconfig' . html . setup {} Default values { cmd = { 'vscode-html-language-server' , '--stdio' }, filetypes = { 'html' }, init_options = { configurationSection = { 'html' , 'css' , 'javascript' }, embeddedLanguages = { css = true , javascript = true , }, provideFormatter = true , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = {}, single_file_support = true , }","title":"html (HTML)"},{"location":"configurations/html/#html-html","text":"https://github.com/hrsh7th/vscode-langservers-extracted vscode-html-language-server can be installed via npm : npm i -g vscode-langservers-extracted Neovim does not currently include built-in snippets. vscode-html-language-server only provides completions when snippet support is enabled. To enable completion, install a snippet plugin and add the following override to your language client capabilities during setup. The code-formatting feature of the lsp can be controlled with the provideFormatter option. --Enable (broadcasting) snippet capability for completion local capabilities = vim . lsp . protocol . make_client_capabilities () capabilities . textDocument . completion . completionItem . snippetSupport = true require 'lspconfig' . html . setup { capabilities = capabilities , }","title":"html (HTML)"},{"location":"configurations/html/#setup","text":"require 'lspconfig' . html . setup {}","title":"Setup"},{"location":"configurations/html/#default-values","text":"{ cmd = { 'vscode-html-language-server' , '--stdio' }, filetypes = { 'html' }, init_options = { configurationSection = { 'html' , 'css' , 'javascript' }, embeddedLanguages = { css = true , javascript = true , }, provideFormatter = true , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = {}, single_file_support = true , }","title":"Default values"},{"location":"configurations/idris2_lsp/","text":"idris2_lsp (Idris) https://github.com/idris-community/idris2-lsp The Idris 2 language server. Plugins for the Idris 2 filetype include Idris2-Vim (fewer features, stable) and Nvim-Idris2 (cutting-edge, experimental). Idris2-Lsp requires a build of Idris 2 that includes the \"Idris 2 API\" package. Package managers with known support for this build include the AUR and Homebrew . If your package manager does not support the Idris 2 API, you will need to build Idris 2 from source. Refer to the the Idris 2 installation instructions for details. Steps 5 and 8 are listed as \"optional\" in that guide, but they are necessary in order to make the Idris 2 API available. You need to install a version of Idris2-Lsp that is compatible with your version of Idris 2. There should be a branch corresponding to every released Idris 2 version after v0.4.0. Use the latest commit on that branch. For example, if you have Idris v0.5.1, you should use the v0.5.1 branch of Idris2-Lsp. If your Idris 2 version is newer than the newest Idris2-Lsp branch, use the latest commit on the master branch, and set a reminder to check the Idris2-Lsp repo for the release of a compatible versioned branch. Setup require 'lspconfig' . idris2_lsp . setup {} Default values { cmd = { 'idris2-lsp' }, filetypes = { 'idris2' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"idris2_lsp (Idris)"},{"location":"configurations/idris2_lsp/#idris2_lsp-idris","text":"https://github.com/idris-community/idris2-lsp The Idris 2 language server. Plugins for the Idris 2 filetype include Idris2-Vim (fewer features, stable) and Nvim-Idris2 (cutting-edge, experimental). Idris2-Lsp requires a build of Idris 2 that includes the \"Idris 2 API\" package. Package managers with known support for this build include the AUR and Homebrew . If your package manager does not support the Idris 2 API, you will need to build Idris 2 from source. Refer to the the Idris 2 installation instructions for details. Steps 5 and 8 are listed as \"optional\" in that guide, but they are necessary in order to make the Idris 2 API available. You need to install a version of Idris2-Lsp that is compatible with your version of Idris 2. There should be a branch corresponding to every released Idris 2 version after v0.4.0. Use the latest commit on that branch. For example, if you have Idris v0.5.1, you should use the v0.5.1 branch of Idris2-Lsp. If your Idris 2 version is newer than the newest Idris2-Lsp branch, use the latest commit on the master branch, and set a reminder to check the Idris2-Lsp repo for the release of a compatible versioned branch.","title":"idris2_lsp (Idris)"},{"location":"configurations/idris2_lsp/#setup","text":"require 'lspconfig' . idris2_lsp . setup {}","title":"Setup"},{"location":"configurations/idris2_lsp/#default-values","text":"{ cmd = { 'idris2-lsp' }, filetypes = { 'idris2' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/intelephense/","text":"intelephense (PHP) https://intelephense.com/ intelephense can be installed via npm : npm install -g intelephense Setup require 'lspconfig' . intelephense . setup {} Default values { cmd = { 'intelephense' , '--stdio' }, filetypes = { 'php' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/intelephense.lua:14 end , }","title":"intelephense (PHP)"},{"location":"configurations/intelephense/#intelephense-php","text":"https://intelephense.com/ intelephense can be installed via npm : npm install -g intelephense","title":"intelephense (PHP)"},{"location":"configurations/intelephense/#setup","text":"require 'lspconfig' . intelephense . setup {}","title":"Setup"},{"location":"configurations/intelephense/#default-values","text":"{ cmd = { 'intelephense' , '--stdio' }, filetypes = { 'php' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/intelephense.lua:14 end , }","title":"Default values"},{"location":"configurations/java_language_server/","text":"java_language_server (Java) https://github.com/georgewfraser/java-language-server Java language server Point cmd to lang_server_linux.sh or the equivalent script for macOS/Windows provided by java-language-server Setup require 'lspconfig' . java_language_server . setup {} Default values { filetypes = { 'java' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = {}, }","title":"java_language_server (Java)"},{"location":"configurations/java_language_server/#java_language_server-java","text":"https://github.com/georgewfraser/java-language-server Java language server Point cmd to lang_server_linux.sh or the equivalent script for macOS/Windows provided by java-language-server","title":"java_language_server (Java)"},{"location":"configurations/java_language_server/#setup","text":"require 'lspconfig' . java_language_server . setup {}","title":"Setup"},{"location":"configurations/java_language_server/#default-values","text":"{ filetypes = { 'java' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = {}, }","title":"Default values"},{"location":"configurations/jdtls/","text":"jdtls (Java) https://projects.eclipse.org/projects/eclipse.jdt.ls Language server for Java. IMPORTANT: If you want all the features jdtls has to offer, nvim-jdtls is highly recommended. If all you need is diagnostics, completion, imports, gotos and formatting and some code actions you can keep reading here. For manual installation you can download precompiled binaries from the official downloads site and ensure that the PATH variable contains the bin directory of the extracted archive. -- init.lua require 'lspconfig' . jdtls . setup {} You can also pass extra custom jvm arguments with the JDTLS_JVM_ARGS environment variable as a space separated list of arguments, that will be converted to multiple --jvm-arg= args when passed to the jdtls script. This will allow for example tweaking the jvm arguments or integration with external tools like lombok: export JDTLS_JVM_ARGS = \"-javaagent: $HOME /.local/share/java/lombok.jar\" For automatic installation you can use the following unofficial installers/launchers under your own risk: - jdtls-launcher (Includes lombok support by default) -- init.lua require 'lspconfig' . jdtls . setup { cmd = { 'jdtls' } } Setup require 'lspconfig' . jdtls . setup {} Default values { cmd = { 'jdtls' , '-configuration' , '/home/runner/.cache/jdtls/config' , '-data' , '/home/runner/.cache/jdtls/workspace' , }, filetypes = { 'java' }, handlers = { [ 'language/status' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/jdtls.lua end , [ 'textDocument/codeAction' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/jdtls.lua end , [ 'textDocument/rename' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/jdtls.lua end , [ 'workspace/applyEdit' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/jdtls.lua end , }, init_options = { jvm_args = {}, workspace = '/home/runner/.cache/jdtls/workspace' , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/jdtls.lua:102 end , single_file_support = true , }","title":"jdtls (Java)"},{"location":"configurations/jdtls/#jdtls-java","text":"https://projects.eclipse.org/projects/eclipse.jdt.ls Language server for Java. IMPORTANT: If you want all the features jdtls has to offer, nvim-jdtls is highly recommended. If all you need is diagnostics, completion, imports, gotos and formatting and some code actions you can keep reading here. For manual installation you can download precompiled binaries from the official downloads site and ensure that the PATH variable contains the bin directory of the extracted archive. -- init.lua require 'lspconfig' . jdtls . setup {} You can also pass extra custom jvm arguments with the JDTLS_JVM_ARGS environment variable as a space separated list of arguments, that will be converted to multiple --jvm-arg= args when passed to the jdtls script. This will allow for example tweaking the jvm arguments or integration with external tools like lombok: export JDTLS_JVM_ARGS = \"-javaagent: $HOME /.local/share/java/lombok.jar\" For automatic installation you can use the following unofficial installers/launchers under your own risk: - jdtls-launcher (Includes lombok support by default) -- init.lua require 'lspconfig' . jdtls . setup { cmd = { 'jdtls' } }","title":"jdtls (Java)"},{"location":"configurations/jdtls/#setup","text":"require 'lspconfig' . jdtls . setup {}","title":"Setup"},{"location":"configurations/jdtls/#default-values","text":"{ cmd = { 'jdtls' , '-configuration' , '/home/runner/.cache/jdtls/config' , '-data' , '/home/runner/.cache/jdtls/workspace' , }, filetypes = { 'java' }, handlers = { [ 'language/status' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/jdtls.lua end , [ 'textDocument/codeAction' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/jdtls.lua end , [ 'textDocument/rename' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/jdtls.lua end , [ 'workspace/applyEdit' ] = function () -- see nvim-lspconfig/lua/lspconfig/server_configurations/jdtls.lua end , }, init_options = { jvm_args = {}, workspace = '/home/runner/.cache/jdtls/workspace' , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/jdtls.lua:102 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/jedi_language_server/","text":"jedi_language_server (Python) https://github.com/pappasam/jedi-language-server jedi-language-server , a language server for Python, built on top of jedi Setup require 'lspconfig' . jedi_language_server . setup {} Default values { cmd = { 'jedi-language-server' }, filetypes = { 'python' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"jedi_language_server (Python)"},{"location":"configurations/jedi_language_server/#jedi_language_server-python","text":"https://github.com/pappasam/jedi-language-server jedi-language-server , a language server for Python, built on top of jedi","title":"jedi_language_server (Python)"},{"location":"configurations/jedi_language_server/#setup","text":"require 'lspconfig' . jedi_language_server . setup {}","title":"Setup"},{"location":"configurations/jedi_language_server/#default-values","text":"{ cmd = { 'jedi-language-server' }, filetypes = { 'python' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/jsonls/","text":"jsonls (JSON) https://github.com/hrsh7th/vscode-langservers-extracted vscode-json-language-server, a language server for JSON and JSON schema vscode-json-language-server can be installed via npm : npm i -g vscode-langservers-extracted Neovim does not currently include built-in snippets. vscode-json-language-server only provides completions when snippet support is enabled. To enable completion, install a snippet plugin and add the following override to your language client capabilities during setup. --Enable (broadcasting) snippet capability for completion local capabilities = vim . lsp . protocol . make_client_capabilities () capabilities . textDocument . completion . completionItem . snippetSupport = true require 'lspconfig' . jsonls . setup { capabilities = capabilities , } Setup require 'lspconfig' . jsonls . setup {} Default values { cmd = { 'vscode-json-language-server' , '--stdio' }, filetypes = { 'json' , 'jsonc' }, init_options = { provideFormatter = true , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"jsonls (JSON)"},{"location":"configurations/jsonls/#jsonls-json","text":"https://github.com/hrsh7th/vscode-langservers-extracted vscode-json-language-server, a language server for JSON and JSON schema vscode-json-language-server can be installed via npm : npm i -g vscode-langservers-extracted Neovim does not currently include built-in snippets. vscode-json-language-server only provides completions when snippet support is enabled. To enable completion, install a snippet plugin and add the following override to your language client capabilities during setup. --Enable (broadcasting) snippet capability for completion local capabilities = vim . lsp . protocol . make_client_capabilities () capabilities . textDocument . completion . completionItem . snippetSupport = true require 'lspconfig' . jsonls . setup { capabilities = capabilities , }","title":"jsonls (JSON)"},{"location":"configurations/jsonls/#setup","text":"require 'lspconfig' . jsonls . setup {}","title":"Setup"},{"location":"configurations/jsonls/#default-values","text":"{ cmd = { 'vscode-json-language-server' , '--stdio' }, filetypes = { 'json' , 'jsonc' }, init_options = { provideFormatter = true , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/jsonnet_ls/","text":"jsonnet_ls (Jsonnet) https://github.com/grafana/jsonnet-language-server A Language Server Protocol (LSP) server for Jsonnet. The language server can be installed with go : go install github.com/grafana/jsonnet-language-server@latest Setup require 'lspconfig' . jsonnet_ls . setup {} Default values { cmd = { 'jsonnet-language-server' }, filetypes = { 'jsonnet' , 'libsonnet' }, on_new_config = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/jsonnet_ls.lua:19 end , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/jsonnet_ls.lua:16 end , }","title":"jsonnet_ls (Jsonnet)"},{"location":"configurations/jsonnet_ls/#jsonnet_ls-jsonnet","text":"https://github.com/grafana/jsonnet-language-server A Language Server Protocol (LSP) server for Jsonnet. The language server can be installed with go : go install github.com/grafana/jsonnet-language-server@latest","title":"jsonnet_ls (Jsonnet)"},{"location":"configurations/jsonnet_ls/#setup","text":"require 'lspconfig' . jsonnet_ls . setup {}","title":"Setup"},{"location":"configurations/jsonnet_ls/#default-values","text":"{ cmd = { 'jsonnet-language-server' }, filetypes = { 'jsonnet' , 'libsonnet' }, on_new_config = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/jsonnet_ls.lua:19 end , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/jsonnet_ls.lua:16 end , }","title":"Default values"},{"location":"configurations/julials/","text":"julials (Julia) https://github.com/julia-vscode/julia-vscode LanguageServer.jl can be installed with julia and Pkg : julia --project = ~/.julia/environments/nvim-lspconfig -e 'using Pkg; Pkg.add(\"LanguageServer\")' where ~/.julia/environments/nvim-lspconfig is the location where the default configuration expects LanguageServer.jl to be installed. To update an existing install, use the following command: julia --project = ~/.julia/environments/nvim-lspconfig -e 'using Pkg; Pkg.update()' Note: In order to have LanguageServer.jl pick up installed packages or dependencies in a Julia project, you must make sure that the project is instantiated: julia --project = /path/to/my/project -e 'using Pkg; Pkg.instantiate()' Setup require 'lspconfig' . julials . setup {} Default values { cmd = { 'julia' , '--startup-file=no' , '--history-file=no' , '-e' , ' # Load LanguageServer.jl: attempt to load from ~/.julia/environments/nvim-lspconfig \\n # with the regular load path as a fallback \\n ls_install_path = joinpath( \\n get(DEPOT_PATH, 1, joinpath(homedir(), \".julia\")), \\n \"environments\", \"nvim-lspconfig\" \\n ) \\n pushfirst!(LOAD_PATH, ls_install_path) \\n using LanguageServer \\n popfirst!(LOAD_PATH) \\n depot_path = get(ENV, \"JULIA_DEPOT_PATH\", \"\") \\n project_path = let \\n dirname(something( \\n ## 1. Finds an explicitly set project (JULIA_PROJECT) \\n Base.load_path_expand(( \\n p = get(ENV, \"JULIA_PROJECT\", nothing); \\n p === nothing ? nothing : isempty(p) ? nothing : p \\n )), \\n ## 2. Look for a Project.toml file in the current working directory, \\n ## or parent directories, with $HOME as an upper boundary \\n Base.current_project(), \\n ## 3. First entry in the load path \\n get(Base.load_path(), 1, nothing), \\n ## 4. Fallback to default global environment, \\n ## this is more or less unreachable \\n Base.load_path_expand(\"@v#.#\"), \\n )) \\n end \\n @info \"Running language server\" VERSION pwd() project_path depot_path \\n server = LanguageServer.LanguageServerInstance(stdin, stdout, project_path, depot_path) \\n server.runlinter = true \\n run(server) \\n ' , }, filetypes = { 'julia' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/julials.lua:47 end , single_file_support = true , }","title":"julials (Julia)"},{"location":"configurations/julials/#julials-julia","text":"https://github.com/julia-vscode/julia-vscode LanguageServer.jl can be installed with julia and Pkg : julia --project = ~/.julia/environments/nvim-lspconfig -e 'using Pkg; Pkg.add(\"LanguageServer\")' where ~/.julia/environments/nvim-lspconfig is the location where the default configuration expects LanguageServer.jl to be installed. To update an existing install, use the following command: julia --project = ~/.julia/environments/nvim-lspconfig -e 'using Pkg; Pkg.update()' Note: In order to have LanguageServer.jl pick up installed packages or dependencies in a Julia project, you must make sure that the project is instantiated: julia --project = /path/to/my/project -e 'using Pkg; Pkg.instantiate()'","title":"julials (Julia)"},{"location":"configurations/julials/#setup","text":"require 'lspconfig' . julials . setup {}","title":"Setup"},{"location":"configurations/julials/#default-values","text":"{ cmd = { 'julia' , '--startup-file=no' , '--history-file=no' , '-e' , ' # Load LanguageServer.jl: attempt to load from ~/.julia/environments/nvim-lspconfig \\n # with the regular load path as a fallback \\n ls_install_path = joinpath( \\n get(DEPOT_PATH, 1, joinpath(homedir(), \".julia\")), \\n \"environments\", \"nvim-lspconfig\" \\n ) \\n pushfirst!(LOAD_PATH, ls_install_path) \\n using LanguageServer \\n popfirst!(LOAD_PATH) \\n depot_path = get(ENV, \"JULIA_DEPOT_PATH\", \"\") \\n project_path = let \\n dirname(something( \\n ## 1. Finds an explicitly set project (JULIA_PROJECT) \\n Base.load_path_expand(( \\n p = get(ENV, \"JULIA_PROJECT\", nothing); \\n p === nothing ? nothing : isempty(p) ? nothing : p \\n )), \\n ## 2. Look for a Project.toml file in the current working directory, \\n ## or parent directories, with $HOME as an upper boundary \\n Base.current_project(), \\n ## 3. First entry in the load path \\n get(Base.load_path(), 1, nothing), \\n ## 4. Fallback to default global environment, \\n ## this is more or less unreachable \\n Base.load_path_expand(\"@v#.#\"), \\n )) \\n end \\n @info \"Running language server\" VERSION pwd() project_path depot_path \\n server = LanguageServer.LanguageServerInstance(stdin, stdout, project_path, depot_path) \\n server.runlinter = true \\n run(server) \\n ' , }, filetypes = { 'julia' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/julials.lua:47 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/kotlin_language_server/","text":"kotlin_language_server (Kotlin) A kotlin language server which was developed for internal usage and released afterwards. Maintaining is not done by the original author, but by fwcd. It is built via gradle and developed on github. Source and additional description: https://github.com/fwcd/kotlin-language-server This server requires vim to be aware of the kotlin-filetype. You could refer for this capability to: https://github.com/udalov/kotlin-vim (recommended) Note that there is no LICENSE specified yet. Setup require 'lspconfig' . kotlin_language_server . setup {} Default values { cmd = { 'kotlin-language-server' }, filetypes = { 'kotlin' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/kotlin_language_server.lua:28 end , }","title":"kotlin_language_server (Kotlin)"},{"location":"configurations/kotlin_language_server/#kotlin_language_server-kotlin","text":"A kotlin language server which was developed for internal usage and released afterwards. Maintaining is not done by the original author, but by fwcd. It is built via gradle and developed on github. Source and additional description: https://github.com/fwcd/kotlin-language-server This server requires vim to be aware of the kotlin-filetype. You could refer for this capability to: https://github.com/udalov/kotlin-vim (recommended) Note that there is no LICENSE specified yet.","title":"kotlin_language_server (Kotlin)"},{"location":"configurations/kotlin_language_server/#setup","text":"require 'lspconfig' . kotlin_language_server . setup {}","title":"Setup"},{"location":"configurations/kotlin_language_server/#default-values","text":"{ cmd = { 'kotlin-language-server' }, filetypes = { 'kotlin' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/kotlin_language_server.lua:28 end , }","title":"Default values"},{"location":"configurations/lean3ls/","text":"lean3ls (Lean) https://github.com/leanprover/lean-client-js/tree/master/lean-language-server Lean installation instructions can be found here . Once Lean is installed, you can install the Lean 3 language server by running npm install -g lean-language-server Note: that if you're using lean.nvim , that plugin fully handles the setup of the Lean language server, and you shouldn't set up lean3ls both with it and lspconfig . Setup require 'lspconfig' . lean3ls . setup {} Default values { cmd = { 'lean-language-server' , '--stdio' , '--' , '-M' , '4096' , '-T' , '100000' }, filetypes = { 'lean3' }, offset_encoding = 'utf-32' , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/lean3ls.lua:16 end , single_file_support = true , }","title":"lean3ls (Lean)"},{"location":"configurations/lean3ls/#lean3ls-lean","text":"https://github.com/leanprover/lean-client-js/tree/master/lean-language-server Lean installation instructions can be found here . Once Lean is installed, you can install the Lean 3 language server by running npm install -g lean-language-server Note: that if you're using lean.nvim , that plugin fully handles the setup of the Lean language server, and you shouldn't set up lean3ls both with it and lspconfig .","title":"lean3ls (Lean)"},{"location":"configurations/lean3ls/#setup","text":"require 'lspconfig' . lean3ls . setup {}","title":"Setup"},{"location":"configurations/lean3ls/#default-values","text":"{ cmd = { 'lean-language-server' , '--stdio' , '--' , '-M' , '4096' , '-T' , '100000' }, filetypes = { 'lean3' }, offset_encoding = 'utf-32' , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/lean3ls.lua:16 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/leanls/","text":"leanls (Lean) https://github.com/leanprover/lean4 Lean installation instructions can be found here . The Lean 4 language server is built-in with a Lean 4 install (and can be manually run with, e.g., lean --server ). Note: that if you're using lean.nvim , that plugin fully handles the setup of the Lean language server, and you shouldn't set up leanls both with it and lspconfig . Setup require 'lspconfig' . leanls . setup {} Default values { cmd = { 'lake' , 'serve' , '--' }, filetypes = { 'lean' }, on_new_config = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/leanls.lua:34 end , options = { no_lake_lsp_cmd = { 'lean' , '--server' }, }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/leanls.lua:7 end , single_file_support = true , }","title":"leanls (Lean)"},{"location":"configurations/leanls/#leanls-lean","text":"https://github.com/leanprover/lean4 Lean installation instructions can be found here . The Lean 4 language server is built-in with a Lean 4 install (and can be manually run with, e.g., lean --server ). Note: that if you're using lean.nvim , that plugin fully handles the setup of the Lean language server, and you shouldn't set up leanls both with it and lspconfig .","title":"leanls (Lean)"},{"location":"configurations/leanls/#setup","text":"require 'lspconfig' . leanls . setup {}","title":"Setup"},{"location":"configurations/leanls/#default-values","text":"{ cmd = { 'lake' , 'serve' , '--' }, filetypes = { 'lean' }, on_new_config = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/leanls.lua:34 end , options = { no_lake_lsp_cmd = { 'lean' , '--server' }, }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/leanls.lua:7 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/lelwel_ls/","text":"lelwel_ls (Lelwel) https://github.com/0x2a-42/lelwel Language server for lelwel grammars. You can install lelwel-ls via cargo: cargo install --features = \"lsp\" lelwel Setup require 'lspconfig' . lelwel_ls . setup {} Default values { cmd = { 'lelwel-ls' }, filetypes = { 'llw' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"lelwel_ls (Lelwel)"},{"location":"configurations/lelwel_ls/#lelwel_ls-lelwel","text":"https://github.com/0x2a-42/lelwel Language server for lelwel grammars. You can install lelwel-ls via cargo: cargo install --features = \"lsp\" lelwel","title":"lelwel_ls (Lelwel)"},{"location":"configurations/lelwel_ls/#setup","text":"require 'lspconfig' . lelwel_ls . setup {}","title":"Setup"},{"location":"configurations/lelwel_ls/#default-values","text":"{ cmd = { 'lelwel-ls' }, filetypes = { 'llw' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"Default values"},{"location":"configurations/lemminx/","text":"lemminx (XML) https://github.com/eclipse/lemminx The easiest way to install the server is to get a binary from https://github.com/redhat-developer/vscode-xml/releases and place it on your PATH. NOTE to macOS users: Binaries from unidentified developers are blocked by default. If you trust the downloaded binary, run it once, cancel the prompt, then remove the binary from Gatekeeper quarantine with xattr -d com.apple.quarantine lemminx . It should now run without being blocked. Setup require 'lspconfig' . lemminx . setup {} Default values { cmd = { 'lemminx' }, filetypes = { 'xml' , 'xsd' , 'xsl' , 'xslt' , 'svg' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"lemminx (XML)"},{"location":"configurations/lemminx/#lemminx-xml","text":"https://github.com/eclipse/lemminx The easiest way to install the server is to get a binary from https://github.com/redhat-developer/vscode-xml/releases and place it on your PATH. NOTE to macOS users: Binaries from unidentified developers are blocked by default. If you trust the downloaded binary, run it once, cancel the prompt, then remove the binary from Gatekeeper quarantine with xattr -d com.apple.quarantine lemminx . It should now run without being blocked.","title":"lemminx (XML)"},{"location":"configurations/lemminx/#setup","text":"require 'lspconfig' . lemminx . setup {}","title":"Setup"},{"location":"configurations/lemminx/#default-values","text":"{ cmd = { 'lemminx' }, filetypes = { 'xml' , 'xsd' , 'xsl' , 'xslt' , 'svg' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/ltex/","text":"ltex (LaTeX) https://github.com/valentjn/ltex-ls LTeX Language Server: LSP language server for LanguageTool \ud83d\udd0d\u2714\ufe0f with support for LaTeX \ud83c\udf93, Markdown \ud83d\udcdd, and others To install, download the latest release and ensure ltex-ls is on your path. To support org files or R sweave, users can define a custom filetype autocommand (or use a plugin which defines these filetypes): vim . cmd [[ autocmd BufRead,BufNewFile *.org set filetype=org ]] Setup require 'lspconfig' . ltex . setup {} Default values { cmd = { 'ltex-ls' }, filetypes = { 'bib' , 'gitcommit' , 'markdown' , 'org' , 'plaintex' , 'rst' , 'rnoweb' , 'tex' }, get_language_id = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/ltex.lua:23 end , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"ltex (LaTeX)"},{"location":"configurations/ltex/#ltex-latex","text":"https://github.com/valentjn/ltex-ls LTeX Language Server: LSP language server for LanguageTool \ud83d\udd0d\u2714\ufe0f with support for LaTeX \ud83c\udf93, Markdown \ud83d\udcdd, and others To install, download the latest release and ensure ltex-ls is on your path. To support org files or R sweave, users can define a custom filetype autocommand (or use a plugin which defines these filetypes): vim . cmd [[ autocmd BufRead,BufNewFile *.org set filetype=org ]]","title":"ltex (LaTeX)"},{"location":"configurations/ltex/#setup","text":"require 'lspconfig' . ltex . setup {}","title":"Setup"},{"location":"configurations/ltex/#default-values","text":"{ cmd = { 'ltex-ls' }, filetypes = { 'bib' , 'gitcommit' , 'markdown' , 'org' , 'plaintex' , 'rst' , 'rnoweb' , 'tex' }, get_language_id = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/ltex.lua:23 end , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/m68k/","text":"m68k (m68k) https://github.com/grahambates/m68k-lsp Language server for Motorola 68000 family assembly m68k-lsp-server can be installed via npm : npm install -g m68k-lsp-server Ensure you are using the 68k asm syntax variant in Neovim. vim . g . asmsyntax = 'asm68k' Setup require 'lspconfig' . m68k . setup {} Default values { cmd = { 'm68k-lsp-server' , '--stdio' }, filetypes = { 'asm68k' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"m68k (m68k)"},{"location":"configurations/m68k/#m68k-m68k","text":"https://github.com/grahambates/m68k-lsp Language server for Motorola 68000 family assembly m68k-lsp-server can be installed via npm : npm install -g m68k-lsp-server Ensure you are using the 68k asm syntax variant in Neovim. vim . g . asmsyntax = 'asm68k'","title":"m68k (m68k)"},{"location":"configurations/m68k/#setup","text":"require 'lspconfig' . m68k . setup {}","title":"Setup"},{"location":"configurations/m68k/#default-values","text":"{ cmd = { 'm68k-lsp-server' , '--stdio' }, filetypes = { 'asm68k' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/marksman/","text":"marksman (marksman) https://github.com/artempyanykh/marksman Marksman is a Markdown LSP server providing completion, cross-references, diagnostics, and more. Marksman works on MacOS, Linux, and Windows and is distributed as a self-contained binary for each OS. Pre-built binaries can be downloaded from https://github.com/artempyanykh/marksman/releases Setup require 'lspconfig' . marksman . setup {} Default values { cmd = { 'marksman' , 'server' }, filetypes = { 'markdown' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/marksman.lua:10 end , }","title":"marksman (marksman)"},{"location":"configurations/marksman/#marksman-marksman","text":"https://github.com/artempyanykh/marksman Marksman is a Markdown LSP server providing completion, cross-references, diagnostics, and more. Marksman works on MacOS, Linux, and Windows and is distributed as a self-contained binary for each OS. Pre-built binaries can be downloaded from https://github.com/artempyanykh/marksman/releases","title":"marksman (marksman)"},{"location":"configurations/marksman/#setup","text":"require 'lspconfig' . marksman . setup {}","title":"Setup"},{"location":"configurations/marksman/#default-values","text":"{ cmd = { 'marksman' , 'server' }, filetypes = { 'markdown' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/marksman.lua:10 end , }","title":"Default values"},{"location":"configurations/metals/","text":"metals (Scala) https://scalameta.org/metals/ Scala language server with rich IDE features. See full instructions in the Metals documentation: https://scalameta.org/metals/docs/editors/vim#using-an-alternative-lsp-client Note: that if you're using nvim-metals , that plugin fully handles the setup and installation of Metals, and you shouldn't set up Metals both with it and lspconfig . To install Metals, make sure to have coursier installed, and once you do you can install the latest Metals with cs install metals . Setup require 'lspconfig' . metals . setup {} Default values { cmd = { 'metals' }, filetypes = { 'scala' }, init_options = { compilerOptions = { snippetAutoIndent = false , }, isHttpEnabled = true , statusBarProvider = 'show-message' , }, message_level = 4 , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"metals (Scala)"},{"location":"configurations/metals/#metals-scala","text":"https://scalameta.org/metals/ Scala language server with rich IDE features. See full instructions in the Metals documentation: https://scalameta.org/metals/docs/editors/vim#using-an-alternative-lsp-client Note: that if you're using nvim-metals , that plugin fully handles the setup and installation of Metals, and you shouldn't set up Metals both with it and lspconfig . To install Metals, make sure to have coursier installed, and once you do you can install the latest Metals with cs install metals .","title":"metals (Scala)"},{"location":"configurations/metals/#setup","text":"require 'lspconfig' . metals . setup {}","title":"Setup"},{"location":"configurations/metals/#default-values","text":"{ cmd = { 'metals' }, filetypes = { 'scala' }, init_options = { compilerOptions = { snippetAutoIndent = false , }, isHttpEnabled = true , statusBarProvider = 'show-message' , }, message_level = 4 , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/mint/","text":"mint (Mint) https://www.mint-lang.com Install Mint using the instructions . The language server is included since version 0.12.0. Setup require 'lspconfig' . mint . setup {} Default values { cmd = { 'mint' , 'ls' }, filetypes = { 'mint' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/mint.lua:7 end , single_file_support = true , }","title":"mint (Mint)"},{"location":"configurations/mint/#mint-mint","text":"https://www.mint-lang.com Install Mint using the instructions . The language server is included since version 0.12.0.","title":"mint (Mint)"},{"location":"configurations/mint/#setup","text":"require 'lspconfig' . mint . setup {}","title":"Setup"},{"location":"configurations/mint/#default-values","text":"{ cmd = { 'mint' , 'ls' }, filetypes = { 'mint' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/mint.lua:7 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/mm0_ls/","text":"mm0_ls (mm0_ls) https://github.com/digama0/mm0 Language Server for the metamath-zero theorem prover. Requires mm0-rs to be installed and available on the PATH . Setup require 'lspconfig' . mm0_ls . setup {} Default values { cmd = { 'mm0-rs' , 'server' }, filetypes = { 'metamath-zero' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"mm0_ls (mm0_ls)"},{"location":"configurations/mm0_ls/#mm0_ls-mm0_ls","text":"https://github.com/digama0/mm0 Language Server for the metamath-zero theorem prover. Requires mm0-rs to be installed and available on the PATH .","title":"mm0_ls (mm0_ls)"},{"location":"configurations/mm0_ls/#setup","text":"require 'lspconfig' . mm0_ls . setup {}","title":"Setup"},{"location":"configurations/mm0_ls/#default-values","text":"{ cmd = { 'mm0-rs' , 'server' }, filetypes = { 'metamath-zero' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/nickel_ls/","text":"nickel_ls (Nickel) Nickel Language Server https://github.com/tweag/nickel nls can be installed with nix, or cargo, from the Nickel repository. git clone https://github.com/tweag/nickel.git Nix: cd nickel nix-env -f . -i cargo: cd nickel/lsp/nls cargo install --path . In order to have lspconfig detect Nickel filetypes (a prequisite for autostarting a server), install the Nickel vim plugin . Setup require 'lspconfig' . nickel_ls . setup {} Default values { cmd = { 'nls' }, filetypes = { 'ncl' , 'nickel' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"nickel_ls (Nickel)"},{"location":"configurations/nickel_ls/#nickel_ls-nickel","text":"Nickel Language Server https://github.com/tweag/nickel nls can be installed with nix, or cargo, from the Nickel repository. git clone https://github.com/tweag/nickel.git Nix: cd nickel nix-env -f . -i cargo: cd nickel/lsp/nls cargo install --path . In order to have lspconfig detect Nickel filetypes (a prequisite for autostarting a server), install the Nickel vim plugin .","title":"nickel_ls (Nickel)"},{"location":"configurations/nickel_ls/#setup","text":"require 'lspconfig' . nickel_ls . setup {}","title":"Setup"},{"location":"configurations/nickel_ls/#default-values","text":"{ cmd = { 'nls' }, filetypes = { 'ncl' , 'nickel' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"Default values"},{"location":"configurations/nimls/","text":"nimls (Nimble) https://github.com/PMunch/nimlsp nimlsp can be installed via the nimble package manager: nimble install nimlsp Setup require 'lspconfig' . nimls . setup {} Default values { cmd = { 'nimlsp' }, filetypes = { 'nim' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/nimls.lua:7 end , single_file_support = true , }","title":"nimls (Nimble)"},{"location":"configurations/nimls/#nimls-nimble","text":"https://github.com/PMunch/nimlsp nimlsp can be installed via the nimble package manager: nimble install nimlsp","title":"nimls (Nimble)"},{"location":"configurations/nimls/#setup","text":"require 'lspconfig' . nimls . setup {}","title":"Setup"},{"location":"configurations/nimls/#default-values","text":"{ cmd = { 'nimlsp' }, filetypes = { 'nim' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/nimls.lua:7 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/ocamlls/","text":"ocamlls (OCaml) https://github.com/ocaml-lsp/ocaml-language-server ocaml-language-server can be installed via npm npm install -g ocaml-language-server Setup require 'lspconfig' . ocamlls . setup {} Default values { cmd = { 'ocaml-language-server' , '--stdio' }, filetypes = { 'ocaml' , 'reason' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"ocamlls (OCaml)"},{"location":"configurations/ocamlls/#ocamlls-ocaml","text":"https://github.com/ocaml-lsp/ocaml-language-server ocaml-language-server can be installed via npm npm install -g ocaml-language-server","title":"ocamlls (OCaml)"},{"location":"configurations/ocamlls/#setup","text":"require 'lspconfig' . ocamlls . setup {}","title":"Setup"},{"location":"configurations/ocamlls/#default-values","text":"{ cmd = { 'ocaml-language-server' , '--stdio' }, filetypes = { 'ocaml' , 'reason' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/ocamllsp/","text":"ocamllsp (OCaml) https://github.com/ocaml/ocaml-lsp ocaml-lsp can be installed as described in installation guide . To install the lsp server in a particular opam switch: opam install ocaml-lsp-server Setup require 'lspconfig' . ocamllsp . setup {} Default values { cmd = { 'ocamllsp' }, filetypes = { 'ocaml' , 'ocaml.menhir' , 'ocaml.interface' , 'ocaml.ocamllex' , 'reason' , 'dune' }, get_language_id = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/ocamllsp.lua:12 end , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"ocamllsp (OCaml)"},{"location":"configurations/ocamllsp/#ocamllsp-ocaml","text":"https://github.com/ocaml/ocaml-lsp ocaml-lsp can be installed as described in installation guide . To install the lsp server in a particular opam switch: opam install ocaml-lsp-server","title":"ocamllsp (OCaml)"},{"location":"configurations/ocamllsp/#setup","text":"require 'lspconfig' . ocamllsp . setup {}","title":"Setup"},{"location":"configurations/ocamllsp/#default-values","text":"{ cmd = { 'ocamllsp' }, filetypes = { 'ocaml' , 'ocaml.menhir' , 'ocaml.interface' , 'ocaml.ocamllex' , 'reason' , 'dune' }, get_language_id = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/ocamllsp.lua:12 end , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/ols/","text":"ols (ols) https://github.com/DanielGavin/ols `Odin Language Server`. Setup require 'lspconfig' . ols . setup {} Default values { cmd = { 'ols' }, filetypes = { 'odin' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"ols (ols)"},{"location":"configurations/ols/#ols-ols","text":"https://github.com/DanielGavin/ols `Odin Language Server`.","title":"ols (ols)"},{"location":"configurations/ols/#setup","text":"require 'lspconfig' . ols . setup {}","title":"Setup"},{"location":"configurations/ols/#default-values","text":"{ cmd = { 'ols' }, filetypes = { 'odin' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/omnisharp/","text":"omnisharp (C#) https://github.com/omnisharp/omnisharp-roslyn OmniSharp server based on Roslyn workspaces omnisharp-roslyn can be installed by downloading and extracting a release from here . OmniSharp can also be built from source by following the instructions here . OmniSharp requires the dotnet-sdk to be installed. By default, omnisharp-roslyn doesn't have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You must add the following to your init.vim or init.lua to set cmd to the absolute path ($HOME and ~ are not expanded) of the unzipped run script or binary. require 'lspconfig' . omnisharp . setup { cmd = { \"dotnet\" , \"/path/to/omnisharp/OmniSharp.dll\" }, -- Enables support for reading code style, naming convention and analyzer -- settings from .editorconfig. enable_editorconfig_support = true , -- If true, MSBuild project system will only load projects for files that -- were opened in the editor. This setting is useful for big C# codebases -- and allows for faster initialization of code navigation features only -- for projects that are relevant to code that is being edited. With this -- setting enabled OmniSharp may load fewer projects and may thus display -- incomplete reference lists for symbols. enable_ms_build_load_projects_on_demand = false , -- Enables support for roslyn analyzers, code fixes and rulesets. enable_roslyn_analyzers = false , -- Specifies whether 'using' directives should be grouped and sorted during -- document formatting. organize_imports_on_format = false , -- Enables support for showing unimported types and unimported extension -- methods in completion lists. When committed, the appropriate using -- directive will be added at the top of the current file. This option can -- have a negative impact on initial completion responsiveness, -- particularly for the first few completion sessions after opening a -- solution. enable_import_completion = false , -- Specifies whether to include preview versions of the .NET SDK when -- determining which version to use for project loading. sdk_include_prereleases = true , -- Only run analyzers against open files when 'enableRoslynAnalyzers' is -- true analyze_open_documents_only = false , } Setup require 'lspconfig' . omnisharp . setup {} Default values { analyze_open_documents_only = false , enable_editorconfig_support = true , enable_import_completion = false , enable_ms_build_load_projects_on_demand = false , enable_roslyn_analyzers = false , filetypes = { 'cs' , 'vb' }, init_options = {}, on_new_config = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/omnisharp.lua:44 end , organize_imports_on_format = false , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/omnisharp.lua:41 end , sdk_include_prereleases = true , }","title":"omnisharp (C#)"},{"location":"configurations/omnisharp/#omnisharp-c","text":"https://github.com/omnisharp/omnisharp-roslyn OmniSharp server based on Roslyn workspaces omnisharp-roslyn can be installed by downloading and extracting a release from here . OmniSharp can also be built from source by following the instructions here . OmniSharp requires the dotnet-sdk to be installed. By default, omnisharp-roslyn doesn't have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You must add the following to your init.vim or init.lua to set cmd to the absolute path ($HOME and ~ are not expanded) of the unzipped run script or binary. require 'lspconfig' . omnisharp . setup { cmd = { \"dotnet\" , \"/path/to/omnisharp/OmniSharp.dll\" }, -- Enables support for reading code style, naming convention and analyzer -- settings from .editorconfig. enable_editorconfig_support = true , -- If true, MSBuild project system will only load projects for files that -- were opened in the editor. This setting is useful for big C# codebases -- and allows for faster initialization of code navigation features only -- for projects that are relevant to code that is being edited. With this -- setting enabled OmniSharp may load fewer projects and may thus display -- incomplete reference lists for symbols. enable_ms_build_load_projects_on_demand = false , -- Enables support for roslyn analyzers, code fixes and rulesets. enable_roslyn_analyzers = false , -- Specifies whether 'using' directives should be grouped and sorted during -- document formatting. organize_imports_on_format = false , -- Enables support for showing unimported types and unimported extension -- methods in completion lists. When committed, the appropriate using -- directive will be added at the top of the current file. This option can -- have a negative impact on initial completion responsiveness, -- particularly for the first few completion sessions after opening a -- solution. enable_import_completion = false , -- Specifies whether to include preview versions of the .NET SDK when -- determining which version to use for project loading. sdk_include_prereleases = true , -- Only run analyzers against open files when 'enableRoslynAnalyzers' is -- true analyze_open_documents_only = false , }","title":"omnisharp (C#)"},{"location":"configurations/omnisharp/#setup","text":"require 'lspconfig' . omnisharp . setup {}","title":"Setup"},{"location":"configurations/omnisharp/#default-values","text":"{ analyze_open_documents_only = false , enable_editorconfig_support = true , enable_import_completion = false , enable_ms_build_load_projects_on_demand = false , enable_roslyn_analyzers = false , filetypes = { 'cs' , 'vb' }, init_options = {}, on_new_config = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/omnisharp.lua:44 end , organize_imports_on_format = false , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/omnisharp.lua:41 end , sdk_include_prereleases = true , }","title":"Default values"},{"location":"configurations/opencl_ls/","text":"opencl_ls (OpenCL) https://github.com/Galarius/opencl-language-server Build instructions can be found here . Prebuilt binaries are available for Linux, macOS and Windows here . Setup require 'lspconfig' . opencl_ls . setup {} Default values { cmd = { 'opencl-language-server' }, filetypes = { 'opencl' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"opencl_ls (OpenCL)"},{"location":"configurations/opencl_ls/#opencl_ls-opencl","text":"https://github.com/Galarius/opencl-language-server Build instructions can be found here . Prebuilt binaries are available for Linux, macOS and Windows here .","title":"opencl_ls (OpenCL)"},{"location":"configurations/opencl_ls/#setup","text":"require 'lspconfig' . opencl_ls . setup {}","title":"Setup"},{"location":"configurations/opencl_ls/#default-values","text":"{ cmd = { 'opencl-language-server' }, filetypes = { 'opencl' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"Default values"},{"location":"configurations/openscad_ls/","text":"openscad_ls (openscad_ls) https://github.com/dzhu/openscad-language-server A Language Server Protocol server for OpenSCAD You can build and install openscad-language-server binary with cargo : cargo install openscad-language-server Vim does not have built-in syntax for the openscad filetype currently. This can be added via an autocmd: vim . cmd [[ autocmd BufRead,BufNewFile *.scad set filetype=openscad ]] or by installing a filetype plugin such as https://github.com/sirtaj/vim-openscad Setup require 'lspconfig' . openscad_ls . setup {} Default values { cmd = { 'openscad-language-server' }, filetypes = { 'openscad' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"openscad_ls (openscad_ls)"},{"location":"configurations/openscad_ls/#openscad_ls-openscad_ls","text":"https://github.com/dzhu/openscad-language-server A Language Server Protocol server for OpenSCAD You can build and install openscad-language-server binary with cargo : cargo install openscad-language-server Vim does not have built-in syntax for the openscad filetype currently. This can be added via an autocmd: vim . cmd [[ autocmd BufRead,BufNewFile *.scad set filetype=openscad ]] or by installing a filetype plugin such as https://github.com/sirtaj/vim-openscad","title":"openscad_ls (openscad_ls)"},{"location":"configurations/openscad_ls/#setup","text":"require 'lspconfig' . openscad_ls . setup {}","title":"Setup"},{"location":"configurations/openscad_ls/#default-values","text":"{ cmd = { 'openscad-language-server' }, filetypes = { 'openscad' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/pasls/","text":"pasls (OpenCL) https://github.com/genericptr/pascal-language-server An LSP server implementation for Pascal variants that are supported by Free Pascal, including Object Pascal. It uses CodeTools from Lazarus as backend. First set cmd to the Pascal lsp binary. Customization options are passed to pasls as environment variables for example in your .bashrc : export FPCDIR = '/usr/lib/fpc/src' # FPC source directory (This is the only required option for the server to work). export PP = '/usr/lib/fpc/3.2.2/ppcx64' # Path to the Free Pascal compiler executable. export LAZARUSDIR = '/usr/lib/lazarus' # Path to the Lazarus sources. export FPCTARGET = '' # Target operating system for cross compiling. export FPCTARGETCPU = 'x86_64' # Target CPU for cross compiling. Setup require 'lspconfig' . pasls . setup {} Default values { cmd = { 'pasls' }, filetypes = { 'pascal' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"pasls (OpenCL)"},{"location":"configurations/pasls/#pasls-opencl","text":"https://github.com/genericptr/pascal-language-server An LSP server implementation for Pascal variants that are supported by Free Pascal, including Object Pascal. It uses CodeTools from Lazarus as backend. First set cmd to the Pascal lsp binary. Customization options are passed to pasls as environment variables for example in your .bashrc : export FPCDIR = '/usr/lib/fpc/src' # FPC source directory (This is the only required option for the server to work). export PP = '/usr/lib/fpc/3.2.2/ppcx64' # Path to the Free Pascal compiler executable. export LAZARUSDIR = '/usr/lib/lazarus' # Path to the Lazarus sources. export FPCTARGET = '' # Target operating system for cross compiling. export FPCTARGETCPU = 'x86_64' # Target CPU for cross compiling.","title":"pasls (OpenCL)"},{"location":"configurations/pasls/#setup","text":"require 'lspconfig' . pasls . setup {}","title":"Setup"},{"location":"configurations/pasls/#default-values","text":"{ cmd = { 'pasls' }, filetypes = { 'pascal' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/perlls/","text":"perlls (Perl) https://github.com/richterger/Perl-LanguageServer/tree/master/clients/vscode/perl Perl-LanguageServer , a language server for Perl. To use the language server, ensure that you have Perl::LanguageServer installed and perl command is on your path. Setup require 'lspconfig' . perlls . setup {} Default values { cmd = { 'perl' , '-MPerl::LanguageServer' , '-e' , 'Perl::LanguageServer::run' , '--' , '--port 13603' , '--nostdio 0' , '--version 2.1.0' , }, filetypes = { 'perl' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , settings = { perl = { fileFilter = { '.pm' , '.pl' }, ignoreDirs = '.git' , perlCmd = 'perl' , perlInc = ' ' , }, }, single_file_support = true , }","title":"perlls (Perl)"},{"location":"configurations/perlls/#perlls-perl","text":"https://github.com/richterger/Perl-LanguageServer/tree/master/clients/vscode/perl Perl-LanguageServer , a language server for Perl. To use the language server, ensure that you have Perl::LanguageServer installed and perl command is on your path.","title":"perlls (Perl)"},{"location":"configurations/perlls/#setup","text":"require 'lspconfig' . perlls . setup {}","title":"Setup"},{"location":"configurations/perlls/#default-values","text":"{ cmd = { 'perl' , '-MPerl::LanguageServer' , '-e' , 'Perl::LanguageServer::run' , '--' , '--port 13603' , '--nostdio 0' , '--version 2.1.0' , }, filetypes = { 'perl' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , settings = { perl = { fileFilter = { '.pm' , '.pl' }, ignoreDirs = '.git' , perlCmd = 'perl' , perlInc = ' ' , }, }, single_file_support = true , }","title":"Default values"},{"location":"configurations/perlnavigator/","text":"perlnavigator (perlnavigator) https://github.com/bscan/PerlNavigator A Perl language server By default, perlnavigator doesn't have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You have to install the language server manually. Clone the PerlNavigator repo, install based on the instructions , and point cmd to server.js inside the server/out directory: cmd = { 'node' , '<path_to_repo>/server/out/server.js' , '--stdio' } At minimum, you will need perl in your path. If you want to use a non-standard perl you will need to set your configuration like so: settings = { perlnavigator = { perlPath = '/some/odd/location/my-perl' } } The contributes.configuration.properties section of perlnavigator 's package.json has all available configuration settings. All settings have a reasonable default, but, at minimum, you may want to point perlnavigator at your perltidy and perlcritic configurations. Setup require 'lspconfig' . perlnavigator . setup {} Default values { cmd = {}, filetypes = { 'perl' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"perlnavigator (perlnavigator)"},{"location":"configurations/perlnavigator/#perlnavigator-perlnavigator","text":"https://github.com/bscan/PerlNavigator A Perl language server By default, perlnavigator doesn't have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You have to install the language server manually. Clone the PerlNavigator repo, install based on the instructions , and point cmd to server.js inside the server/out directory: cmd = { 'node' , '<path_to_repo>/server/out/server.js' , '--stdio' } At minimum, you will need perl in your path. If you want to use a non-standard perl you will need to set your configuration like so: settings = { perlnavigator = { perlPath = '/some/odd/location/my-perl' } } The contributes.configuration.properties section of perlnavigator 's package.json has all available configuration settings. All settings have a reasonable default, but, at minimum, you may want to point perlnavigator at your perltidy and perlcritic configurations.","title":"perlnavigator (perlnavigator)"},{"location":"configurations/perlnavigator/#setup","text":"require 'lspconfig' . perlnavigator . setup {}","title":"Setup"},{"location":"configurations/perlnavigator/#default-values","text":"{ cmd = {}, filetypes = { 'perl' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/perlpls/","text":"perlpls (Perl) https://github.com/FractalBoy/perl-language-server https://metacpan.org/pod/PLS PLS , another language server for Perl. To use the language server, ensure that you have PLS installed and that it is in your path Setup require 'lspconfig' . perlpls . setup {} Default values { cmd = { 'pls' }, filetypes = { 'perl' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , settings = { perl = { perlcritic = { enabled = false , }, syntax = { enabled = true , }, }, }, single_file_support = true , }","title":"perlpls (Perl)"},{"location":"configurations/perlpls/#perlpls-perl","text":"https://github.com/FractalBoy/perl-language-server https://metacpan.org/pod/PLS PLS , another language server for Perl. To use the language server, ensure that you have PLS installed and that it is in your path","title":"perlpls (Perl)"},{"location":"configurations/perlpls/#setup","text":"require 'lspconfig' . perlpls . setup {}","title":"Setup"},{"location":"configurations/perlpls/#default-values","text":"{ cmd = { 'pls' }, filetypes = { 'perl' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , settings = { perl = { perlcritic = { enabled = false , }, syntax = { enabled = true , }, }, }, single_file_support = true , }","title":"Default values"},{"location":"configurations/phan/","text":"phan (phan) https://github.com/phan/phan Installation: https://github.com/phan/phan#getting-started Setup require 'lspconfig' . phan . setup {} Default values { cmd = { 'phan' , '-m' , 'json' , '--no-color' , '--no-progress-bar' , '-x' , '-u' , '-S' , '--language-server-on-stdin' , '--allow-polyfill-parser' , }, filetypes = { 'php' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/phan.lua:21 end , single_file_support = true , }","title":"phan (phan)"},{"location":"configurations/phan/#phan-phan","text":"https://github.com/phan/phan Installation: https://github.com/phan/phan#getting-started","title":"phan (phan)"},{"location":"configurations/phan/#setup","text":"require 'lspconfig' . phan . setup {}","title":"Setup"},{"location":"configurations/phan/#default-values","text":"{ cmd = { 'phan' , '-m' , 'json' , '--no-color' , '--no-progress-bar' , '-x' , '-u' , '-S' , '--language-server-on-stdin' , '--allow-polyfill-parser' , }, filetypes = { 'php' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/phan.lua:21 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/phpactor/","text":"phpactor (PHP) https://github.com/phpactor/phpactor Installation: https://phpactor.readthedocs.io/en/master/usage/standalone.html#global-installation Setup require 'lspconfig' . phpactor . setup {} Default values { cmd = { 'phpactor' , 'language-server' }, filetypes = { 'php' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/phpactor.lua:7 end , }","title":"phpactor (PHP)"},{"location":"configurations/phpactor/#phpactor-php","text":"https://github.com/phpactor/phpactor Installation: https://phpactor.readthedocs.io/en/master/usage/standalone.html#global-installation","title":"phpactor (PHP)"},{"location":"configurations/phpactor/#setup","text":"require 'lspconfig' . phpactor . setup {}","title":"Setup"},{"location":"configurations/phpactor/#default-values","text":"{ cmd = { 'phpactor' , 'language-server' }, filetypes = { 'php' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/phpactor.lua:7 end , }","title":"Default values"},{"location":"configurations/please/","text":"please (please) https://github.com/thought-machine/please High-performance extensible build system for reproducible multi-language builds. The plz binary will automatically install the LSP for you on first run Setup require 'lspconfig' . please . setup {} Default values { cmd = { 'plz' , 'tool' , 'lps' }, filetypes = { 'bzl' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"please (please)"},{"location":"configurations/please/#please-please","text":"https://github.com/thought-machine/please High-performance extensible build system for reproducible multi-language builds. The plz binary will automatically install the LSP for you on first run","title":"please (please)"},{"location":"configurations/please/#setup","text":"require 'lspconfig' . please . setup {}","title":"Setup"},{"location":"configurations/please/#default-values","text":"{ cmd = { 'plz' , 'tool' , 'lps' }, filetypes = { 'bzl' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/powershell_es/","text":"powershell_es (PowerShell) https://github.com/PowerShell/PowerShellEditorServices Language server for PowerShell. To install, download and extract PowerShellEditorServices.zip from the releases . To configure the language server, set the property bundle_path to the root of the extracted PowerShellEditorServices.zip. The default configuration doesn't set cmd unless bundle_path is specified. require 'lspconfig' . powershell_es . setup { bundle_path = 'c:/w/PowerShellEditorServices' , } By default the languageserver is started in pwsh (PowerShell Core). This can be changed by specifying shell . require 'lspconfig' . powershell_es . setup { bundle_path = 'c:/w/PowerShellEditorServices' , shell = 'powershell.exe' , } Note that the execution policy needs to be set to Unrestricted for the languageserver run under PowerShell If necessary, specific cmd can be defined instead of bundle_path . See PowerShellEditorServices to learn more. require 'lspconfig' . powershell_es . setup { cmd = { 'pwsh' , '-NoLogo' , '-NoProfile' , '-Command' , \"c:/PSES/Start-EditorServices.ps1 ...\" } } Setup require 'lspconfig' . powershell_es . setup {} Default values { filetypes = { 'ps1' }, on_new_config = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/powershell_es.lua:17 end , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , shell = 'pwsh' , single_file_support = true , }","title":"powershell_es (PowerShell)"},{"location":"configurations/powershell_es/#powershell_es-powershell","text":"https://github.com/PowerShell/PowerShellEditorServices Language server for PowerShell. To install, download and extract PowerShellEditorServices.zip from the releases . To configure the language server, set the property bundle_path to the root of the extracted PowerShellEditorServices.zip. The default configuration doesn't set cmd unless bundle_path is specified. require 'lspconfig' . powershell_es . setup { bundle_path = 'c:/w/PowerShellEditorServices' , } By default the languageserver is started in pwsh (PowerShell Core). This can be changed by specifying shell . require 'lspconfig' . powershell_es . setup { bundle_path = 'c:/w/PowerShellEditorServices' , shell = 'powershell.exe' , } Note that the execution policy needs to be set to Unrestricted for the languageserver run under PowerShell If necessary, specific cmd can be defined instead of bundle_path . See PowerShellEditorServices to learn more. require 'lspconfig' . powershell_es . setup { cmd = { 'pwsh' , '-NoLogo' , '-NoProfile' , '-Command' , \"c:/PSES/Start-EditorServices.ps1 ...\" } }","title":"powershell_es (PowerShell)"},{"location":"configurations/powershell_es/#setup","text":"require 'lspconfig' . powershell_es . setup {}","title":"Setup"},{"location":"configurations/powershell_es/#default-values","text":"{ filetypes = { 'ps1' }, on_new_config = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/powershell_es.lua:17 end , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , shell = 'pwsh' , single_file_support = true , }","title":"Default values"},{"location":"configurations/prismals/","text":"prismals (Prisma) Language Server for the Prisma JavaScript and TypeScript ORM @prisma/language-server can be installed via npm npm install -g @prisma/language-server Setup require 'lspconfig' . prismals . setup {} Default values { cmd = { 'prisma-language-server' , '--stdio' }, filetypes = { 'prisma' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = { prisma = { prismaFmtBinPath = '' , }, }, }","title":"prismals (Prisma)"},{"location":"configurations/prismals/#prismals-prisma","text":"Language Server for the Prisma JavaScript and TypeScript ORM @prisma/language-server can be installed via npm npm install -g @prisma/language-server","title":"prismals (Prisma)"},{"location":"configurations/prismals/#setup","text":"require 'lspconfig' . prismals . setup {}","title":"Setup"},{"location":"configurations/prismals/#default-values","text":"{ cmd = { 'prisma-language-server' , '--stdio' }, filetypes = { 'prisma' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = { prisma = { prismaFmtBinPath = '' , }, }, }","title":"Default values"},{"location":"configurations/prosemd_lsp/","text":"prosemd_lsp (prosemd_lsp) https://github.com/kitten/prosemd-lsp An experimental LSP for Markdown. Please see the manual installation instructions: https://github.com/kitten/prosemd-lsp#manual-installation Setup require 'lspconfig' . prosemd_lsp . setup {} Default values { cmd = { 'prosemd-lsp' , '--stdio' }, filetypes = { 'markdown' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"prosemd_lsp (prosemd_lsp)"},{"location":"configurations/prosemd_lsp/#prosemd_lsp-prosemd_lsp","text":"https://github.com/kitten/prosemd-lsp An experimental LSP for Markdown. Please see the manual installation instructions: https://github.com/kitten/prosemd-lsp#manual-installation","title":"prosemd_lsp (prosemd_lsp)"},{"location":"configurations/prosemd_lsp/#setup","text":"require 'lspconfig' . prosemd_lsp . setup {}","title":"Setup"},{"location":"configurations/prosemd_lsp/#default-values","text":"{ cmd = { 'prosemd-lsp' , '--stdio' }, filetypes = { 'markdown' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/psalm/","text":"psalm (PHP) https://github.com/vimeo/psalm Can be installed with composer. composer global require vimeo/psalm Setup require 'lspconfig' . psalm . setup {} Default values { cmd = { 'psalm-language-server' }, filetypes = { 'php' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"psalm (PHP)"},{"location":"configurations/psalm/#psalm-php","text":"https://github.com/vimeo/psalm Can be installed with composer. composer global require vimeo/psalm","title":"psalm (PHP)"},{"location":"configurations/psalm/#setup","text":"require 'lspconfig' . psalm . setup {}","title":"Setup"},{"location":"configurations/psalm/#default-values","text":"{ cmd = { 'psalm-language-server' }, filetypes = { 'php' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/puppet/","text":"puppet (Puppet) LSP server for Puppet. Installation: Clone the editor-services repository: https://github.com/puppetlabs/puppet-editor-services Navigate into that directory and run: bundle install Install the 'puppet-lint' gem: gem install puppet-lint Add that repository to $PATH. Ensure you can run puppet-languageserver from outside the editor-services directory. Setup require 'lspconfig' . puppet . setup {} Default values { cmd = { 'puppet-languageserver' , '--stdio' }, filetypes = { 'puppet' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"puppet (Puppet)"},{"location":"configurations/puppet/#puppet-puppet","text":"LSP server for Puppet. Installation: Clone the editor-services repository: https://github.com/puppetlabs/puppet-editor-services Navigate into that directory and run: bundle install Install the 'puppet-lint' gem: gem install puppet-lint Add that repository to $PATH. Ensure you can run puppet-languageserver from outside the editor-services directory.","title":"puppet (Puppet)"},{"location":"configurations/puppet/#setup","text":"require 'lspconfig' . puppet . setup {}","title":"Setup"},{"location":"configurations/puppet/#default-values","text":"{ cmd = { 'puppet-languageserver' , '--stdio' }, filetypes = { 'puppet' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/purescriptls/","text":"purescriptls (PureScript) https://github.com/nwolverson/purescript-language-server The purescript-language-server can be added to your project and $PATH via JavaScript package manager such as npm, pnpm, Yarn, et al. Nix under the nodePackages and nodePackages_latest package sets Setup require 'lspconfig' . purescriptls . setup {} Default values { cmd = { 'purescript-language-server' , '--stdio' }, filetypes = { 'purescript' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"purescriptls (PureScript)"},{"location":"configurations/purescriptls/#purescriptls-purescript","text":"https://github.com/nwolverson/purescript-language-server The purescript-language-server can be added to your project and $PATH via JavaScript package manager such as npm, pnpm, Yarn, et al. Nix under the nodePackages and nodePackages_latest package sets","title":"purescriptls (PureScript)"},{"location":"configurations/purescriptls/#setup","text":"require 'lspconfig' . purescriptls . setup {}","title":"Setup"},{"location":"configurations/purescriptls/#default-values","text":"{ cmd = { 'purescript-language-server' , '--stdio' }, filetypes = { 'purescript' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/pylsp/","text":"pylsp (Python) https://github.com/python-lsp/python-lsp-server A Python 3.6+ implementation of the Language Server Protocol. See the project's README for installation instructions. Configuration options are documented here . In order to configure an option, it must be translated to a nested Lua table and included in the settings aregument to the setup{} function. For example, in order to set the pylsp.plugins.pycodestyle.ignore option: require 'lspconfig' . pylsp . setup { settings = { pylsp = { plugins = { pycodestyle = { ignore = { 'W391' }, maxLineLength = 100 } } } } } Note: This is a community fork of pyls . Setup require 'lspconfig' . pylsp . setup {} Default values { cmd = { 'pylsp' }, filetypes = { 'python' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/pylsp.lua:7 end , single_file_support = true , }","title":"pylsp (Python)"},{"location":"configurations/pylsp/#pylsp-python","text":"https://github.com/python-lsp/python-lsp-server A Python 3.6+ implementation of the Language Server Protocol. See the project's README for installation instructions. Configuration options are documented here . In order to configure an option, it must be translated to a nested Lua table and included in the settings aregument to the setup{} function. For example, in order to set the pylsp.plugins.pycodestyle.ignore option: require 'lspconfig' . pylsp . setup { settings = { pylsp = { plugins = { pycodestyle = { ignore = { 'W391' }, maxLineLength = 100 } } } } } Note: This is a community fork of pyls .","title":"pylsp (Python)"},{"location":"configurations/pylsp/#setup","text":"require 'lspconfig' . pylsp . setup {}","title":"Setup"},{"location":"configurations/pylsp/#default-values","text":"{ cmd = { 'pylsp' }, filetypes = { 'python' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/pylsp.lua:7 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/pyre/","text":"pyre (Python) https://pyre-check.org/ pyre a static type checker for Python 3. pyre offers an extremely limited featureset. It currently only supports diagnostics, which are triggered on save. Do not report issues for missing features in pyre to lspconfig . Setup require 'lspconfig' . pyre . setup {} Default values { cmd = { 'pyre' , 'persistent' }, filetypes = { 'python' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"pyre (Python)"},{"location":"configurations/pyre/#pyre-python","text":"https://pyre-check.org/ pyre a static type checker for Python 3. pyre offers an extremely limited featureset. It currently only supports diagnostics, which are triggered on save. Do not report issues for missing features in pyre to lspconfig .","title":"pyre (Python)"},{"location":"configurations/pyre/#setup","text":"require 'lspconfig' . pyre . setup {}","title":"Setup"},{"location":"configurations/pyre/#default-values","text":"{ cmd = { 'pyre' , 'persistent' }, filetypes = { 'python' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/pyright/","text":"pyright (Python) https://github.com/microsoft/pyright pyright , a static type checker and language server for python Setup require 'lspconfig' . pyright . setup {} Default values { cmd = { 'pyright-langserver' , '--stdio' }, filetypes = { 'python' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = { python = { analysis = { autoSearchPaths = true , diagnosticMode = 'workspace' , useLibraryCodeForTypes = true , }, }, }, single_file_support = true , } Commands :PyrightOrganizeImports : Organize Imports","title":"pyright (Python)"},{"location":"configurations/pyright/#pyright-python","text":"https://github.com/microsoft/pyright pyright , a static type checker and language server for python","title":"pyright (Python)"},{"location":"configurations/pyright/#setup","text":"require 'lspconfig' . pyright . setup {}","title":"Setup"},{"location":"configurations/pyright/#default-values","text":"{ cmd = { 'pyright-langserver' , '--stdio' }, filetypes = { 'python' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = { python = { analysis = { autoSearchPaths = true , diagnosticMode = 'workspace' , useLibraryCodeForTypes = true , }, }, }, single_file_support = true , }","title":"Default values"},{"location":"configurations/pyright/#commands","text":":PyrightOrganizeImports : Organize Imports","title":"Commands"},{"location":"configurations/qml_lsp/","text":"qml_lsp (qml_lsp) https://invent.kde.org/sdk/qml-lsp LSP implementation for QML (autocompletion, live linting, etc. in editors) Setup require 'lspconfig' . qml_lsp . setup {} Default values { cmd = { 'qml-lsp' }, filetypes = { 'qml' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"qml_lsp (qml_lsp)"},{"location":"configurations/qml_lsp/#qml_lsp-qml_lsp","text":"https://invent.kde.org/sdk/qml-lsp LSP implementation for QML (autocompletion, live linting, etc. in editors)","title":"qml_lsp (qml_lsp)"},{"location":"configurations/qml_lsp/#setup","text":"require 'lspconfig' . qml_lsp . setup {}","title":"Setup"},{"location":"configurations/qml_lsp/#default-values","text":"{ cmd = { 'qml-lsp' }, filetypes = { 'qml' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/quick_lint_js/","text":"quick_lint_js (JavaScript) https://quick-lint-js.com/ quick-lint-js finds bugs in JavaScript programs. See installation instructions Setup require 'lspconfig' . quick_lint_js . setup {} Default values { cmd = { 'quick-lint-js' , '--lsp-server' }, filetypes = { 'javascript' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"quick_lint_js (JavaScript)"},{"location":"configurations/quick_lint_js/#quick_lint_js-javascript","text":"https://quick-lint-js.com/ quick-lint-js finds bugs in JavaScript programs. See installation instructions","title":"quick_lint_js (JavaScript)"},{"location":"configurations/quick_lint_js/#setup","text":"require 'lspconfig' . quick_lint_js . setup {}","title":"Setup"},{"location":"configurations/quick_lint_js/#default-values","text":"{ cmd = { 'quick-lint-js' , '--lsp-server' }, filetypes = { 'javascript' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/r_language_server/","text":"r_language_server (R) languageserver is an implementation of the Microsoft's Language Server Protocol for the R language. It is released on CRAN and can be easily installed by install.packages ( \"languageserver\" ) Setup require 'lspconfig' . r_language_server . setup {} Default values { cmd = { 'R' , '--slave' , '-e' , 'languageserver::run()' }, filetypes = { 'r' , 'rmd' }, log_level = 2 , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/r_language_server.lua:7 end , }","title":"r_language_server (R)"},{"location":"configurations/r_language_server/#r_language_server-r","text":"languageserver is an implementation of the Microsoft's Language Server Protocol for the R language. It is released on CRAN and can be easily installed by install.packages ( \"languageserver\" )","title":"r_language_server (R)"},{"location":"configurations/r_language_server/#setup","text":"require 'lspconfig' . r_language_server . setup {}","title":"Setup"},{"location":"configurations/r_language_server/#default-values","text":"{ cmd = { 'R' , '--slave' , '-e' , 'languageserver::run()' }, filetypes = { 'r' , 'rmd' }, log_level = 2 , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/r_language_server.lua:7 end , }","title":"Default values"},{"location":"configurations/racket_langserver/","text":"racket_langserver (Racket) https://github.com/jeapostrophe/racket-langserver The Racket language server. This project seeks to use DrRacket 's public API to provide functionality that mimics DrRacket's code tools as closely as possible. Install via raco : raco pkg install racket-langserver Setup require 'lspconfig' . racket_langserver . setup {} Default values { cmd = { 'racket' , '--lib' , 'racket-langserver' }, filetypes = { 'racket' , 'scheme' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"racket_langserver (Racket)"},{"location":"configurations/racket_langserver/#racket_langserver-racket","text":"https://github.com/jeapostrophe/racket-langserver The Racket language server. This project seeks to use DrRacket 's public API to provide functionality that mimics DrRacket's code tools as closely as possible. Install via raco : raco pkg install racket-langserver","title":"racket_langserver (Racket)"},{"location":"configurations/racket_langserver/#setup","text":"require 'lspconfig' . racket_langserver . setup {}","title":"Setup"},{"location":"configurations/racket_langserver/#default-values","text":"{ cmd = { 'racket' , '--lib' , 'racket-langserver' }, filetypes = { 'racket' , 'scheme' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/reason_ls/","text":"reason_ls (reason_ls) Reason language server You can install reason language server from reason-language-server repository. Setup require 'lspconfig' . reason_ls . setup {} Default values { cmd = { 'reason-language-server' }, filetypes = { 'reason' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"reason_ls (reason_ls)"},{"location":"configurations/reason_ls/#reason_ls-reason_ls","text":"Reason language server You can install reason language server from reason-language-server repository.","title":"reason_ls (reason_ls)"},{"location":"configurations/reason_ls/#setup","text":"require 'lspconfig' . reason_ls . setup {}","title":"Setup"},{"location":"configurations/reason_ls/#default-values","text":"{ cmd = { 'reason-language-server' }, filetypes = { 'reason' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/remark_ls/","text":"remark_ls (Markdown) https://github.com/remarkjs/remark-language-server remark-language-server can be installed via npm : npm install -g remark-language-server remark-language-server uses the same configuration files as remark-cli . This uses a plugin based system. Each plugin needs to be installed locally using npm or yarn . For example, given the following .remarkrc.json : { \"presets\" : [ \"remark-preset-lint-recommended\" ] } remark-preset-lint-recommended needs to be installed in the local project: npm install remark-preset-lint-recommended Setup require 'lspconfig' . remark_ls . setup {} Default values { cmd = { 'remark-language-server' , '--stdio' }, filetypes = { 'markdown' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"remark_ls (Markdown)"},{"location":"configurations/remark_ls/#remark_ls-markdown","text":"https://github.com/remarkjs/remark-language-server remark-language-server can be installed via npm : npm install -g remark-language-server remark-language-server uses the same configuration files as remark-cli . This uses a plugin based system. Each plugin needs to be installed locally using npm or yarn . For example, given the following .remarkrc.json : { \"presets\" : [ \"remark-preset-lint-recommended\" ] } remark-preset-lint-recommended needs to be installed in the local project: npm install remark-preset-lint-recommended","title":"remark_ls (Markdown)"},{"location":"configurations/remark_ls/#setup","text":"require 'lspconfig' . remark_ls . setup {}","title":"Setup"},{"location":"configurations/remark_ls/#default-values","text":"{ cmd = { 'remark-language-server' , '--stdio' }, filetypes = { 'markdown' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/rescriptls/","text":"rescriptls (ReScript) https://github.com/rescript-lang/rescript-vscode ReScript language server By default, rescriptls doesn't have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You have to install the language server manually. You can use the bundled language server inside the vim-rescript repo. Clone the vim-rescript repo and point cmd to server.js inside server/out directory: cmd = { 'node' , '<path_to_repo>/server/out/server.js' , '--stdio' } If you have vim-rescript installed you can also use that installation. for example if you're using packer.nvim you can set cmd to something like this: cmd = { 'node' , '/home/username/.local/share/nvim/site/pack/packer/start/vim-rescript/server/out/server.js' , '--stdio' } Another option is to use vscode extension release . Take a look at here for instructions. Setup require 'lspconfig' . rescriptls . setup {} Default values { cmd = {}, filetypes = { 'rescript' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = {}, }","title":"rescriptls (ReScript)"},{"location":"configurations/rescriptls/#rescriptls-rescript","text":"https://github.com/rescript-lang/rescript-vscode ReScript language server By default, rescriptls doesn't have a cmd set. This is because nvim-lspconfig does not make assumptions about your path. You have to install the language server manually. You can use the bundled language server inside the vim-rescript repo. Clone the vim-rescript repo and point cmd to server.js inside server/out directory: cmd = { 'node' , '<path_to_repo>/server/out/server.js' , '--stdio' } If you have vim-rescript installed you can also use that installation. for example if you're using packer.nvim you can set cmd to something like this: cmd = { 'node' , '/home/username/.local/share/nvim/site/pack/packer/start/vim-rescript/server/out/server.js' , '--stdio' } Another option is to use vscode extension release . Take a look at here for instructions.","title":"rescriptls (ReScript)"},{"location":"configurations/rescriptls/#setup","text":"require 'lspconfig' . rescriptls . setup {}","title":"Setup"},{"location":"configurations/rescriptls/#default-values","text":"{ cmd = {}, filetypes = { 'rescript' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = {}, }","title":"Default values"},{"location":"configurations/rls/","text":"rls (Rust) https://github.com/rust-lang/rls rls, a language server for Rust See https://github.com/rust-lang/rls#setup to setup rls itself. See https://github.com/rust-lang/rls#configuration for rls-specific settings. All settings listed on the rls configuration section of the readme must be set under settings.rust as follows: nvim_lsp . rls . setup { settings = { rust = { unstable_features = true , build_on_save = false , all_features = true , }, }, } If you want to use rls for a particular build, eg nightly, set cmd as follows: cmd = { \"rustup\" , \"run\" , \"nightly\" , \"rls\" } Setup require 'lspconfig' . rls . setup {} Default values { cmd = { 'rls' }, filetypes = { 'rust' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"rls (Rust)"},{"location":"configurations/rls/#rls-rust","text":"https://github.com/rust-lang/rls rls, a language server for Rust See https://github.com/rust-lang/rls#setup to setup rls itself. See https://github.com/rust-lang/rls#configuration for rls-specific settings. All settings listed on the rls configuration section of the readme must be set under settings.rust as follows: nvim_lsp . rls . setup { settings = { rust = { unstable_features = true , build_on_save = false , all_features = true , }, }, } If you want to use rls for a particular build, eg nightly, set cmd as follows: cmd = { \"rustup\" , \"run\" , \"nightly\" , \"rls\" }","title":"rls (Rust)"},{"location":"configurations/rls/#setup","text":"require 'lspconfig' . rls . setup {}","title":"Setup"},{"location":"configurations/rls/#default-values","text":"{ cmd = { 'rls' }, filetypes = { 'rust' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/rnix/","text":"rnix (Nix) https://github.com/nix-community/rnix-lsp A language server for Nix providing basic completion and formatting via nixpkgs-fmt. To install manually, run cargo install rnix-lsp . If you are using nix, rnix-lsp is in nixpkgs. This server accepts configuration via the settings key. Setup require 'lspconfig' . rnix . setup {} Default values { cmd = { 'rnix-lsp' }, filetypes = { 'nix' }, init_options = {}, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/rnix.lua:7 end , settings = {}, }","title":"rnix (Nix)"},{"location":"configurations/rnix/#rnix-nix","text":"https://github.com/nix-community/rnix-lsp A language server for Nix providing basic completion and formatting via nixpkgs-fmt. To install manually, run cargo install rnix-lsp . If you are using nix, rnix-lsp is in nixpkgs. This server accepts configuration via the settings key.","title":"rnix (Nix)"},{"location":"configurations/rnix/#setup","text":"require 'lspconfig' . rnix . setup {}","title":"Setup"},{"location":"configurations/rnix/#default-values","text":"{ cmd = { 'rnix-lsp' }, filetypes = { 'nix' }, init_options = {}, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/rnix.lua:7 end , settings = {}, }","title":"Default values"},{"location":"configurations/robotframework_ls/","text":"robotframework_ls (Robot) https://github.com/robocorp/robotframework-lsp Language Server Protocol implementation for Robot Framework. Setup require 'lspconfig' . robotframework_ls . setup {} Default values { cmd = { 'robotframework_ls' }, filetypes = { 'robot' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/robotframework_ls.lua:7 end , }","title":"robotframework_ls (Robot)"},{"location":"configurations/robotframework_ls/#robotframework_ls-robot","text":"https://github.com/robocorp/robotframework-lsp Language Server Protocol implementation for Robot Framework.","title":"robotframework_ls (Robot)"},{"location":"configurations/robotframework_ls/#setup","text":"require 'lspconfig' . robotframework_ls . setup {}","title":"Setup"},{"location":"configurations/robotframework_ls/#default-values","text":"{ cmd = { 'robotframework_ls' }, filetypes = { 'robot' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/robotframework_ls.lua:7 end , }","title":"Default values"},{"location":"configurations/rome/","text":"rome (JavaScript) https://rome.tools Language server for the Rome Frontend Toolchain. npm install [ -g ] rome Setup require 'lspconfig' . rome . setup {} Default values { cmd = { 'rome' , 'lsp' }, filetypes = { 'javascript' , 'javascriptreact' , 'json' , 'typescript' , 'typescript.tsx' , 'typescriptreact' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/rome.lua:21 end , single_file_support = true , }","title":"rome (JavaScript)"},{"location":"configurations/rome/#rome-javascript","text":"https://rome.tools Language server for the Rome Frontend Toolchain. npm install [ -g ] rome","title":"rome (JavaScript)"},{"location":"configurations/rome/#setup","text":"require 'lspconfig' . rome . setup {}","title":"Setup"},{"location":"configurations/rome/#default-values","text":"{ cmd = { 'rome' , 'lsp' }, filetypes = { 'javascript' , 'javascriptreact' , 'json' , 'typescript' , 'typescript.tsx' , 'typescriptreact' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/rome.lua:21 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/rust_analyzer/","text":"rust_analyzer (Rust) https://github.com/rust-analyzer/rust-analyzer rust-analyzer (aka rls 2.0), a language server for Rust See docs for extra settings. Setup require 'lspconfig' . rust_analyzer . setup {} Default values { cmd = { 'rust-analyzer' }, filetypes = { 'rust' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/rust_analyzer.lua:17 end , settings = { [ 'rust-analyzer' ] = {}, }, } Commands :CargoReload : Reload current cargo workspace","title":"rust_analyzer (Rust)"},{"location":"configurations/rust_analyzer/#rust_analyzer-rust","text":"https://github.com/rust-analyzer/rust-analyzer rust-analyzer (aka rls 2.0), a language server for Rust See docs for extra settings.","title":"rust_analyzer (Rust)"},{"location":"configurations/rust_analyzer/#setup","text":"require 'lspconfig' . rust_analyzer . setup {}","title":"Setup"},{"location":"configurations/rust_analyzer/#default-values","text":"{ cmd = { 'rust-analyzer' }, filetypes = { 'rust' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/rust_analyzer.lua:17 end , settings = { [ 'rust-analyzer' ] = {}, }, }","title":"Default values"},{"location":"configurations/rust_analyzer/#commands","text":":CargoReload : Reload current cargo workspace","title":"Commands"},{"location":"configurations/salt_ls/","text":"salt_ls (salt_ls) Language server for Salt configuration files. https://github.com/dcermak/salt-lsp The language server can be installed with pip : pip install salt-lsp Setup require 'lspconfig' . salt_ls . setup {} Default values { cmd = { 'salt_lsp_server' }, filetypes = { 'sls' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"salt_ls (salt_ls)"},{"location":"configurations/salt_ls/#salt_ls-salt_ls","text":"Language server for Salt configuration files. https://github.com/dcermak/salt-lsp The language server can be installed with pip : pip install salt-lsp","title":"salt_ls (salt_ls)"},{"location":"configurations/salt_ls/#setup","text":"require 'lspconfig' . salt_ls . setup {}","title":"Setup"},{"location":"configurations/salt_ls/#default-values","text":"{ cmd = { 'salt_lsp_server' }, filetypes = { 'sls' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/scry/","text":"scry (Crystal) https://github.com/crystal-lang-tools/scry Crystal language server. Setup require 'lspconfig' . scry . setup {} Default values { cmd = { 'scry' }, filetypes = { 'crystal' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/scry.lua:7 end , single_file_support = true , }","title":"scry (Crystal)"},{"location":"configurations/scry/#scry-crystal","text":"https://github.com/crystal-lang-tools/scry Crystal language server.","title":"scry (Crystal)"},{"location":"configurations/scry/#setup","text":"require 'lspconfig' . scry . setup {}","title":"Setup"},{"location":"configurations/scry/#default-values","text":"{ cmd = { 'scry' }, filetypes = { 'crystal' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/scry.lua:7 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/serve_d/","text":"serve_d (D) https://github.com/Pure-D/serve-d `Microsoft language server protocol implementation for D using workspace-d.` Download a binary from https://github.com/Pure-D/serve-d/releases and put it in your $PATH. Setup require 'lspconfig' . serve_d . setup {} Default values { cmd = { 'serve-d' }, filetypes = { 'd' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"serve_d (D)"},{"location":"configurations/serve_d/#serve_d-d","text":"https://github.com/Pure-D/serve-d `Microsoft language server protocol implementation for D using workspace-d.` Download a binary from https://github.com/Pure-D/serve-d/releases and put it in your $PATH.","title":"serve_d (D)"},{"location":"configurations/serve_d/#setup","text":"require 'lspconfig' . serve_d . setup {}","title":"Setup"},{"location":"configurations/serve_d/#default-values","text":"{ cmd = { 'serve-d' }, filetypes = { 'd' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/sixtyfps/","text":"sixtyfps (SixtyFPS) https://github.com/sixtyfpsui/sixtyfps SixtyFPS 's language server You can build and install sixtyfps-lsp binary with cargo : cargo install sixtyfps-lsp Vim does not have built-in syntax for the sixtyfps filetype currently. This can be added via an autocmd: vim . cmd [[ autocmd BufRead,BufNewFile *.60 set filetype=sixtyfps ]] or by installing a filetype plugin such as https://github.com/RustemB/sixtyfps-vim Setup require 'lspconfig' . sixtyfps . setup {} Default values { cmd = { 'sixtyfps-lsp' }, filetypes = { 'sixtyfps' }, single_file_support = true }","title":"sixtyfps (SixtyFPS)"},{"location":"configurations/sixtyfps/#sixtyfps-sixtyfps","text":"https://github.com/sixtyfpsui/sixtyfps SixtyFPS 's language server You can build and install sixtyfps-lsp binary with cargo : cargo install sixtyfps-lsp Vim does not have built-in syntax for the sixtyfps filetype currently. This can be added via an autocmd: vim . cmd [[ autocmd BufRead,BufNewFile *.60 set filetype=sixtyfps ]] or by installing a filetype plugin such as https://github.com/RustemB/sixtyfps-vim","title":"sixtyfps (SixtyFPS)"},{"location":"configurations/sixtyfps/#setup","text":"require 'lspconfig' . sixtyfps . setup {}","title":"Setup"},{"location":"configurations/sixtyfps/#default-values","text":"{ cmd = { 'sixtyfps-lsp' }, filetypes = { 'sixtyfps' }, single_file_support = true }","title":"Default values"},{"location":"configurations/slint_lsp/","text":"slint_lsp (slint_lsp) https://github.com/slint-ui/slint Slint 's language server You can build and install slint-lsp binary with cargo : cargo install slint-lsp Vim does not have built-in syntax for the slint filetype at this time. This can be added via an autocmd: vim . cmd [[ autocmd BufRead,BufNewFile *.slint set filetype=slint ]] Setup require 'lspconfig' . slint_lsp . setup {} Default values { cmd = { 'slint-lsp' }, filetypes = { 'slint' }, single_file_support = true }","title":"slint_lsp (slint_lsp)"},{"location":"configurations/slint_lsp/#slint_lsp-slint_lsp","text":"https://github.com/slint-ui/slint Slint 's language server You can build and install slint-lsp binary with cargo : cargo install slint-lsp Vim does not have built-in syntax for the slint filetype at this time. This can be added via an autocmd: vim . cmd [[ autocmd BufRead,BufNewFile *.slint set filetype=slint ]]","title":"slint_lsp (slint_lsp)"},{"location":"configurations/slint_lsp/#setup","text":"require 'lspconfig' . slint_lsp . setup {}","title":"Setup"},{"location":"configurations/slint_lsp/#default-values","text":"{ cmd = { 'slint-lsp' }, filetypes = { 'slint' }, single_file_support = true }","title":"Default values"},{"location":"configurations/solang/","text":"solang (Solidity) A language server for Solidity See the documentation for installation instructions. The language server only provides the following capabilities: * Syntax highlighting * Diagnostics * Hover There is currently no support for completion, goto definition, references, or other functionality. Setup require 'lspconfig' . solang . setup {} Default values { cmd = { 'solang' , '--language-server' , '--target' , 'ewasm' }, filetypes = { 'solidity' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"solang (Solidity)"},{"location":"configurations/solang/#solang-solidity","text":"A language server for Solidity See the documentation for installation instructions. The language server only provides the following capabilities: * Syntax highlighting * Diagnostics * Hover There is currently no support for completion, goto definition, references, or other functionality.","title":"solang (Solidity)"},{"location":"configurations/solang/#setup","text":"require 'lspconfig' . solang . setup {}","title":"Setup"},{"location":"configurations/solang/#default-values","text":"{ cmd = { 'solang' , '--language-server' , '--target' , 'ewasm' }, filetypes = { 'solidity' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"Default values"},{"location":"configurations/solargraph/","text":"solargraph (Ruby) https://solargraph.org/ solargraph, a language server for Ruby You can install solargraph via gem install. gem install --user-install solargraph Setup require 'lspconfig' . solargraph . setup {} Default values { cmd = { 'solargraph' , 'stdio' }, filetypes = { 'ruby' }, init_options = { formatting = true , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = { solargraph = { diagnostics = true , }, }, }","title":"solargraph (Ruby)"},{"location":"configurations/solargraph/#solargraph-ruby","text":"https://solargraph.org/ solargraph, a language server for Ruby You can install solargraph via gem install. gem install --user-install solargraph","title":"solargraph (Ruby)"},{"location":"configurations/solargraph/#setup","text":"require 'lspconfig' . solargraph . setup {}","title":"Setup"},{"location":"configurations/solargraph/#default-values","text":"{ cmd = { 'solargraph' , 'stdio' }, filetypes = { 'ruby' }, init_options = { formatting = true , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = { solargraph = { diagnostics = true , }, }, }","title":"Default values"},{"location":"configurations/solc/","text":"solc (Solidity) https://docs.soliditylang.org/en/latest/installing-solidity.html solc is the native language server for the Solidity language. Setup require 'lspconfig' . solc . setup {} Default values { cmd = { 'solc' , '--lsp' }, filetypes = { 'solidity' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"solc (Solidity)"},{"location":"configurations/solc/#solc-solidity","text":"https://docs.soliditylang.org/en/latest/installing-solidity.html solc is the native language server for the Solidity language.","title":"solc (Solidity)"},{"location":"configurations/solc/#setup","text":"require 'lspconfig' . solc . setup {}","title":"Setup"},{"location":"configurations/solc/#default-values","text":"{ cmd = { 'solc' , '--lsp' }, filetypes = { 'solidity' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/solidity_ls/","text":"solidity_ls (Solidity) npm install -g solidity-language-server solidity-language-server is a language server for the solidity language ported from the vscode solidity extension Setup require 'lspconfig' . solidity_ls . setup {} Default values { cmd = { 'solidity-language-server' , '--stdio' }, filetypes = { 'solidity' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"solidity_ls (Solidity)"},{"location":"configurations/solidity_ls/#solidity_ls-solidity","text":"npm install -g solidity-language-server solidity-language-server is a language server for the solidity language ported from the vscode solidity extension","title":"solidity_ls (Solidity)"},{"location":"configurations/solidity_ls/#setup","text":"require 'lspconfig' . solidity_ls . setup {}","title":"Setup"},{"location":"configurations/solidity_ls/#default-values","text":"{ cmd = { 'solidity-language-server' , '--stdio' }, filetypes = { 'solidity' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/sorbet/","text":"sorbet (Ruby) https://sorbet.org Sorbet is a fast, powerful type checker designed for Ruby. You can install Sorbet via gem install. You might also be interested in how to set Sorbet up for new projects: https://sorbet.org/docs/adopting . gem install sorbet Setup require 'lspconfig' . sorbet . setup {} Default values { cmd = { 'srb' , 'tc' , '--lsp' }, filetypes = { 'ruby' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"sorbet (Ruby)"},{"location":"configurations/sorbet/#sorbet-ruby","text":"https://sorbet.org Sorbet is a fast, powerful type checker designed for Ruby. You can install Sorbet via gem install. You might also be interested in how to set Sorbet up for new projects: https://sorbet.org/docs/adopting . gem install sorbet","title":"sorbet (Ruby)"},{"location":"configurations/sorbet/#setup","text":"require 'lspconfig' . sorbet . setup {}","title":"Setup"},{"location":"configurations/sorbet/#default-values","text":"{ cmd = { 'srb' , 'tc' , '--lsp' }, filetypes = { 'ruby' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/sourcekit/","text":"sourcekit (Swift/C/C++/ObjC) https://github.com/apple/sourcekit-lsp Language server for Swift and C/C++/Objective-C. Setup require 'lspconfig' . sourcekit . setup {} Default values { cmd = { 'sourcekit-lsp' }, filetypes = { 'swift' , 'c' , 'cpp' , 'objective-c' , 'objective-cpp' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"sourcekit (Swift/C/C++/ObjC)"},{"location":"configurations/sourcekit/#sourcekit-swiftccobjc","text":"https://github.com/apple/sourcekit-lsp Language server for Swift and C/C++/Objective-C.","title":"sourcekit (Swift/C/C++/ObjC)"},{"location":"configurations/sourcekit/#setup","text":"require 'lspconfig' . sourcekit . setup {}","title":"Setup"},{"location":"configurations/sourcekit/#default-values","text":"{ cmd = { 'sourcekit-lsp' }, filetypes = { 'swift' , 'c' , 'cpp' , 'objective-c' , 'objective-cpp' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/sourcery/","text":"sourcery (sourcery) https://github.com/sourcery-ai/sourcery Refactor Python instantly using the power of AI. It requires the initializationOptions param to be populated as shown below and will respond with the list of ServerCapabilities that it supports. init_options = { --- The Sourcery token for authenticating the user. --- This is retrieved from the Sourcery website and must be --- provided by each user. The extension must provide a --- configuration option for the user to provide this value. token = --- The extension's name and version as defined by the extension. extension_version = 'vim.lsp' --- The editor's name and version as defined by the editor. editor_version = 'vim' } Setup require 'lspconfig' . sourcery . setup {} Default values { cmd = { 'sourcery' , 'lsp' }, filetypes = { 'python' }, init_options = { editor_version = 'vim' , extension_version = 'vim.lsp' , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/sourcery.lua:21 end , single_file_support = true , }","title":"sourcery (sourcery)"},{"location":"configurations/sourcery/#sourcery-sourcery","text":"https://github.com/sourcery-ai/sourcery Refactor Python instantly using the power of AI. It requires the initializationOptions param to be populated as shown below and will respond with the list of ServerCapabilities that it supports. init_options = { --- The Sourcery token for authenticating the user. --- This is retrieved from the Sourcery website and must be --- provided by each user. The extension must provide a --- configuration option for the user to provide this value. token = --- The extension's name and version as defined by the extension. extension_version = 'vim.lsp' --- The editor's name and version as defined by the editor. editor_version = 'vim' }","title":"sourcery (sourcery)"},{"location":"configurations/sourcery/#setup","text":"require 'lspconfig' . sourcery . setup {}","title":"Setup"},{"location":"configurations/sourcery/#default-values","text":"{ cmd = { 'sourcery' , 'lsp' }, filetypes = { 'python' }, init_options = { editor_version = 'vim' , extension_version = 'vim.lsp' , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/sourcery.lua:21 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/spectral/","text":"spectral (YAML) https://github.com/luizcorreia/spectral-language-server A flexible JSON/YAML linter for creating automated style guides, with baked in support for OpenAPI v2 & v3. spectral-language-server can be installed via npm : npm i -g spectral-language-server See vscode-spectral for configuration options. Setup require 'lspconfig' . spectral . setup {} Default values { cmd = { 'spectral-language-server' , '--stdio' }, filetypes = { 'yaml' , 'json' , 'yml' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = { enable = true , run = 'onType' , validateLanguages = { 'yaml' , 'json' , 'yml' }, }, single_file_support = true , }","title":"spectral (YAML)"},{"location":"configurations/spectral/#spectral-yaml","text":"https://github.com/luizcorreia/spectral-language-server A flexible JSON/YAML linter for creating automated style guides, with baked in support for OpenAPI v2 & v3. spectral-language-server can be installed via npm : npm i -g spectral-language-server See vscode-spectral for configuration options.","title":"spectral (YAML)"},{"location":"configurations/spectral/#setup","text":"require 'lspconfig' . spectral . setup {}","title":"Setup"},{"location":"configurations/spectral/#default-values","text":"{ cmd = { 'spectral-language-server' , '--stdio' }, filetypes = { 'yaml' , 'json' , 'yml' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = { enable = true , run = 'onType' , validateLanguages = { 'yaml' , 'json' , 'yml' }, }, single_file_support = true , }","title":"Default values"},{"location":"configurations/sqlls/","text":"sqlls (SQL) https://github.com/joe-re/sql-language-server This LSP can be installed via npm . Find further instructions on manual installation of the sql-language-server at joe-re/sql-language-server . Setup require 'lspconfig' . sqlls . setup {} Default values { cmd = { 'sql-language-server' , 'up' , '--method' , 'stdio' }, filetypes = { 'sql' , 'mysql' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = {}, }","title":"sqlls (SQL)"},{"location":"configurations/sqlls/#sqlls-sql","text":"https://github.com/joe-re/sql-language-server This LSP can be installed via npm . Find further instructions on manual installation of the sql-language-server at joe-re/sql-language-server .","title":"sqlls (SQL)"},{"location":"configurations/sqlls/#setup","text":"require 'lspconfig' . sqlls . setup {}","title":"Setup"},{"location":"configurations/sqlls/#default-values","text":"{ cmd = { 'sql-language-server' , 'up' , '--method' , 'stdio' }, filetypes = { 'sql' , 'mysql' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = {}, }","title":"Default values"},{"location":"configurations/sqls/","text":"sqls (SQL) https://github.com/lighttiger2505/sqls require 'lspconfig' . sqls . setup { cmd = { \"path/to/command\" , \"-config\" , \"path/to/config.yml\" }; ... } Sqls can be installed via go get github.com/lighttiger2505/sqls . Instructions for compiling Sqls from the source can be found at lighttiger2505/sqls . Setup require 'lspconfig' . sqls . setup {} Default values { cmd = { 'sqls' }, filetypes = { 'sql' , 'mysql' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = {}, single_file_support = true , }","title":"sqls (SQL)"},{"location":"configurations/sqls/#sqls-sql","text":"https://github.com/lighttiger2505/sqls require 'lspconfig' . sqls . setup { cmd = { \"path/to/command\" , \"-config\" , \"path/to/config.yml\" }; ... } Sqls can be installed via go get github.com/lighttiger2505/sqls . Instructions for compiling Sqls from the source can be found at lighttiger2505/sqls .","title":"sqls (SQL)"},{"location":"configurations/sqls/#setup","text":"require 'lspconfig' . sqls . setup {}","title":"Setup"},{"location":"configurations/sqls/#default-values","text":"{ cmd = { 'sqls' }, filetypes = { 'sql' , 'mysql' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = {}, single_file_support = true , }","title":"Default values"},{"location":"configurations/steep/","text":"steep (steep) https://github.com/soutaro/steep steep is a static type checker for Ruby. You need Steepfile to make it work. Generate it with steep init . Setup require 'lspconfig' . steep . setup {} Default values { cmd = { 'steep' , 'langserver' }, filetypes = { 'ruby' , 'eruby' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"steep (steep)"},{"location":"configurations/steep/#steep-steep","text":"https://github.com/soutaro/steep steep is a static type checker for Ruby. You need Steepfile to make it work. Generate it with steep init .","title":"steep (steep)"},{"location":"configurations/steep/#setup","text":"require 'lspconfig' . steep . setup {}","title":"Setup"},{"location":"configurations/steep/#default-values","text":"{ cmd = { 'steep' , 'langserver' }, filetypes = { 'ruby' , 'eruby' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/stylelint_lsp/","text":"stylelint_lsp (CSS) https://github.com/bmatcuk/stylelint-lsp stylelint-lsp can be installed via npm : npm i -g stylelint-lsp Can be configured by passing a settings.stylelintplus object to stylelint_lsp.setup : require 'lspconfig' . stylelint_lsp . setup { settings = { stylelintplus = { -- see available options in stylelint-lsp documentation } } } Setup require 'lspconfig' . stylelint_lsp . setup {} Default values { cmd = { 'stylelint-lsp' , '--stdio' }, filetypes = { 'css' , 'less' , 'scss' , 'sugarss' , 'vue' , 'wxss' , 'javascript' , 'javascriptreact' , 'typescript' , 'typescriptreact' , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = {}, }","title":"stylelint_lsp (CSS)"},{"location":"configurations/stylelint_lsp/#stylelint_lsp-css","text":"https://github.com/bmatcuk/stylelint-lsp stylelint-lsp can be installed via npm : npm i -g stylelint-lsp Can be configured by passing a settings.stylelintplus object to stylelint_lsp.setup : require 'lspconfig' . stylelint_lsp . setup { settings = { stylelintplus = { -- see available options in stylelint-lsp documentation } } }","title":"stylelint_lsp (CSS)"},{"location":"configurations/stylelint_lsp/#setup","text":"require 'lspconfig' . stylelint_lsp . setup {}","title":"Setup"},{"location":"configurations/stylelint_lsp/#default-values","text":"{ cmd = { 'stylelint-lsp' , '--stdio' }, filetypes = { 'css' , 'less' , 'scss' , 'sugarss' , 'vue' , 'wxss' , 'javascript' , 'javascriptreact' , 'typescript' , 'typescriptreact' , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = {}, }","title":"Default values"},{"location":"configurations/sumneko_lua/","text":"sumneko_lua (Lua) https://github.com/sumneko/lua-language-server Lua language server. lua-language-server can be installed by following the instructions here . The default cmd assumes that the lua-language-server binary can be found in $PATH . If you primarily use lua-language-server for Neovim, and want to provide completions, analysis, and location handling for plugins on runtime path, you can use the following settings. Note: that these settings will meaningfully increase the time until lua-language-server can service initial requests (completion, location) upon starting as well as time to first diagnostics. Completion results will include a workspace indexing progress message until the server has finished indexing. require 'lspconfig' . sumneko_lua . setup { settings = { Lua = { runtime = { -- Tell the language server which version of Lua you're using (most likely LuaJIT in the case of Neovim) version = 'LuaJIT' , }, diagnostics = { -- Get the language server to recognize the `vim` global globals = { 'vim' }, }, workspace = { -- Make the server aware of Neovim runtime files library = vim . api . nvim_get_runtime_file ( \"\" , true ), }, -- Do not send telemetry data containing a randomized but unique identifier telemetry = { enable = false , }, }, }, } See lua-language-server 's documentation for an explanation of the above fields: * Lua.runtime.path * Lua.workspace.library Setup require 'lspconfig' . sumneko_lua . setup {} Default values { cmd = { 'lua-language-server' }, filetypes = { 'lua' }, log_level = 2 , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/sumneko_lua.lua:22 end , settings = { Lua = { telemetry = { enable = false , }, }, }, single_file_support = true , }","title":"sumneko_lua (Lua)"},{"location":"configurations/sumneko_lua/#sumneko_lua-lua","text":"https://github.com/sumneko/lua-language-server Lua language server. lua-language-server can be installed by following the instructions here . The default cmd assumes that the lua-language-server binary can be found in $PATH . If you primarily use lua-language-server for Neovim, and want to provide completions, analysis, and location handling for plugins on runtime path, you can use the following settings. Note: that these settings will meaningfully increase the time until lua-language-server can service initial requests (completion, location) upon starting as well as time to first diagnostics. Completion results will include a workspace indexing progress message until the server has finished indexing. require 'lspconfig' . sumneko_lua . setup { settings = { Lua = { runtime = { -- Tell the language server which version of Lua you're using (most likely LuaJIT in the case of Neovim) version = 'LuaJIT' , }, diagnostics = { -- Get the language server to recognize the `vim` global globals = { 'vim' }, }, workspace = { -- Make the server aware of Neovim runtime files library = vim . api . nvim_get_runtime_file ( \"\" , true ), }, -- Do not send telemetry data containing a randomized but unique identifier telemetry = { enable = false , }, }, }, } See lua-language-server 's documentation for an explanation of the above fields: * Lua.runtime.path * Lua.workspace.library","title":"sumneko_lua (Lua)"},{"location":"configurations/sumneko_lua/#setup","text":"require 'lspconfig' . sumneko_lua . setup {}","title":"Setup"},{"location":"configurations/sumneko_lua/#default-values","text":"{ cmd = { 'lua-language-server' }, filetypes = { 'lua' }, log_level = 2 , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/sumneko_lua.lua:22 end , settings = { Lua = { telemetry = { enable = false , }, }, }, single_file_support = true , }","title":"Default values"},{"location":"configurations/svelte/","text":"svelte (Svelte) https://github.com/sveltejs/language-tools/tree/master/packages/language-server Note: assuming that tsserver is setup, full JavaScript/TypeScript support (find references, rename, etc of symbols in Svelte files when working in JS/TS files) requires per-project installation and configuration of typescript-svelte-plugin . svelte-language-server can be installed via npm : npm install -g svelte-language-server Setup require 'lspconfig' . svelte . setup {} Default values { cmd = { 'svelteserver' , '--stdio' }, filetypes = { 'svelte' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"svelte (Svelte)"},{"location":"configurations/svelte/#svelte-svelte","text":"https://github.com/sveltejs/language-tools/tree/master/packages/language-server Note: assuming that tsserver is setup, full JavaScript/TypeScript support (find references, rename, etc of symbols in Svelte files when working in JS/TS files) requires per-project installation and configuration of typescript-svelte-plugin . svelte-language-server can be installed via npm : npm install -g svelte-language-server","title":"svelte (Svelte)"},{"location":"configurations/svelte/#setup","text":"require 'lspconfig' . svelte . setup {}","title":"Setup"},{"location":"configurations/svelte/#default-values","text":"{ cmd = { 'svelteserver' , '--stdio' }, filetypes = { 'svelte' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/svlangserver/","text":"svlangserver (svlangserver) https://github.com/imc-trading/svlangserver Language server for SystemVerilog. svlangserver can be installed via npm : $ npm install -g @imc-trading/svlangserver Setup require 'lspconfig' . svlangserver . setup {} Default values { cmd = { 'svlangserver' }, filetypes = { 'verilog' , 'systemverilog' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/svlangserver.lua:29 end , settings = { systemverilog = { includeIndexing = { '*.{v,vh,sv,svh}' , '**/*.{v,vh,sv,svh}' }, }, }, single_file_support = true , } Commands :SvlangserverBuildIndex : Instructs language server to rerun indexing :SvlangserverReportHierarchy : Generates hierarchy for the given module","title":"svlangserver (svlangserver)"},{"location":"configurations/svlangserver/#svlangserver-svlangserver","text":"https://github.com/imc-trading/svlangserver Language server for SystemVerilog. svlangserver can be installed via npm : $ npm install -g @imc-trading/svlangserver","title":"svlangserver (svlangserver)"},{"location":"configurations/svlangserver/#setup","text":"require 'lspconfig' . svlangserver . setup {}","title":"Setup"},{"location":"configurations/svlangserver/#default-values","text":"{ cmd = { 'svlangserver' }, filetypes = { 'verilog' , 'systemverilog' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/svlangserver.lua:29 end , settings = { systemverilog = { includeIndexing = { '*.{v,vh,sv,svh}' , '**/*.{v,vh,sv,svh}' }, }, }, single_file_support = true , }","title":"Default values"},{"location":"configurations/svlangserver/#commands","text":":SvlangserverBuildIndex : Instructs language server to rerun indexing :SvlangserverReportHierarchy : Generates hierarchy for the given module","title":"Commands"},{"location":"configurations/svls/","text":"svls (Verilog) https://github.com/dalance/svls Language server for verilog and SystemVerilog svls can be installed via cargo : cargo install svls Setup require 'lspconfig' . svls . setup {} Default values { cmd = { 'svls' }, filetypes = { 'verilog' , 'systemverilog' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"svls (Verilog)"},{"location":"configurations/svls/#svls-verilog","text":"https://github.com/dalance/svls Language server for verilog and SystemVerilog svls can be installed via cargo : cargo install svls","title":"svls (Verilog)"},{"location":"configurations/svls/#setup","text":"require 'lspconfig' . svls . setup {}","title":"Setup"},{"location":"configurations/svls/#default-values","text":"{ cmd = { 'svls' }, filetypes = { 'verilog' , 'systemverilog' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"Default values"},{"location":"configurations/syntax_tree/","text":"syntax_tree (syntax_tree) https://ruby-syntax-tree.github.io/syntax_tree/ A fast Ruby parser and formatter. Syntax Tree is a suite of tools built on top of the internal CRuby parser. It provides the ability to generate a syntax tree from source, as well as the tools necessary to inspect and manipulate that syntax tree. It can be used to build formatters, linters, language servers, and more. gem install syntax_tree Setup require 'lspconfig' . syntax_tree . setup {} Default values { cmd = { 'stree' , 'lsp' }, filetypes = { 'ruby' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/syntax_tree.lua:14 end , }","title":"syntax_tree (syntax_tree)"},{"location":"configurations/syntax_tree/#syntax_tree-syntax_tree","text":"https://ruby-syntax-tree.github.io/syntax_tree/ A fast Ruby parser and formatter. Syntax Tree is a suite of tools built on top of the internal CRuby parser. It provides the ability to generate a syntax tree from source, as well as the tools necessary to inspect and manipulate that syntax tree. It can be used to build formatters, linters, language servers, and more. gem install syntax_tree","title":"syntax_tree (syntax_tree)"},{"location":"configurations/syntax_tree/#setup","text":"require 'lspconfig' . syntax_tree . setup {}","title":"Setup"},{"location":"configurations/syntax_tree/#default-values","text":"{ cmd = { 'stree' , 'lsp' }, filetypes = { 'ruby' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/syntax_tree.lua:14 end , }","title":"Default values"},{"location":"configurations/tailwindcss/","text":"tailwindcss (CSS) https://github.com/tailwindlabs/tailwindcss-intellisense Tailwind CSS Language Server can be installed via npm: npm install -g @tailwindcss/language-server Setup require 'lspconfig' . tailwindcss . setup {} Default values { cmd = { 'tailwindcss-language-server' , '--stdio' }, filetypes = { 'aspnetcorerazor' , 'astro' , 'astro-markdown' , 'blade' , 'django-html' , 'htmldjango' , 'edge' , 'eelixir' , 'ejs' , 'erb' , 'eruby' , 'gohtml' , 'haml' , 'handlebars' , 'hbs' , 'html' , 'html-eex' , 'heex' , 'jade' , 'leaf' , 'liquid' , 'markdown' , 'mdx' , 'mustache' , 'njk' , 'nunjucks' , 'php' , 'razor' , 'slim' , 'twig' , 'css' , 'less' , 'postcss' , 'sass' , 'scss' , 'stylus' , 'sugarss' , 'javascript' , 'javascriptreact' , 'reason' , 'rescript' , 'typescript' , 'typescriptreact' , 'vue' , 'svelte' , }, init_options = { userLanguages = { eelixir = 'html-eex' , eruby = 'erb' , }, }, on_new_config = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/tailwindcss.lua:93 end , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/tailwindcss.lua:105 end , settings = { tailwindCSS = { classAttributes = { 'class' , 'className' , 'classList' , 'ngClass' }, lint = { cssConflict = 'warning' , invalidApply = 'error' , invalidConfigPath = 'error' , invalidScreen = 'error' , invalidTailwindDirective = 'error' , invalidVariant = 'error' , recommendedVariantOrder = 'warning' , }, validate = true , }, }, }","title":"tailwindcss (CSS)"},{"location":"configurations/tailwindcss/#tailwindcss-css","text":"https://github.com/tailwindlabs/tailwindcss-intellisense Tailwind CSS Language Server can be installed via npm: npm install -g @tailwindcss/language-server","title":"tailwindcss (CSS)"},{"location":"configurations/tailwindcss/#setup","text":"require 'lspconfig' . tailwindcss . setup {}","title":"Setup"},{"location":"configurations/tailwindcss/#default-values","text":"{ cmd = { 'tailwindcss-language-server' , '--stdio' }, filetypes = { 'aspnetcorerazor' , 'astro' , 'astro-markdown' , 'blade' , 'django-html' , 'htmldjango' , 'edge' , 'eelixir' , 'ejs' , 'erb' , 'eruby' , 'gohtml' , 'haml' , 'handlebars' , 'hbs' , 'html' , 'html-eex' , 'heex' , 'jade' , 'leaf' , 'liquid' , 'markdown' , 'mdx' , 'mustache' , 'njk' , 'nunjucks' , 'php' , 'razor' , 'slim' , 'twig' , 'css' , 'less' , 'postcss' , 'sass' , 'scss' , 'stylus' , 'sugarss' , 'javascript' , 'javascriptreact' , 'reason' , 'rescript' , 'typescript' , 'typescriptreact' , 'vue' , 'svelte' , }, init_options = { userLanguages = { eelixir = 'html-eex' , eruby = 'erb' , }, }, on_new_config = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/tailwindcss.lua:93 end , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/tailwindcss.lua:105 end , settings = { tailwindCSS = { classAttributes = { 'class' , 'className' , 'classList' , 'ngClass' }, lint = { cssConflict = 'warning' , invalidApply = 'error' , invalidConfigPath = 'error' , invalidScreen = 'error' , invalidTailwindDirective = 'error' , invalidVariant = 'error' , recommendedVariantOrder = 'warning' , }, validate = true , }, }, }","title":"Default values"},{"location":"configurations/taplo/","text":"taplo (TOML) https://taplo.tamasfe.dev/cli/usage/language-server.html Language server for Taplo, a TOML toolkit. taplo-cli can be installed via cargo : cargo install --features lsp --locked taplo-cli Setup require 'lspconfig' . taplo . setup {} Default values { cmd = { 'taplo' , 'lsp' , 'stdio' }, filetypes = { 'toml' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/taplo.lua:7 end , single_file_support = true , }","title":"taplo (TOML)"},{"location":"configurations/taplo/#taplo-toml","text":"https://taplo.tamasfe.dev/cli/usage/language-server.html Language server for Taplo, a TOML toolkit. taplo-cli can be installed via cargo : cargo install --features lsp --locked taplo-cli","title":"taplo (TOML)"},{"location":"configurations/taplo/#setup","text":"require 'lspconfig' . taplo . setup {}","title":"Setup"},{"location":"configurations/taplo/#default-values","text":"{ cmd = { 'taplo' , 'lsp' , 'stdio' }, filetypes = { 'toml' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/taplo.lua:7 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/teal_ls/","text":"teal_ls (teal_ls) https://github.com/teal-language/teal-language-server Install with: luarocks install --dev teal-language-server Setup require 'lspconfig' . teal_ls . setup {} Default values { cmd = { 'teal-language-server' }, filetypes = { 'teal' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"teal_ls (teal_ls)"},{"location":"configurations/teal_ls/#teal_ls-teal_ls","text":"https://github.com/teal-language/teal-language-server Install with: luarocks install --dev teal-language-server","title":"teal_ls (teal_ls)"},{"location":"configurations/teal_ls/#setup","text":"require 'lspconfig' . teal_ls . setup {}","title":"Setup"},{"location":"configurations/teal_ls/#default-values","text":"{ cmd = { 'teal-language-server' }, filetypes = { 'teal' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/terraform_lsp/","text":"terraform_lsp (Terraform) https://github.com/juliosueiras/terraform-lsp Terraform language server Download a released binary from https://github.com/juliosueiras/terraform-lsp/releases . From https://github.com/hashicorp/terraform-ls#terraform-ls-vs-terraform-lsp : Both HashiCorp and the maintainer of terraform-lsp expressed interest in collaborating on a language server and are working towards a long-term goal of a single stable and feature-complete implementation. For the time being both projects continue to exist, giving users the choice: terraform-ls providing overall stability (by relying only on public APIs) compatibility with any provider and any Terraform >=0.12.0 currently less features due to project being younger and relying on public APIs which may not offer the same functionality yet terraform-lsp providing currently more features compatibility with a single particular Terraform (0.12.20 at time of writing) configs designed for other 0.12 versions may work, but interpretation may be inaccurate less stability (due to reliance on Terraform's own internal packages) Setup require 'lspconfig' . terraform_lsp . setup {} Default values { cmd = { 'terraform-lsp' }, filetypes = { 'terraform' , 'hcl' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"terraform_lsp (Terraform)"},{"location":"configurations/terraform_lsp/#terraform_lsp-terraform","text":"https://github.com/juliosueiras/terraform-lsp Terraform language server Download a released binary from https://github.com/juliosueiras/terraform-lsp/releases . From https://github.com/hashicorp/terraform-ls#terraform-ls-vs-terraform-lsp : Both HashiCorp and the maintainer of terraform-lsp expressed interest in collaborating on a language server and are working towards a long-term goal of a single stable and feature-complete implementation. For the time being both projects continue to exist, giving users the choice: terraform-ls providing overall stability (by relying only on public APIs) compatibility with any provider and any Terraform >=0.12.0 currently less features due to project being younger and relying on public APIs which may not offer the same functionality yet terraform-lsp providing currently more features compatibility with a single particular Terraform (0.12.20 at time of writing) configs designed for other 0.12 versions may work, but interpretation may be inaccurate less stability (due to reliance on Terraform's own internal packages)","title":"terraform_lsp (Terraform)"},{"location":"configurations/terraform_lsp/#setup","text":"require 'lspconfig' . terraform_lsp . setup {}","title":"Setup"},{"location":"configurations/terraform_lsp/#default-values","text":"{ cmd = { 'terraform-lsp' }, filetypes = { 'terraform' , 'hcl' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/terraformls/","text":"terraformls (Terraform) https://github.com/hashicorp/terraform-ls Terraform language server Download a released binary from https://github.com/hashicorp/terraform-ls/releases . From https://github.com/hashicorp/terraform-ls#terraform-ls-vs-terraform-lsp : Both HashiCorp and the maintainer of terraform-lsp expressed interest in collaborating on a language server and are working towards a long-term goal of a single stable and feature-complete implementation. For the time being both projects continue to exist, giving users the choice: terraform-ls providing overall stability (by relying only on public APIs) compatibility with any provider and any Terraform >=0.12.0 currently less features due to project being younger and relying on public APIs which may not offer the same functionality yet terraform-lsp providing currently more features compatibility with a single particular Terraform (0.12.20 at time of writing) configs designed for other 0.12 versions may work, but interpretation may be inaccurate less stability (due to reliance on Terraform's own internal packages) Setup require 'lspconfig' . terraformls . setup {} Default values { cmd = { 'terraform-ls' , 'serve' }, filetypes = { 'terraform' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"terraformls (Terraform)"},{"location":"configurations/terraformls/#terraformls-terraform","text":"https://github.com/hashicorp/terraform-ls Terraform language server Download a released binary from https://github.com/hashicorp/terraform-ls/releases . From https://github.com/hashicorp/terraform-ls#terraform-ls-vs-terraform-lsp : Both HashiCorp and the maintainer of terraform-lsp expressed interest in collaborating on a language server and are working towards a long-term goal of a single stable and feature-complete implementation. For the time being both projects continue to exist, giving users the choice: terraform-ls providing overall stability (by relying only on public APIs) compatibility with any provider and any Terraform >=0.12.0 currently less features due to project being younger and relying on public APIs which may not offer the same functionality yet terraform-lsp providing currently more features compatibility with a single particular Terraform (0.12.20 at time of writing) configs designed for other 0.12 versions may work, but interpretation may be inaccurate less stability (due to reliance on Terraform's own internal packages)","title":"terraformls (Terraform)"},{"location":"configurations/terraformls/#setup","text":"require 'lspconfig' . terraformls . setup {}","title":"Setup"},{"location":"configurations/terraformls/#default-values","text":"{ cmd = { 'terraform-ls' , 'serve' }, filetypes = { 'terraform' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/texlab/","text":"texlab (LaTeX) https://github.com/latex-lsp/texlab A completion engine built from scratch for (La)TeX. See https://github.com/latex-lsp/texlab/blob/master/docs/options.md for configuration options. Setup require 'lspconfig' . texlab . setup {} Default values { cmd = { 'texlab' }, filetypes = { 'tex' , 'plaintex' , 'bib' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/texlab.lua:70 end , settings = { texlab = { auxDirectory = '.' , bibtexFormatter = 'texlab' , build = { args = { '-pdf' , '-interaction=nonstopmode' , '-synctex=1' , '%f' }, executable = 'latexmk' , forwardSearchAfter = false , onSave = false , }, chktex = { onEdit = false , onOpenAndSave = false , }, diagnosticsDelay = 300 , formatterLineLength = 80 , forwardSearch = { args = {}, }, latexFormatter = 'latexindent' , latexindent = { modifyLineBreaks = false , }, }, }, single_file_support = true , } Commands :TexlabBuild : Build the current buffer :TexlabForward : Forward search from current position","title":"texlab (LaTeX)"},{"location":"configurations/texlab/#texlab-latex","text":"https://github.com/latex-lsp/texlab A completion engine built from scratch for (La)TeX. See https://github.com/latex-lsp/texlab/blob/master/docs/options.md for configuration options.","title":"texlab (LaTeX)"},{"location":"configurations/texlab/#setup","text":"require 'lspconfig' . texlab . setup {}","title":"Setup"},{"location":"configurations/texlab/#default-values","text":"{ cmd = { 'texlab' }, filetypes = { 'tex' , 'plaintex' , 'bib' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/texlab.lua:70 end , settings = { texlab = { auxDirectory = '.' , bibtexFormatter = 'texlab' , build = { args = { '-pdf' , '-interaction=nonstopmode' , '-synctex=1' , '%f' }, executable = 'latexmk' , forwardSearchAfter = false , onSave = false , }, chktex = { onEdit = false , onOpenAndSave = false , }, diagnosticsDelay = 300 , formatterLineLength = 80 , forwardSearch = { args = {}, }, latexFormatter = 'latexindent' , latexindent = { modifyLineBreaks = false , }, }, }, single_file_support = true , }","title":"Default values"},{"location":"configurations/texlab/#commands","text":":TexlabBuild : Build the current buffer :TexlabForward : Forward search from current position","title":"Commands"},{"location":"configurations/tflint/","text":"tflint (Terraform) https://github.com/terraform-linters/tflint A pluggable Terraform linter that can act as lsp server. Installation instructions can be found in https://github.com/terraform-linters/tflint#installation . Setup require 'lspconfig' . tflint . setup {} Default values { cmd = { 'tflint' , '--langserver' }, filetypes = { 'terraform' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"tflint (Terraform)"},{"location":"configurations/tflint/#tflint-terraform","text":"https://github.com/terraform-linters/tflint A pluggable Terraform linter that can act as lsp server. Installation instructions can be found in https://github.com/terraform-linters/tflint#installation .","title":"tflint (Terraform)"},{"location":"configurations/tflint/#setup","text":"require 'lspconfig' . tflint . setup {}","title":"Setup"},{"location":"configurations/tflint/#default-values","text":"{ cmd = { 'tflint' , '--langserver' }, filetypes = { 'terraform' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/theme_check/","text":"theme_check (Liquid) https://github.com/Shopify/shopify-cli theme-check-language-server is bundled with shopify-cli or it can also be installed via https://github.com/Shopify/theme-check#installation NOTE: If installed via Homebrew, cmd must be set to 'theme-check-liquid-server' require lspconfig . theme_check . setup { cmd = { 'theme-check-liquid-server' } } Setup require 'lspconfig' . theme_check . setup {} Default values { cmd = { 'theme-check-language-server' , '--stdio' }, filetypes = { 'liquid' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = {}, }","title":"theme_check (Liquid)"},{"location":"configurations/theme_check/#theme_check-liquid","text":"https://github.com/Shopify/shopify-cli theme-check-language-server is bundled with shopify-cli or it can also be installed via https://github.com/Shopify/theme-check#installation NOTE: If installed via Homebrew, cmd must be set to 'theme-check-liquid-server' require lspconfig . theme_check . setup { cmd = { 'theme-check-liquid-server' } }","title":"theme_check (Liquid)"},{"location":"configurations/theme_check/#setup","text":"require 'lspconfig' . theme_check . setup {}","title":"Setup"},{"location":"configurations/theme_check/#default-values","text":"{ cmd = { 'theme-check-language-server' , '--stdio' }, filetypes = { 'liquid' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = {}, }","title":"Default values"},{"location":"configurations/tilt_ls/","text":"tilt_ls (tilt_ls) https://github.com/tilt-dev/tilt Tilt language server. You might need to add filetype detection manually: autocmd BufRead Tiltfile setf = tiltfile Setup require 'lspconfig' . tilt_ls . setup {} Default values { cmd = { 'tilt' , 'lsp' , 'start' }, filetypes = { 'tiltfile' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"tilt_ls (tilt_ls)"},{"location":"configurations/tilt_ls/#tilt_ls-tilt_ls","text":"https://github.com/tilt-dev/tilt Tilt language server. You might need to add filetype detection manually: autocmd BufRead Tiltfile setf = tiltfile","title":"tilt_ls (tilt_ls)"},{"location":"configurations/tilt_ls/#setup","text":"require 'lspconfig' . tilt_ls . setup {}","title":"Setup"},{"location":"configurations/tilt_ls/#default-values","text":"{ cmd = { 'tilt' , 'lsp' , 'start' }, filetypes = { 'tiltfile' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/tsserver/","text":"tsserver (TypeScript) https://github.com/theia-ide/typescript-language-server typescript-language-server depends on typescript . Both packages can be installed via npm : npm install -g typescript typescript-language-server To configure typescript language server, add a tsconfig.json or jsconfig.json to the root of your project. Here's an example that disables type checking in JavaScript files. { \"compilerOptions\" : { \"module\" : \"commonjs\" , \"target\" : \"es6\" , \"checkJs\" : false }, \"exclude\" : [ \"node_modules\" ] } Setup require 'lspconfig' . tsserver . setup {} Default values { cmd = { 'typescript-language-server' , '--stdio' }, filetypes = { 'javascript' , 'javascriptreact' , 'javascript.jsx' , 'typescript' , 'typescriptreact' , 'typescript.tsx' , }, init_options = { hostInfo = 'neovim' , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/tsserver.lua:22 end , }","title":"tsserver (TypeScript)"},{"location":"configurations/tsserver/#tsserver-typescript","text":"https://github.com/theia-ide/typescript-language-server typescript-language-server depends on typescript . Both packages can be installed via npm : npm install -g typescript typescript-language-server To configure typescript language server, add a tsconfig.json or jsconfig.json to the root of your project. Here's an example that disables type checking in JavaScript files. { \"compilerOptions\" : { \"module\" : \"commonjs\" , \"target\" : \"es6\" , \"checkJs\" : false }, \"exclude\" : [ \"node_modules\" ] }","title":"tsserver (TypeScript)"},{"location":"configurations/tsserver/#setup","text":"require 'lspconfig' . tsserver . setup {}","title":"Setup"},{"location":"configurations/tsserver/#default-values","text":"{ cmd = { 'typescript-language-server' , '--stdio' }, filetypes = { 'javascript' , 'javascriptreact' , 'javascript.jsx' , 'typescript' , 'typescriptreact' , 'typescript.tsx' , }, init_options = { hostInfo = 'neovim' , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/tsserver.lua:22 end , }","title":"Default values"},{"location":"configurations/typeprof/","text":"typeprof (Ruby) https://github.com/ruby/typeprof typeprof is the built-in analysis and LSP tool for Ruby 3.1+. Setup require 'lspconfig' . typeprof . setup {} Default values { cmd = { 'typeprof' , '--lsp' , '--stdio' }, filetypes = { 'ruby' , 'eruby' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"typeprof (Ruby)"},{"location":"configurations/typeprof/#typeprof-ruby","text":"https://github.com/ruby/typeprof typeprof is the built-in analysis and LSP tool for Ruby 3.1+.","title":"typeprof (Ruby)"},{"location":"configurations/typeprof/#setup","text":"require 'lspconfig' . typeprof . setup {}","title":"Setup"},{"location":"configurations/typeprof/#default-values","text":"{ cmd = { 'typeprof' , '--lsp' , '--stdio' }, filetypes = { 'ruby' , 'eruby' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/vala_ls/","text":"vala_ls (Vala) https://github.com/Prince781/vala-language-server Setup require 'lspconfig' . vala_ls . setup {} Default values { cmd = { 'vala-language-server' }, filetypes = { 'vala' , 'genie' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/vala_ls.lua:28 end , single_file_support = true , }","title":"vala_ls (Vala)"},{"location":"configurations/vala_ls/#vala_ls-vala","text":"https://github.com/Prince781/vala-language-server","title":"vala_ls (Vala)"},{"location":"configurations/vala_ls/#setup","text":"require 'lspconfig' . vala_ls . setup {}","title":"Setup"},{"location":"configurations/vala_ls/#default-values","text":"{ cmd = { 'vala-language-server' }, filetypes = { 'vala' , 'genie' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/vala_ls.lua:28 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/vdmj/","text":"vdmj (VDMJ) https://github.com/nickbattle/vdmj The VDMJ language server can be installed by cloning the VDMJ repository and running mvn clean install . Various options are provided to configure the language server (see below). In particular: - annotation_paths is a list of folders and/or jar file paths for annotations that should be used with the language server; - any value of debugger_port less than zero will disable the debugger; note that if a non-zero value is used, only one instance of the server can be active at a time. More settings for VDMJ can be changed in a file called vdmj.properties under root_dir/.vscode . For a description of the available settings, see Section 7 of the VDMJ User Guide . Note: proof obligations and combinatorial testing are not currently supported by neovim. Setup require 'lspconfig' . vdmj . setup {} Default values { cmd = { 'java' }, filetypes = { 'vdmsl' , 'vdmpp' , 'vdmrt' }, options = { annotation_paths = {}, debugger_port = - 1 , high_precision = false , java = '/usr/lib/jvm/temurin-11-jdk-amd64/bin/java' , java_opts = { '-Xmx3000m' , '-Xss1m' }, logfile = '/home/runner/.cache/nvim/vdm-lsp.log' , mavenrepo = '/home/runner/.m2/repository/com/fujitsu' , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/vdmj.lua:40 end , }","title":"vdmj (VDMJ)"},{"location":"configurations/vdmj/#vdmj-vdmj","text":"https://github.com/nickbattle/vdmj The VDMJ language server can be installed by cloning the VDMJ repository and running mvn clean install . Various options are provided to configure the language server (see below). In particular: - annotation_paths is a list of folders and/or jar file paths for annotations that should be used with the language server; - any value of debugger_port less than zero will disable the debugger; note that if a non-zero value is used, only one instance of the server can be active at a time. More settings for VDMJ can be changed in a file called vdmj.properties under root_dir/.vscode . For a description of the available settings, see Section 7 of the VDMJ User Guide . Note: proof obligations and combinatorial testing are not currently supported by neovim.","title":"vdmj (VDMJ)"},{"location":"configurations/vdmj/#setup","text":"require 'lspconfig' . vdmj . setup {}","title":"Setup"},{"location":"configurations/vdmj/#default-values","text":"{ cmd = { 'java' }, filetypes = { 'vdmsl' , 'vdmpp' , 'vdmrt' }, options = { annotation_paths = {}, debugger_port = - 1 , high_precision = false , java = '/usr/lib/jvm/temurin-11-jdk-amd64/bin/java' , java_opts = { '-Xmx3000m' , '-Xss1m' }, logfile = '/home/runner/.cache/nvim/vdm-lsp.log' , mavenrepo = '/home/runner/.m2/repository/com/fujitsu' , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/vdmj.lua:40 end , }","title":"Default values"},{"location":"configurations/verible/","text":"verible (Verilog) https://github.com/chipsalliance/verible A linter and formatter for verilog and SystemVerilog files. Release binaries can be downloaded from here and placed in a directory on PATH. See https://github.com/chipsalliance/verible/tree/master/verilog/tools/ls/README.md for options. Setup require 'lspconfig' . verible . setup {} Default values { cmd = { 'verible-verilog-ls' }, filetypes = { 'systemverilog' , 'verilog' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"verible (Verilog)"},{"location":"configurations/verible/#verible-verilog","text":"https://github.com/chipsalliance/verible A linter and formatter for verilog and SystemVerilog files. Release binaries can be downloaded from here and placed in a directory on PATH. See https://github.com/chipsalliance/verible/tree/master/verilog/tools/ls/README.md for options.","title":"verible (Verilog)"},{"location":"configurations/verible/#setup","text":"require 'lspconfig' . verible . setup {}","title":"Setup"},{"location":"configurations/verible/#default-values","text":"{ cmd = { 'verible-verilog-ls' }, filetypes = { 'systemverilog' , 'verilog' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , }","title":"Default values"},{"location":"configurations/vimls/","text":"vimls (Vim) https://github.com/iamcco/vim-language-server You can install vim-language-server via npm: npm install -g vim-language-server Setup require 'lspconfig' . vimls . setup {} Default values { cmd = { 'vim-language-server' , '--stdio' }, filetypes = { 'vim' }, init_options = { diagnostic = { enable = true , }, indexes = { count = 3 , gap = 100 , projectRootPatterns = { 'runtime' , 'nvim' , '.git' , 'autoload' , 'plugin' }, runtimepath = true , }, isNeovim = true , iskeyword = '@,48-57,_,192-255,-#' , runtimepath = '' , suggest = { fromRuntimepath = true , fromVimruntime = true , }, vimruntime = '' , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"vimls (Vim)"},{"location":"configurations/vimls/#vimls-vim","text":"https://github.com/iamcco/vim-language-server You can install vim-language-server via npm: npm install -g vim-language-server","title":"vimls (Vim)"},{"location":"configurations/vimls/#setup","text":"require 'lspconfig' . vimls . setup {}","title":"Setup"},{"location":"configurations/vimls/#default-values","text":"{ cmd = { 'vim-language-server' , '--stdio' }, filetypes = { 'vim' }, init_options = { diagnostic = { enable = true , }, indexes = { count = 3 , gap = 100 , projectRootPatterns = { 'runtime' , 'nvim' , '.git' , 'autoload' , 'plugin' }, runtimepath = true , }, isNeovim = true , iskeyword = '@,48-57,_,192-255,-#' , runtimepath = '' , suggest = { fromRuntimepath = true , fromVimruntime = true , }, vimruntime = '' , }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , single_file_support = true , }","title":"Default values"},{"location":"configurations/visualforce_ls/","text":"visualforce_ls (visualforce_ls) https://github.com/forcedotcom/salesforcedx-vscode Language server for Visualforce. For manual installation, download the .vsix archive file from the forcedotcom/salesforcedx-vscode GitHub releases. Then, configure cmd to run the Node script at the unpacked location: require 'lspconfig' . visualforce_ls . setup { cmd = { 'node' , '/path/to/unpacked/archive/extension/node_modules/@salesforce/salesforcedx-visualforce-language-server/out/src/visualforceServer.js' , '--stdio' } } Setup require 'lspconfig' . visualforce_ls . setup {} Default values { filetypes = { 'visualforce' }, init_options = { embeddedLanguages = { css = true , javascript = true , }, }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"visualforce_ls (visualforce_ls)"},{"location":"configurations/visualforce_ls/#visualforce_ls-visualforce_ls","text":"https://github.com/forcedotcom/salesforcedx-vscode Language server for Visualforce. For manual installation, download the .vsix archive file from the forcedotcom/salesforcedx-vscode GitHub releases. Then, configure cmd to run the Node script at the unpacked location: require 'lspconfig' . visualforce_ls . setup { cmd = { 'node' , '/path/to/unpacked/archive/extension/node_modules/@salesforce/salesforcedx-visualforce-language-server/out/src/visualforceServer.js' , '--stdio' } }","title":"visualforce_ls (visualforce_ls)"},{"location":"configurations/visualforce_ls/#setup","text":"require 'lspconfig' . visualforce_ls . setup {}","title":"Setup"},{"location":"configurations/visualforce_ls/#default-values","text":"{ filetypes = { 'visualforce' }, init_options = { embeddedLanguages = { css = true , javascript = true , }, }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/vls/","text":"vls (V) https://github.com/vlang/vls V language server. v-language-server can be installed by following the instructions here . ## Setup ```lua require'lspconfig'.vls.setup{} Default values { cmd = { 'vls' }, filetypes = { 'vlang' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"vls (V)"},{"location":"configurations/vls/#vls-v","text":"https://github.com/vlang/vls V language server. v-language-server can be installed by following the instructions here . ## Setup ```lua require'lspconfig'.vls.setup{}","title":"vls (V)"},{"location":"configurations/vls/#default-values","text":"{ cmd = { 'vls' }, filetypes = { 'vlang' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/volar/","text":"volar (Vue) https://github.com/johnsoncodehk/volar/tree/master/packages/vue-language-server Volar language server for Vue Volar can be installed via npm: npm install -g @volar/vue-language-server Volar by default supports Vue 3 projects. Vue 2 projects need additional configuration . Take Over Mode Volar can serve as a language server for both Vue and TypeScript via Take Over Mode . To enable Take Over Mode, override the default filetypes in setup{} as follows: require 'lspconfig' . volar . setup { filetypes = { 'typescript' , 'javascript' , 'javascriptreact' , 'typescriptreact' , 'vue' , 'json' } } Overriding the default TypeScript Server used by Volar The default config looks for TS in the local node_modules . This can lead to issues e.g. when working on a monorepo . The alternatives are: use a global TypeScript Server installation require 'lspconfig' . volar . setup { init_options = { typescript = { serverPath = '/path/to/.npm/lib/node_modules/typescript/lib/tsserverlib.js' -- Alternative location if installed as root: -- serverPath = '/usr/local/lib/node_modules/typescript/lib/tsserverlibrary.js' } } } use a local server and fall back to a global TypeScript Server installation local util = require 'lspconfig.util' local function get_typescript_server_path ( root_dir ) local global_ts = '/home/[yourusernamehere]/.npm/lib/node_modules/typescript/lib/tsserverlibrary.js' -- Alternative location if installed as root: -- local global_ts = '/usr/local/lib/node_modules/typescript/lib/tsserverlibrary.js' local found_ts = '' local function check_dir ( path ) found_ts = util . path . join ( path , 'node_modules' , 'typescript' , 'lib' , 'tsserverlibrary.js' ) if util . path . exists ( found_ts ) then return path end end if util . search_ancestors ( root_dir , check_dir ) then return found_ts else return global_ts end end require 'lspconfig' . volar . setup { on_new_config = function ( new_config , new_root_dir ) new_config . init_options . typescript . serverPath = get_typescript_server_path ( new_root_dir ) end , } Setup require 'lspconfig' . volar . setup {} Default values { cmd = { 'vue-language-server' , '--stdio' }, filetypes = { 'vue' }, init_options = { documentFeatures = { documentColor = false , documentFormatting = { defaultPrintWidth = 100 , }, documentSymbol = true , foldingRange = true , linkedEditingRange = true , selectionRange = true , }, languageFeatures = { callHierarchy = true , codeAction = true , codeLens = true , completion = { defaultAttrNameCase = 'kebabCase' , defaultTagNameCase = 'both' , }, definition = true , diagnostics = true , documentHighlight = true , documentLink = true , hover = true , implementation = true , references = true , rename = true , renameFileRefactoring = true , schemaRequestService = true , semanticTokens = false , signatureHelp = true , typeDefinition = true , }, typescript = { serverPath = '' , }, }, on_new_config = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/volar.lua:62 end , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"volar (Vue)"},{"location":"configurations/volar/#volar-vue","text":"https://github.com/johnsoncodehk/volar/tree/master/packages/vue-language-server Volar language server for Vue Volar can be installed via npm: npm install -g @volar/vue-language-server Volar by default supports Vue 3 projects. Vue 2 projects need additional configuration . Take Over Mode Volar can serve as a language server for both Vue and TypeScript via Take Over Mode . To enable Take Over Mode, override the default filetypes in setup{} as follows: require 'lspconfig' . volar . setup { filetypes = { 'typescript' , 'javascript' , 'javascriptreact' , 'typescriptreact' , 'vue' , 'json' } } Overriding the default TypeScript Server used by Volar The default config looks for TS in the local node_modules . This can lead to issues e.g. when working on a monorepo . The alternatives are: use a global TypeScript Server installation require 'lspconfig' . volar . setup { init_options = { typescript = { serverPath = '/path/to/.npm/lib/node_modules/typescript/lib/tsserverlib.js' -- Alternative location if installed as root: -- serverPath = '/usr/local/lib/node_modules/typescript/lib/tsserverlibrary.js' } } } use a local server and fall back to a global TypeScript Server installation local util = require 'lspconfig.util' local function get_typescript_server_path ( root_dir ) local global_ts = '/home/[yourusernamehere]/.npm/lib/node_modules/typescript/lib/tsserverlibrary.js' -- Alternative location if installed as root: -- local global_ts = '/usr/local/lib/node_modules/typescript/lib/tsserverlibrary.js' local found_ts = '' local function check_dir ( path ) found_ts = util . path . join ( path , 'node_modules' , 'typescript' , 'lib' , 'tsserverlibrary.js' ) if util . path . exists ( found_ts ) then return path end end if util . search_ancestors ( root_dir , check_dir ) then return found_ts else return global_ts end end require 'lspconfig' . volar . setup { on_new_config = function ( new_config , new_root_dir ) new_config . init_options . typescript . serverPath = get_typescript_server_path ( new_root_dir ) end , }","title":"volar (Vue)"},{"location":"configurations/volar/#setup","text":"require 'lspconfig' . volar . setup {}","title":"Setup"},{"location":"configurations/volar/#default-values","text":"{ cmd = { 'vue-language-server' , '--stdio' }, filetypes = { 'vue' }, init_options = { documentFeatures = { documentColor = false , documentFormatting = { defaultPrintWidth = 100 , }, documentSymbol = true , foldingRange = true , linkedEditingRange = true , selectionRange = true , }, languageFeatures = { callHierarchy = true , codeAction = true , codeLens = true , completion = { defaultAttrNameCase = 'kebabCase' , defaultTagNameCase = 'both' , }, definition = true , diagnostics = true , documentHighlight = true , documentLink = true , hover = true , implementation = true , references = true , rename = true , renameFileRefactoring = true , schemaRequestService = true , semanticTokens = false , signatureHelp = true , typeDefinition = true , }, typescript = { serverPath = '' , }, }, on_new_config = function () -- uses nvim-lspconfig/lua/lspconfig/server_configurations/volar.lua:62 end , root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/vuels/","text":"vuels (Vue) https://github.com/vuejs/vetur/tree/master/server Vue language server(vls) vue-language-server can be installed via npm : npm install -g vls Setup require 'lspconfig' . vuels . setup {} Default values { cmd = { 'vls' }, filetypes = { 'vue' }, init_options = { config = { css = {}, emmet = {}, html = { suggest = {}, }, javascript = { format = {}, }, stylusSupremacy = {}, typescript = { format = {}, }, vetur = { completion = { autoImport = false , tagCasing = 'kebab' , useScaffoldSnippets = false , }, format = { defaultFormatter = { js = 'none' , ts = 'none' , }, defaultFormatterOptions = {}, scriptInitialIndent = false , styleInitialIndent = false , }, useWorkspaceDependencies = false , validation = { script = true , style = true , template = true , }, }, }, }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"vuels (Vue)"},{"location":"configurations/vuels/#vuels-vue","text":"https://github.com/vuejs/vetur/tree/master/server Vue language server(vls) vue-language-server can be installed via npm : npm install -g vls","title":"vuels (Vue)"},{"location":"configurations/vuels/#setup","text":"require 'lspconfig' . vuels . setup {}","title":"Setup"},{"location":"configurations/vuels/#default-values","text":"{ cmd = { 'vls' }, filetypes = { 'vue' }, init_options = { config = { css = {}, emmet = {}, html = { suggest = {}, }, javascript = { format = {}, }, stylusSupremacy = {}, typescript = { format = {}, }, vetur = { completion = { autoImport = false , tagCasing = 'kebab' , useScaffoldSnippets = false , }, format = { defaultFormatter = { js = 'none' , ts = 'none' , }, defaultFormatterOptions = {}, scriptInitialIndent = false , styleInitialIndent = false , }, useWorkspaceDependencies = false , validation = { script = true , style = true , template = true , }, }, }, }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/wgsl_analyzer/","text":"wgsl_analyzer (wgsl_analyzer) https://github.com/wgsl-analyzer/wgsl-analyzer wgsl_analyzer can be installed via cargo : cargo install --git https://github.com/wgsl-analyzer/wgsl-analyzer wgsl_analyzer Setup require 'lspconfig' . wgsl_analyzer . setup {} Default values { cmd = { 'wgsl_analyzer' }, filetypes = { 'wgsl' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = {}, }","title":"wgsl_analyzer (wgsl_analyzer)"},{"location":"configurations/wgsl_analyzer/#wgsl_analyzer-wgsl_analyzer","text":"https://github.com/wgsl-analyzer/wgsl-analyzer wgsl_analyzer can be installed via cargo : cargo install --git https://github.com/wgsl-analyzer/wgsl-analyzer wgsl_analyzer","title":"wgsl_analyzer (wgsl_analyzer)"},{"location":"configurations/wgsl_analyzer/#setup","text":"require 'lspconfig' . wgsl_analyzer . setup {}","title":"Setup"},{"location":"configurations/wgsl_analyzer/#default-values","text":"{ cmd = { 'wgsl_analyzer' }, filetypes = { 'wgsl' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , settings = {}, }","title":"Default values"},{"location":"configurations/yamlls/","text":"yamlls (YAML) https://github.com/redhat-developer/yaml-language-server yaml-language-server can be installed via yarn : yarn global add yaml-language-server To use a schema for validation, there are two options: Add a modeline to the file. A modeline is a comment of the form: # yaml-language-server: $schema=<urlToTheSchema|relativeFilePath|absoluteFilePath}> where the relative filepath is the path relative to the open yaml file, and the absolute filepath is the filepath relative to the filesystem root ('/' on unix systems) Associated a schema url, relative , or absolute (to root of project, not to filesystem root) path to the a glob pattern relative to the detected project root. Check :LspInfo to determine the resolved project root. require ( 'lspconfig' ). yamlls . setup { ... -- other configuration for setup {} settings = { yaml = { ... -- other settings. note this overrides the lspconfig defaults. schemas = { [ \"https://json.schemastore.org/github-workflow.json\" ] = \"/.github/workflows/*\" [ \"../path/relative/to/file.yml\" ] = \"/.github/workflows/*\" [ \"/path/from/root/of/project\" ] = \"/.github/workflows/*\" }, }, } } Currently, kubernetes is special-cased in yammls, see the following upstream issues: * #211 . * #307 . To override a schema to use a specific k8s schema version (for example, to use 1.18): require ( 'lspconfig' ). yamlls . setup { ... -- other configuration for setup {} settings = { yaml = { ... -- other settings. note this overrides the lspconfig defaults. schemas = { [ \"https://raw.githubusercontent.com/instrumenta/kubernetes-json-schema/master/v1.18.0-standalone-strict/all.json\" ] = \"/*.k8s.yaml\" , ... -- other schemas }, }, } } Setup require 'lspconfig' . yamlls . setup {} Default values { cmd = { 'yaml-language-server' , '--stdio' }, filetypes = { 'yaml' , 'yaml.docker-compose' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , settings = { redhat = { telemetry = { enabled = false , }, }, }, single_file_support = true , }","title":"yamlls (YAML)"},{"location":"configurations/yamlls/#yamlls-yaml","text":"https://github.com/redhat-developer/yaml-language-server yaml-language-server can be installed via yarn : yarn global add yaml-language-server To use a schema for validation, there are two options: Add a modeline to the file. A modeline is a comment of the form: # yaml-language-server: $schema=<urlToTheSchema|relativeFilePath|absoluteFilePath}> where the relative filepath is the path relative to the open yaml file, and the absolute filepath is the filepath relative to the filesystem root ('/' on unix systems) Associated a schema url, relative , or absolute (to root of project, not to filesystem root) path to the a glob pattern relative to the detected project root. Check :LspInfo to determine the resolved project root. require ( 'lspconfig' ). yamlls . setup { ... -- other configuration for setup {} settings = { yaml = { ... -- other settings. note this overrides the lspconfig defaults. schemas = { [ \"https://json.schemastore.org/github-workflow.json\" ] = \"/.github/workflows/*\" [ \"../path/relative/to/file.yml\" ] = \"/.github/workflows/*\" [ \"/path/from/root/of/project\" ] = \"/.github/workflows/*\" }, }, } } Currently, kubernetes is special-cased in yammls, see the following upstream issues: * #211 . * #307 . To override a schema to use a specific k8s schema version (for example, to use 1.18): require ( 'lspconfig' ). yamlls . setup { ... -- other configuration for setup {} settings = { yaml = { ... -- other settings. note this overrides the lspconfig defaults. schemas = { [ \"https://raw.githubusercontent.com/instrumenta/kubernetes-json-schema/master/v1.18.0-standalone-strict/all.json\" ] = \"/*.k8s.yaml\" , ... -- other schemas }, }, } }","title":"yamlls (YAML)"},{"location":"configurations/yamlls/#setup","text":"require 'lspconfig' . yamlls . setup {}","title":"Setup"},{"location":"configurations/yamlls/#default-values","text":"{ cmd = { 'yaml-language-server' , '--stdio' }, filetypes = { 'yaml' , 'yaml.docker-compose' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:347 end , settings = { redhat = { telemetry = { enabled = false , }, }, }, single_file_support = true , }","title":"Default values"},{"location":"configurations/zk/","text":"zk (Markdown) https://github.com/mickael-menu/zk A plain text note-taking assistant Setup require 'lspconfig' . zk . setup {} Default values { cmd = { 'zk' , 'lsp' }, filetypes = { 'markdown' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , } Commands :ZkIndex : Index :ZkNew : ZkNew","title":"zk (Markdown)"},{"location":"configurations/zk/#zk-markdown","text":"https://github.com/mickael-menu/zk A plain text note-taking assistant","title":"zk (Markdown)"},{"location":"configurations/zk/#setup","text":"require 'lspconfig' . zk . setup {}","title":"Setup"},{"location":"configurations/zk/#default-values","text":"{ cmd = { 'zk' , 'lsp' }, filetypes = { 'markdown' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , }","title":"Default values"},{"location":"configurations/zk/#commands","text":":ZkIndex : Index :ZkNew : ZkNew","title":"Commands"},{"location":"configurations/zls/","text":"zls (Zig) https://github.com/zigtools/zls Zig LSP implementation + Zig Language Server Setup require 'lspconfig' . zls . setup {} Default values { cmd = { 'zls' }, filetypes = { 'zig' , 'zir' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"zls (Zig)"},{"location":"configurations/zls/#zls-zig","text":"https://github.com/zigtools/zls Zig LSP implementation + Zig Language Server","title":"zls (Zig)"},{"location":"configurations/zls/#setup","text":"require 'lspconfig' . zls . setup {}","title":"Setup"},{"location":"configurations/zls/#default-values","text":"{ cmd = { 'zls' }, filetypes = { 'zig' , 'zir' }, root_dir = function () -- uses nvim-lspconfig/lua/lspconfig/util.lua:343 end , single_file_support = true , }","title":"Default values"},{"location":"help/","text":"What is nvim-lspconfig? Does nvim-lspconfig provide a language server client? nvim-lspconfig includes none of the language server client implementation. All of the code for the language server client is located in the core of neovim. Lspconfig is a helper plugin that leverages the language client API in neovim core for an easier to use experience. Lspconfig handles: launching a language server when a matching filetype is detected Sending the correct initialization options and settings (these are two separate things in the LSP specification) during launch attaching new buffers you open to the currently active language server Compare directly using the core API: LaunchPyright = function () local client_id = vim . lsp . start_client ({ cmd = { \"pyright-langserver\" , \"--stdio\" }}); vim . lsp . buf_attach_client ( 0 , client_id ) end vim . cmd ( [[ command! -range LaunchPyright execute 'lua LaunchPyright()' ]] ) To using lspconfig: require ( 'lspconfig' ). pyright . setup () Do I need lspconfig to use neovim's LSP? You can use the built-in language server client without nvim-lspconfig, you'll just have to write out the server configuration and start/attach clients to buffers manually (see above or :help lsp ). Why do I have to install nvim-jdtls/nvim-metals if I have nvim-lspconfig installed already? (or vice versa) nvim-lspconfig (and neovim core) do not provide any support for custom extensions to the LSP specification. Many servers go \"off-spec\" and add their own functionality, which requires custom handlers. Language server specific plugins like nvim-jdtls and nvim-metals can be safely installed alongside nvim-lspconfig, and you should prefer language specific extensions for their respective servers. Additional guides/documentation for developing language specific plugins will be provided in the neovim 0.7-0.8 release timeframe.","title":"What is nvim-lspconfig?"},{"location":"help/#what-is-nvim-lspconfig-does-nvim-lspconfig-provide-a-language-server-client","text":"nvim-lspconfig includes none of the language server client implementation. All of the code for the language server client is located in the core of neovim. Lspconfig is a helper plugin that leverages the language client API in neovim core for an easier to use experience. Lspconfig handles: launching a language server when a matching filetype is detected Sending the correct initialization options and settings (these are two separate things in the LSP specification) during launch attaching new buffers you open to the currently active language server Compare directly using the core API: LaunchPyright = function () local client_id = vim . lsp . start_client ({ cmd = { \"pyright-langserver\" , \"--stdio\" }}); vim . lsp . buf_attach_client ( 0 , client_id ) end vim . cmd ( [[ command! -range LaunchPyright execute 'lua LaunchPyright()' ]] ) To using lspconfig: require ( 'lspconfig' ). pyright . setup ()","title":"What is nvim-lspconfig? Does nvim-lspconfig provide a language server client?"},{"location":"help/#do-i-need-lspconfig-to-use-neovims-lsp","text":"You can use the built-in language server client without nvim-lspconfig, you'll just have to write out the server configuration and start/attach clients to buffers manually (see above or :help lsp ).","title":"Do I need lspconfig to use neovim's LSP?"},{"location":"help/#why-do-i-have-to-install-nvim-jdtlsnvim-metals-if-i-have-nvim-lspconfig-installed-already-or-vice-versa","text":"nvim-lspconfig (and neovim core) do not provide any support for custom extensions to the LSP specification. Many servers go \"off-spec\" and add their own functionality, which requires custom handlers. Language server specific plugins like nvim-jdtls and nvim-metals can be safely installed alongside nvim-lspconfig, and you should prefer language specific extensions for their respective servers. Additional guides/documentation for developing language specific plugins will be provided in the neovim 0.7-0.8 release timeframe.","title":"Why do I have to install nvim-jdtls/nvim-metals if I have nvim-lspconfig installed already? (or vice versa)"},{"location":"help/autocomplete/","text":"Autocompletion (not built-in) vs. completion (built-in) Neovim does not support built-in autocompletion. As mentioned in the readme, you can bind the completion results to omnifunc for on-demand completion. To use autocompletion, please use an external plugin. We recommend nvim-cmp , the successor/rewrite of nvim-compe . Please note, in order to provide completion, text must be synchronized on each completion request. If you notice slowdowns, the most likely candidate is a slow language server bottlenecking your autocompletion plugin. nvim-cmp For installing nvim-cmp, with autocompletion support for snippets/LSP, you can follow the below snippet. Note, this does not include your server configuration. If you are using nvim-cmp do not use neovim's built-in omnifunc as it cannot support the additional completion items returned from servers due to the capabilities enabled by nvim-cmp. local use = require ( 'packer' ). use require ( 'packer' ). startup ( function () use 'neovim/nvim-lspconfig' -- Collection of configurations for built-in LSP client use 'hrsh7th/nvim-cmp' -- Autocompletion plugin use 'hrsh7th/cmp-nvim-lsp' -- LSP source for nvim-cmp use 'saadparwaiz1/cmp_luasnip' -- Snippets source for nvim-cmp use 'L3MON4D3/LuaSnip' -- Snippets plugin end ) -- Add additional capabilities supported by nvim-cmp local capabilities = vim . lsp . protocol . make_client_capabilities () capabilities = require ( 'cmp_nvim_lsp' ). update_capabilities ( capabilities ) local lspconfig = require ( 'lspconfig' ) -- Enable some language servers with the additional completion capabilities offered by nvim-cmp local servers = { 'clangd' , 'rust_analyzer' , 'pyright' , 'tsserver' } for _ , lsp in ipairs ( servers ) do lspconfig [ lsp ]. setup { -- on_attach = my_custom_on_attach, capabilities = capabilities , } end -- luasnip setup local luasnip = require 'luasnip' -- nvim-cmp setup local cmp = require 'cmp' cmp . setup { snippet = { expand = function ( args ) require ( 'luasnip' ). lsp_expand ( args . body ) end , }, mapping = { [ '<C-p>' ] = cmp . mapping . select_prev_item (), [ '<C-n>' ] = cmp . mapping . select_next_item (), [ '<C-d>' ] = cmp . mapping . scroll_docs ( - 4 ), [ '<C-f>' ] = cmp . mapping . scroll_docs ( 4 ), [ '<C-Space>' ] = cmp . mapping . complete (), [ '<C-e>' ] = cmp . mapping . close (), [ '<CR>' ] = cmp . mapping . confirm { behavior = cmp . ConfirmBehavior . Replace , select = true , }, [ '<Tab>' ] = function ( fallback ) if cmp . visible () then cmp . select_next_item () elseif luasnip . expand_or_jumpable () then luasnip . expand_or_jump () else fallback () end end , [ '<S-Tab>' ] = function ( fallback ) if cmp . visible () then cmp . select_prev_item () elseif luasnip . jumpable ( - 1 ) then luasnip . jump ( - 1 ) else fallback () end end , }, sources = { { name = 'nvim_lsp' }, { name = 'luasnip' }, }, } Auto-import The above snippet maps the necessary confirm on enter mapping to use auto-import. An example to show how this works: Make sure tsserver is installed according to the lspconfig wiki, and if you want, use our autocompletion example init.lua . mkdir test && cd test && npm init Follow the prompts to create a project npm install lodash --save npm install @types/lodash --save-dev echo import { } from \"lodash\" >> index.js nvim index.js Check the language server is running with :LspInfo type debounce on line 2 and hit enter ( <CR> ) Note: This currently does not work with typescript server (theia) on Windows due to an upstream bug in theia, see https://github.com/theia-ide/typescript-language-server/issues/135 coq_nvim Note: coq_nvim requires Python 3.8.2 or above with venv package, and SQLite. coq_nvim requires wrapping the config table passed to setup {} . See the example below: local use = require ( 'packer' ). use require ( 'packer' ). startup ( function () use 'neovim/nvim-lspconfig' -- Collection of configurations for built-in LSP client use { 'ms-jpq/coq_nvim' , run = 'python3 -m coq deps' } use 'ms-jpq/coq.artifacts' use 'ms-jpq/coq.thirdparty' end ) local lspconfig = require ( 'lspconfig' ) -- Automatically start coq vim . g . coq_settings = { auto_start = 'shut-up' } -- Enable some language servers with the additional completion capabilities offered by coq_nvim local servers = { 'clangd' , 'rust_analyzer' , 'pyright' , 'tsserver' } for _ , lsp in ipairs ( servers ) do lspconfig [ lsp ]. setup ( require ( 'coq' ). lsp_ensure_capabilities ({ -- on_attach = my_custom_on_attach, })) end ddc.vim Note: ddc.vim requires deno to be available on PATH. local install_path = vim . fn . stdpath ( 'data' ) .. '/site/pack/packer/start/packer.nvim' if vim . fn . empty ( vim . fn . glob ( install_path )) > 0 then vim . fn . execute ( '!git clone https://github.com/wbthomason/packer.nvim ' .. install_path ) end local use = require ( 'packer' ). use require ( 'packer' ). startup ( function () use 'neovim/nvim-lspconfig' -- Collection of configurations for built-in LSP client use 'vim-denops/denops.vim' use 'Shougo/ddc.vim' use 'Shougo/ddc-nvim-lsp' use 'Shougo/ddc-matcher_head' use 'Shougo/ddc-sorter_rank' end ) local lspconfig = require ( 'lspconfig' ) -- Enable some language servers with the additional completion capabilities offered by nvim-cmp local servers = { 'clangd' , 'rust_analyzer' , 'pyright' , 'tsserver' } for _ , lsp in ipairs ( servers ) do lspconfig [ lsp ]. setup { -- on_attach = my_custom_on_attach, } end vim . cmd [[ call ddc#custom#patch_global('sourceOptions', { \\ '_': { \\ 'matchers': ['matcher_head'], \\ 'sorters': ['sorter_rank']}, \\ }) call ddc#custom#patch_global('sources', ['nvim-lsp']) call ddc#custom#patch_global('sourceOptions', { \\ 'nvim-lsp': { \\ 'mark': 'lsp', \\ 'forceCompletionPattern': '\\.\\w*|:\\w*|->\\w*' }, \\ }) call ddc#enable() ]]","title":"Autocompletion"},{"location":"help/autocomplete/#autocompletion-not-built-in-vs-completion-built-in","text":"Neovim does not support built-in autocompletion. As mentioned in the readme, you can bind the completion results to omnifunc for on-demand completion. To use autocompletion, please use an external plugin. We recommend nvim-cmp , the successor/rewrite of nvim-compe . Please note, in order to provide completion, text must be synchronized on each completion request. If you notice slowdowns, the most likely candidate is a slow language server bottlenecking your autocompletion plugin.","title":"Autocompletion (not built-in) vs. completion (built-in)"},{"location":"help/autocomplete/#nvim-cmp","text":"For installing nvim-cmp, with autocompletion support for snippets/LSP, you can follow the below snippet. Note, this does not include your server configuration. If you are using nvim-cmp do not use neovim's built-in omnifunc as it cannot support the additional completion items returned from servers due to the capabilities enabled by nvim-cmp. local use = require ( 'packer' ). use require ( 'packer' ). startup ( function () use 'neovim/nvim-lspconfig' -- Collection of configurations for built-in LSP client use 'hrsh7th/nvim-cmp' -- Autocompletion plugin use 'hrsh7th/cmp-nvim-lsp' -- LSP source for nvim-cmp use 'saadparwaiz1/cmp_luasnip' -- Snippets source for nvim-cmp use 'L3MON4D3/LuaSnip' -- Snippets plugin end ) -- Add additional capabilities supported by nvim-cmp local capabilities = vim . lsp . protocol . make_client_capabilities () capabilities = require ( 'cmp_nvim_lsp' ). update_capabilities ( capabilities ) local lspconfig = require ( 'lspconfig' ) -- Enable some language servers with the additional completion capabilities offered by nvim-cmp local servers = { 'clangd' , 'rust_analyzer' , 'pyright' , 'tsserver' } for _ , lsp in ipairs ( servers ) do lspconfig [ lsp ]. setup { -- on_attach = my_custom_on_attach, capabilities = capabilities , } end -- luasnip setup local luasnip = require 'luasnip' -- nvim-cmp setup local cmp = require 'cmp' cmp . setup { snippet = { expand = function ( args ) require ( 'luasnip' ). lsp_expand ( args . body ) end , }, mapping = { [ '<C-p>' ] = cmp . mapping . select_prev_item (), [ '<C-n>' ] = cmp . mapping . select_next_item (), [ '<C-d>' ] = cmp . mapping . scroll_docs ( - 4 ), [ '<C-f>' ] = cmp . mapping . scroll_docs ( 4 ), [ '<C-Space>' ] = cmp . mapping . complete (), [ '<C-e>' ] = cmp . mapping . close (), [ '<CR>' ] = cmp . mapping . confirm { behavior = cmp . ConfirmBehavior . Replace , select = true , }, [ '<Tab>' ] = function ( fallback ) if cmp . visible () then cmp . select_next_item () elseif luasnip . expand_or_jumpable () then luasnip . expand_or_jump () else fallback () end end , [ '<S-Tab>' ] = function ( fallback ) if cmp . visible () then cmp . select_prev_item () elseif luasnip . jumpable ( - 1 ) then luasnip . jump ( - 1 ) else fallback () end end , }, sources = { { name = 'nvim_lsp' }, { name = 'luasnip' }, }, }","title":"nvim-cmp"},{"location":"help/autocomplete/#auto-import","text":"The above snippet maps the necessary confirm on enter mapping to use auto-import. An example to show how this works: Make sure tsserver is installed according to the lspconfig wiki, and if you want, use our autocompletion example init.lua . mkdir test && cd test && npm init Follow the prompts to create a project npm install lodash --save npm install @types/lodash --save-dev echo import { } from \"lodash\" >> index.js nvim index.js Check the language server is running with :LspInfo type debounce on line 2 and hit enter ( <CR> ) Note: This currently does not work with typescript server (theia) on Windows due to an upstream bug in theia, see https://github.com/theia-ide/typescript-language-server/issues/135","title":"Auto-import"},{"location":"help/autocomplete/#coq_nvim","text":"Note: coq_nvim requires Python 3.8.2 or above with venv package, and SQLite. coq_nvim requires wrapping the config table passed to setup {} . See the example below: local use = require ( 'packer' ). use require ( 'packer' ). startup ( function () use 'neovim/nvim-lspconfig' -- Collection of configurations for built-in LSP client use { 'ms-jpq/coq_nvim' , run = 'python3 -m coq deps' } use 'ms-jpq/coq.artifacts' use 'ms-jpq/coq.thirdparty' end ) local lspconfig = require ( 'lspconfig' ) -- Automatically start coq vim . g . coq_settings = { auto_start = 'shut-up' } -- Enable some language servers with the additional completion capabilities offered by coq_nvim local servers = { 'clangd' , 'rust_analyzer' , 'pyright' , 'tsserver' } for _ , lsp in ipairs ( servers ) do lspconfig [ lsp ]. setup ( require ( 'coq' ). lsp_ensure_capabilities ({ -- on_attach = my_custom_on_attach, })) end","title":"coq_nvim"},{"location":"help/autocomplete/#ddcvim","text":"Note: ddc.vim requires deno to be available on PATH. local install_path = vim . fn . stdpath ( 'data' ) .. '/site/pack/packer/start/packer.nvim' if vim . fn . empty ( vim . fn . glob ( install_path )) > 0 then vim . fn . execute ( '!git clone https://github.com/wbthomason/packer.nvim ' .. install_path ) end local use = require ( 'packer' ). use require ( 'packer' ). startup ( function () use 'neovim/nvim-lspconfig' -- Collection of configurations for built-in LSP client use 'vim-denops/denops.vim' use 'Shougo/ddc.vim' use 'Shougo/ddc-nvim-lsp' use 'Shougo/ddc-matcher_head' use 'Shougo/ddc-sorter_rank' end ) local lspconfig = require ( 'lspconfig' ) -- Enable some language servers with the additional completion capabilities offered by nvim-cmp local servers = { 'clangd' , 'rust_analyzer' , 'pyright' , 'tsserver' } for _ , lsp in ipairs ( servers ) do lspconfig [ lsp ]. setup { -- on_attach = my_custom_on_attach, } end vim . cmd [[ call ddc#custom#patch_global('sourceOptions', { \\ '_': { \\ 'matchers': ['matcher_head'], \\ 'sorters': ['sorter_rank']}, \\ }) call ddc#custom#patch_global('sources', ['nvim-lsp']) call ddc#custom#patch_global('sourceOptions', { \\ 'nvim-lsp': { \\ 'mark': 'lsp', \\ 'forceCompletionPattern': '\\.\\w*|:\\w*|->\\w*' }, \\ }) call ddc#enable() ]]","title":"ddc.vim"},{"location":"help/codeaction/","text":"Code Actions Code actions are not present on each server. There is no way to query the total available code actions for a document, as they must be requested at a certain point. To show a sign when a code action is available, you can modify the following and add to your config directory: --lua/code_action_utils.lua local M = {} local lsp_util = vim . lsp . util function M . code_action_listener () local context = { diagnostics = vim . lsp . diagnostic . get_line_diagnostics () } local params = lsp_util . make_range_params () params . context = context vim . lsp . buf_request ( 0 , 'textDocument/codeAction' , params , function ( err , _ , result ) -- do something with result - e.g. check if empty and show some indication such as a sign end ) end return M And the following in your configuration to call the function: autocmd CursorHold , CursorHoldI * lua require ( 'code_action_utils' ) .code_action_listener ()","title":"Code Actions"},{"location":"help/codeaction/#code-actions","text":"Code actions are not present on each server. There is no way to query the total available code actions for a document, as they must be requested at a certain point. To show a sign when a code action is available, you can modify the following and add to your config directory: --lua/code_action_utils.lua local M = {} local lsp_util = vim . lsp . util function M . code_action_listener () local context = { diagnostics = vim . lsp . diagnostic . get_line_diagnostics () } local params = lsp_util . make_range_params () params . context = context vim . lsp . buf_request ( 0 , 'textDocument/codeAction' , params , function ( err , _ , result ) -- do something with result - e.g. check if empty and show some indication such as a sign end ) end return M And the following in your configuration to call the function: autocmd CursorHold , CursorHoldI * lua require ( 'code_action_utils' ) .code_action_listener ()","title":"Code Actions"},{"location":"help/compare/","text":"Comparison to other LSP ecosystems (CoC, vim lsp, etc.) What is included in the built-in client? The built-in language server client implements the language server protocol as the specification intends. The client is extensible, so plugins are free (and encouraged) to implement support for servers which add additional functionality outside the specification. Client-side functionality such as auto-completion and auto-pairs are not part of the LSP specification, and are not built into neovim. Snippets are provided by certain language servers, and the built-in omnifunc has primitive snippet support. These are generic client capabilities that are broader than the language server protocol, but often can use language servers as an additional source. The following plugins provide good integration with the built-in client: nvim-cmp : auto-completion LuaSnip : snippets support nvim-autopairs : auto-pairs Should I use CoC.nvim, vim-lsc, vim-lsp, or neovim's built-in language server client? All clients are terrific and have amazing communities of contributors. Reasons you may choose the neovim's built-in language server client: It's very extensible all UI elements and behavior can be styled to your liking by overriding a handler in your init.vim/init.lua It's built into neovim Lua is a nice language to work in LuaJIT is an extremely fast tracing interpreter The client leverages libuv's event loop for fast asynchronous communication and an extremely fast json parser You can mix and match snippets, auto-pairs, and auto-completion plugins There are no dependencies for running the built-in client many servers are written in javasript and will require node.js Reasons you might prefer CoC.nvim: CoC provides functionality that is unrelated to (and beyond) language server support (autocompletion, coc-explorer, coc-pairs, coc-lists) the built-in client does not implement autocompletion, you will need a plugin for this autocompletion is not a part of the LSP specification, only completion is CoC.nvim manages it's own plugins (snippets, fuzzy searchers, lists) the built-in client does not need to be installed users will typically install lspconfig + an autocomplete extension + a snippets extension via their choice of package manager CoC.nvim has a dedicated plugin (and maintainer) per language nvim-lspconfig supports a large number of language servers, but doesn't implement off-spec functionality like CoC does for each one there are an increasing number of plugins built around the built-in LSC (nvim-jdtls, nvim-metals, flutter-tools.nvim) CoC.nvim uses a fork of vscode's tsserver extension for typescript/javascript tsserver does not implement the LSP specification yet (there are plans to do so) the vscode extension uses it's own custom interface to tsserver nvim-lspconfig provides support for the theia-IDE wrapper around tsserver For now, CoC.nvim will provide a closer experience to vscode's typescript extension than nvim-lspconfig + theia + null-ls CoC.nvim is an older, more established plugin","title":"Comparison to other LSP ecosystems"},{"location":"help/compare/#comparison-to-other-lsp-ecosystems-coc-vim-lsp-etc","text":"","title":"Comparison to other LSP ecosystems (CoC, vim lsp, etc.)"},{"location":"help/compare/#what-is-included-in-the-built-in-client","text":"The built-in language server client implements the language server protocol as the specification intends. The client is extensible, so plugins are free (and encouraged) to implement support for servers which add additional functionality outside the specification. Client-side functionality such as auto-completion and auto-pairs are not part of the LSP specification, and are not built into neovim. Snippets are provided by certain language servers, and the built-in omnifunc has primitive snippet support. These are generic client capabilities that are broader than the language server protocol, but often can use language servers as an additional source. The following plugins provide good integration with the built-in client: nvim-cmp : auto-completion LuaSnip : snippets support nvim-autopairs : auto-pairs","title":"What is included in the built-in client?"},{"location":"help/compare/#should-i-use-cocnvim-vim-lsc-vim-lsp-or-neovims-built-in-language-server-client","text":"All clients are terrific and have amazing communities of contributors. Reasons you may choose the neovim's built-in language server client: It's very extensible all UI elements and behavior can be styled to your liking by overriding a handler in your init.vim/init.lua It's built into neovim Lua is a nice language to work in LuaJIT is an extremely fast tracing interpreter The client leverages libuv's event loop for fast asynchronous communication and an extremely fast json parser You can mix and match snippets, auto-pairs, and auto-completion plugins There are no dependencies for running the built-in client many servers are written in javasript and will require node.js Reasons you might prefer CoC.nvim: CoC provides functionality that is unrelated to (and beyond) language server support (autocompletion, coc-explorer, coc-pairs, coc-lists) the built-in client does not implement autocompletion, you will need a plugin for this autocompletion is not a part of the LSP specification, only completion is CoC.nvim manages it's own plugins (snippets, fuzzy searchers, lists) the built-in client does not need to be installed users will typically install lspconfig + an autocomplete extension + a snippets extension via their choice of package manager CoC.nvim has a dedicated plugin (and maintainer) per language nvim-lspconfig supports a large number of language servers, but doesn't implement off-spec functionality like CoC does for each one there are an increasing number of plugins built around the built-in LSC (nvim-jdtls, nvim-metals, flutter-tools.nvim) CoC.nvim uses a fork of vscode's tsserver extension for typescript/javascript tsserver does not implement the LSP specification yet (there are plans to do so) the vscode extension uses it's own custom interface to tsserver nvim-lspconfig provides support for the theia-IDE wrapper around tsserver For now, CoC.nvim will provide a closer experience to vscode's typescript extension than nvim-lspconfig + theia + null-ls CoC.nvim is an older, more established plugin","title":"Should I use CoC.nvim, vim-lsc, vim-lsp, or neovim's built-in language server client?"},{"location":"help/containers/","text":"Running language servers in containers Preface Say you are developing code on a local install of a newer Linux distribution to get all the features offered there, but the code you are developing is intended to be run on a more legacy system. The libraries it needs to run, etc. all won't work on your host system, nor do you want them there, so you actually run and build the code inside of a Docker container. The process of getting each language server to work might be a bit nuanced, but this page will help you get started and help bring to light some troubles that might occur along the way. My creating of this page came out of a conversation with @mjlbach on the nvim-lspconfig Q&A thread , and is very much a first attempt. Feel free to add other tips for other language servers as the might not all be the same as clangd , or edit this page as you make improvements & find fixes. Language servers clangd clangd is a C family language server, as the name implies. In order to get this working inside of a container, while Neovim runs on the host system, the setup might look something like the following: cclangd : A shell script wrapper to run clangd inside of the passed container, or normally if no matching container is found ##! /bin/sh ## The name of the container to run `clangd` in must be passed as the first and only argument ## ## This is based off the name of the buffer and the repository, etc. it is in, so even if we ## don't end up attaching to a container, it will still be passed [ \" $# \" -ne 1 ] && echo \"Container name required as first and only argument\" > & 2 && exit 1 ## Verify that a contianer by this name actually exists, and is running if [ -z \" $( docker ps -q -f name = $1 -f status = running ) \" ] ; then clangd --background-index else # Important part here is both the '-i' and the redirection of STDERR docker exec -i \" $1 \" /usr/bin/clangd --background-index 2 >/dev/null fi Then make sure that the above script is marked as executable, and in a runnable location on your system. On Linux , this mean that it lies somewhere on your $PATH , and has bee altered with chmod +x /path/to/cclangd . Then for your own client configuration via Neovim : -- Notably _not_ including `compile_commands.json`, as we want the entire project local root_pattern = lspconfig . util . root_pattern ( '.git' ) -- Might be cleaner to try to expose this as a pattern from `lspconfig.util`, as -- really it is just stolen from part of the `clangd` config local function project_name_to_container_name () -- Turn the name of the current file into the name of an expected container, assuming that -- the container running/building this file is named the same as the basename of the project -- that the file is in -- -- The name of the current buffer local bufname = vim . api . nvim_buf_get_name ( 0 ) -- Turned into a filename local filename = lspconfig . util . path . is_absolute ( bufname ) and bufname or lspconfig . util . path . join ( vim . loop . cwd (), bufname ) -- Then the directory of the project local project_dirname = root_pattern ( filename ) or lspconfig . util . path . dirname ( filename ) -- And finally perform what is essentially a `basename` on this directory return vim . fn . fnamemodify ( lspconfig . util . find_git_ancestor ( project_dirname ), ':t' ) end -- Note that via the `manager` from `server_per_root_dir_manager`, we'll get a separate instance -- of `clangd` as we switch between files, or even projects, inside of the right container -- -- Finally, we've formed the \"basename of a project\" to pass to our `cclangd` script, which will -- then look for a matching container, or run `clangd` normally if no matching container is found -- /path/to/my/project -- would look for a container named `project`, and `docker exec` a `clangd` instance there, etc. lspconfig . clangd . setup { cmd = { 'cclangd' , project_name_to_container_name (), }, } in addition to anything else you've already setup, like a custom on_attach function, etc. although the configuration additions above are all that is required. Additional clangd tips If you have a project that is setup in such a way that header files aren't installed to their standard locations on your system, each binary requires customized linking, etc. I'd highly recommend playing around with either compiledb or Bear . Both of these will generate compile_commands.json files, which are already recognized by the default clangd configuration in this repo. You can edit the cclangd script to redirect STDERR to a file if you are interested in debugging things, just change ... 2>/dev/null to whatever filepath you like; ... 2>/tmp/clangd.log , etc. The builtin client and the handling in this repo. do a great job of handling root paths and whatnot, but you might have to play around with the -w option of docker exec depending on how your project is setup. microsoft/vscode-languageserver-node based servers The vscode-languageserver-node based server expects a client to create it. The server expects the client to supply a process id (the process id of the client). When the server cannot detect the process id, it assumes the client has exited and that it should exit. Since containers do not share process ids with the host this results in the server exiting immediately. See here A way to handle this is using before_init and overriding initialize_params.process_id with a NIL (null) value as described here A less ideal way to deal with this is to have the host and container share process ids via the docker/podman run argument --pid=host as mentioned here . Do note this is considered an insecure practice by both Docker and Podman . man docker-run or man podman-run and /--pid= for more info.","title":"Running language servers in containers"},{"location":"help/containers/#running-language-servers-in-containers","text":"","title":"Running language servers in containers"},{"location":"help/containers/#preface","text":"Say you are developing code on a local install of a newer Linux distribution to get all the features offered there, but the code you are developing is intended to be run on a more legacy system. The libraries it needs to run, etc. all won't work on your host system, nor do you want them there, so you actually run and build the code inside of a Docker container. The process of getting each language server to work might be a bit nuanced, but this page will help you get started and help bring to light some troubles that might occur along the way. My creating of this page came out of a conversation with @mjlbach on the nvim-lspconfig Q&A thread , and is very much a first attempt. Feel free to add other tips for other language servers as the might not all be the same as clangd , or edit this page as you make improvements & find fixes.","title":"Preface"},{"location":"help/containers/#language-servers","text":"","title":"Language servers"},{"location":"help/containers/#clangd","text":"clangd is a C family language server, as the name implies. In order to get this working inside of a container, while Neovim runs on the host system, the setup might look something like the following: cclangd : A shell script wrapper to run clangd inside of the passed container, or normally if no matching container is found ##! /bin/sh ## The name of the container to run `clangd` in must be passed as the first and only argument ## ## This is based off the name of the buffer and the repository, etc. it is in, so even if we ## don't end up attaching to a container, it will still be passed [ \" $# \" -ne 1 ] && echo \"Container name required as first and only argument\" > & 2 && exit 1 ## Verify that a contianer by this name actually exists, and is running if [ -z \" $( docker ps -q -f name = $1 -f status = running ) \" ] ; then clangd --background-index else # Important part here is both the '-i' and the redirection of STDERR docker exec -i \" $1 \" /usr/bin/clangd --background-index 2 >/dev/null fi Then make sure that the above script is marked as executable, and in a runnable location on your system. On Linux , this mean that it lies somewhere on your $PATH , and has bee altered with chmod +x /path/to/cclangd . Then for your own client configuration via Neovim : -- Notably _not_ including `compile_commands.json`, as we want the entire project local root_pattern = lspconfig . util . root_pattern ( '.git' ) -- Might be cleaner to try to expose this as a pattern from `lspconfig.util`, as -- really it is just stolen from part of the `clangd` config local function project_name_to_container_name () -- Turn the name of the current file into the name of an expected container, assuming that -- the container running/building this file is named the same as the basename of the project -- that the file is in -- -- The name of the current buffer local bufname = vim . api . nvim_buf_get_name ( 0 ) -- Turned into a filename local filename = lspconfig . util . path . is_absolute ( bufname ) and bufname or lspconfig . util . path . join ( vim . loop . cwd (), bufname ) -- Then the directory of the project local project_dirname = root_pattern ( filename ) or lspconfig . util . path . dirname ( filename ) -- And finally perform what is essentially a `basename` on this directory return vim . fn . fnamemodify ( lspconfig . util . find_git_ancestor ( project_dirname ), ':t' ) end -- Note that via the `manager` from `server_per_root_dir_manager`, we'll get a separate instance -- of `clangd` as we switch between files, or even projects, inside of the right container -- -- Finally, we've formed the \"basename of a project\" to pass to our `cclangd` script, which will -- then look for a matching container, or run `clangd` normally if no matching container is found -- /path/to/my/project -- would look for a container named `project`, and `docker exec` a `clangd` instance there, etc. lspconfig . clangd . setup { cmd = { 'cclangd' , project_name_to_container_name (), }, } in addition to anything else you've already setup, like a custom on_attach function, etc. although the configuration additions above are all that is required.","title":"clangd"},{"location":"help/containers/#additional-clangd-tips","text":"If you have a project that is setup in such a way that header files aren't installed to their standard locations on your system, each binary requires customized linking, etc. I'd highly recommend playing around with either compiledb or Bear . Both of these will generate compile_commands.json files, which are already recognized by the default clangd configuration in this repo. You can edit the cclangd script to redirect STDERR to a file if you are interested in debugging things, just change ... 2>/dev/null to whatever filepath you like; ... 2>/tmp/clangd.log , etc. The builtin client and the handling in this repo. do a great job of handling root paths and whatnot, but you might have to play around with the -w option of docker exec depending on how your project is setup.","title":"Additional clangd tips"},{"location":"help/containers/#microsoftvscode-languageserver-node-based-servers","text":"The vscode-languageserver-node based server expects a client to create it. The server expects the client to supply a process id (the process id of the client). When the server cannot detect the process id, it assumes the client has exited and that it should exit. Since containers do not share process ids with the host this results in the server exiting immediately. See here A way to handle this is using before_init and overriding initialize_params.process_id with a NIL (null) value as described here A less ideal way to deal with this is to have the host and container share process ids via the docker/podman run argument --pid=host as mentioned here . Do note this is considered an insecure practice by both Docker and Podman . man docker-run or man podman-run and /--pid= for more info.","title":"microsoft/vscode-languageserver-node based servers"},{"location":"help/customization/","text":"UI Customization Note: these instruction assume Neovim 0.6.0 or later! Borders Floating windows with borders are built-into the neovim core handler. The borders can be styled by passing in a character and highlight group. Highlight groups must be set with an autocmd to avoid being overwritten by your colorscheme. vim . cmd [[autocmd ColorScheme * highlight NormalFloat guibg=#1f2335]] vim . cmd [[autocmd ColorScheme * highlight FloatBorder guifg=white guibg=#1f2335]] local border = { { \"\ud83e\udf7d\" , \"FloatBorder\" }, { \"\u2594\" , \"FloatBorder\" }, { \"\ud83e\udf7e\" , \"FloatBorder\" }, { \"\u2595\" , \"FloatBorder\" }, { \"\ud83e\udf7f\" , \"FloatBorder\" }, { \"\u2581\" , \"FloatBorder\" }, { \"\ud83e\udf7c\" , \"FloatBorder\" }, { \"\u258f\" , \"FloatBorder\" }, } -- LSP settings (for overriding per client) local handlers = { [ \"textDocument/hover\" ] = vim . lsp . with ( vim . lsp . handlers . hover , { border = border }), [ \"textDocument/signatureHelp\" ] = vim . lsp . with ( vim . lsp . handlers . signature_help , { border = border }), } -- Do not forget to use the on_attach function require 'lspconfig' . myserver . setup { handlers = handlers } -- To instead override globally local orig_util_open_floating_preview = vim . lsp . util . open_floating_preview function vim . lsp . util . open_floating_preview ( contents , syntax , opts , ...) opts = opts or {} opts . border = opts . border or border return orig_util_open_floating_preview ( contents , syntax , opts , ...) end require 'lspconfig' . myservertwo . setup {} Completion kinds local M = {} M . icons = { Class = \"\ue0cd \" , Color = \"\ue22b \" , Constant = \"\ue22c \" , Constructor = \"\ue20f \" , Enum = \"\u4e86 \" , EnumMember = \"\uf15d \" , Field = \"\uf635 \" , File = \"\uf15b \" , Folder = \"\uf115 \" , Function = \"\uf09a \" , Interface = \"\ufc2e \" , Keyword = \"\uf805 \" , Method = \"\u0192 \" , Module = \"\uf8d6 \" , Property = \"\ue624 \" , Snippet = \"\ufb0c \" , Struct = \"\uf0ca \" , Text = \"\ue612 \" , Unit = \"\uf475 \" , Value = \"\uf89f \" , Variable = \"\ue79b \" , } function M . setup () local kinds = vim . lsp . protocol . CompletionItemKind for i , kind in ipairs ( kinds ) do kinds [ i ] = M . icons [ kind ] or kind end end return M Customizing how diagnostics are displayed You can configure diagnostic options globally. See :help vim.diagnostic.config for more advanced customization options. vim . diagnostic . config ({ virtual_text = true , signs = true , underline = true , update_in_insert = false , severity_sort = false , }) Note: With the default settings, you will not see updated diagnostics until you leave insert mode. Set update_in_insert = true if you want diagnostics to update while in insert mode . Change diagnostic symbols in the sign column (gutter) local signs = { Error = \"\uf659 \" , Warn = \"\uf529 \" , Hint = \"\uf835 \" , Info = \"\uf449 \" } for type , icon in pairs ( signs ) do local hl = \"DiagnosticSign\" .. type vim . fn . sign_define ( hl , { text = icon , texthl = hl , numhl = hl }) end Print diagnostics to message area function PrintDiagnostics ( opts , bufnr , line_nr , client_id ) bufnr = bufnr or 0 line_nr = line_nr or ( vim . api . nvim_win_get_cursor ( 0 )[ 1 ] - 1 ) opts = opts or {[ 'lnum' ] = line_nr } local line_diagnostics = vim . diagnostic . get ( bufnr , opts ) if vim . tbl_isempty ( line_diagnostics ) then return end local diagnostic_message = \"\" for i , diagnostic in ipairs ( line_diagnostics ) do diagnostic_message = diagnostic_message .. string.format ( \"%d: %s\" , i , diagnostic . message or \"\" ) print ( diagnostic_message ) if i ~= # line_diagnostics then diagnostic_message = diagnostic_message .. \" \\n \" end end vim . api . nvim_echo ({{ diagnostic_message , \"Normal\" }}, false , {}) end vim . cmd [[ autocmd CursorHold * lua PrintDiagnostics() ]] Show line diagnostics automatically in hover window -- You will likely want to reduce updatetime which affects CursorHold -- note: this setting is global and should be set only once vim . o . updatetime = 250 vim . cmd [[autocmd CursorHold,CursorHoldI * lua vim.diagnostic.open_float(nil, {focus=false})]] For diagnostics for specific cursor position vim . cmd [[autocmd CursorHold,CursorHoldI * lua vim.diagnostic.open_float(nil, {focus=false, scope=\"cursor\"})]] Filter by severity in signcolum See https://www.reddit.com/r/neovim/comments/mvhfw7/can_built_in_lsp_diagnostics_be_limited_to_show_a/ Go-to definition in a split window local function goto_definition ( split_cmd ) local util = vim . lsp . util local log = require ( \"vim.lsp.log\" ) local api = vim . api -- note, this handler style is for neovim 0.5.1/0.6, if on 0.5, call with function(_, method, result) local handler = function ( _ , result , ctx ) if result == nil or vim . tbl_isempty ( result ) then local _ = log . info () and log . info ( ctx . method , \"No location found\" ) return nil end if split_cmd then vim . cmd ( split_cmd ) end if vim . tbl_islist ( result ) then util . jump_to_location ( result [ 1 ]) if # result > 1 then util . set_qflist ( util . locations_to_items ( result )) api . nvim_command ( \"copen\" ) api . nvim_command ( \"wincmd p\" ) end else util . jump_to_location ( result ) end end return handler end vim . lsp . handlers [ \"textDocument/definition\" ] = goto_definition ( 'split' ) Show source in diagnostics vim . diagnostic . config ({ virtual_text = { source = \"always\" , -- Or \"if_many\" }, float = { source = \"always\" , -- Or \"if_many\" }, }) Change prefix/character preceding the diagnostics' virtual text By default, this character is a square icon (\u25a0). vim . diagnostic . config ({ virtual_text = { prefix = '\u25a0' , -- Could be '\u25cf', '\u258e', 'x' } }) Highlight line number instead of having icons in sign column See the properties of the signs with sign list . vim . cmd [[ highlight DiagnosticLineNrError guibg=#51202A guifg=#FF0000 gui=bold highlight DiagnosticLineNrWarn guibg=#51412A guifg=#FFA500 gui=bold highlight DiagnosticLineNrInfo guibg=#1E535D guifg=#00FFFF gui=bold highlight DiagnosticLineNrHint guibg=#1E205D guifg=#0000FF gui=bold sign define DiagnosticSignError text= texthl=DiagnosticSignError linehl= numhl=DiagnosticLineNrError sign define DiagnosticSignWarn text= texthl=DiagnosticSignWarn linehl= numhl=DiagnosticLineNrWarn sign define DiagnosticSignInfo text= texthl=DiagnosticSignInfo linehl= numhl=DiagnosticLineNrInfo sign define DiagnosticSignHint text= texthl=DiagnosticSignHint linehl= numhl=DiagnosticLineNrHint ]] Highlight symbol under cursor Add the following to your on_attach (this allows checking server capabilities to avoid calling invalid commands. if client . resolved_capabilities . document_highlight then vim . cmd [[ hi LspReferenceRead cterm=bold ctermbg=red guibg=LightYellow hi LspReferenceText cterm=bold ctermbg=red guibg=LightYellow hi LspReferenceWrite cterm=bold ctermbg=red guibg=LightYellow augroup lsp_document_highlight autocmd! * <buffer> autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight() autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references() augroup END ]] end","title":"UI Customization"},{"location":"help/customization/#ui-customization","text":"Note: these instruction assume Neovim 0.6.0 or later!","title":"UI Customization"},{"location":"help/customization/#borders","text":"Floating windows with borders are built-into the neovim core handler. The borders can be styled by passing in a character and highlight group. Highlight groups must be set with an autocmd to avoid being overwritten by your colorscheme. vim . cmd [[autocmd ColorScheme * highlight NormalFloat guibg=#1f2335]] vim . cmd [[autocmd ColorScheme * highlight FloatBorder guifg=white guibg=#1f2335]] local border = { { \"\ud83e\udf7d\" , \"FloatBorder\" }, { \"\u2594\" , \"FloatBorder\" }, { \"\ud83e\udf7e\" , \"FloatBorder\" }, { \"\u2595\" , \"FloatBorder\" }, { \"\ud83e\udf7f\" , \"FloatBorder\" }, { \"\u2581\" , \"FloatBorder\" }, { \"\ud83e\udf7c\" , \"FloatBorder\" }, { \"\u258f\" , \"FloatBorder\" }, } -- LSP settings (for overriding per client) local handlers = { [ \"textDocument/hover\" ] = vim . lsp . with ( vim . lsp . handlers . hover , { border = border }), [ \"textDocument/signatureHelp\" ] = vim . lsp . with ( vim . lsp . handlers . signature_help , { border = border }), } -- Do not forget to use the on_attach function require 'lspconfig' . myserver . setup { handlers = handlers } -- To instead override globally local orig_util_open_floating_preview = vim . lsp . util . open_floating_preview function vim . lsp . util . open_floating_preview ( contents , syntax , opts , ...) opts = opts or {} opts . border = opts . border or border return orig_util_open_floating_preview ( contents , syntax , opts , ...) end require 'lspconfig' . myservertwo . setup {}","title":"Borders"},{"location":"help/customization/#completion-kinds","text":"local M = {} M . icons = { Class = \"\ue0cd \" , Color = \"\ue22b \" , Constant = \"\ue22c \" , Constructor = \"\ue20f \" , Enum = \"\u4e86 \" , EnumMember = \"\uf15d \" , Field = \"\uf635 \" , File = \"\uf15b \" , Folder = \"\uf115 \" , Function = \"\uf09a \" , Interface = \"\ufc2e \" , Keyword = \"\uf805 \" , Method = \"\u0192 \" , Module = \"\uf8d6 \" , Property = \"\ue624 \" , Snippet = \"\ufb0c \" , Struct = \"\uf0ca \" , Text = \"\ue612 \" , Unit = \"\uf475 \" , Value = \"\uf89f \" , Variable = \"\ue79b \" , } function M . setup () local kinds = vim . lsp . protocol . CompletionItemKind for i , kind in ipairs ( kinds ) do kinds [ i ] = M . icons [ kind ] or kind end end return M","title":"Completion kinds"},{"location":"help/customization/#customizing-how-diagnostics-are-displayed","text":"You can configure diagnostic options globally. See :help vim.diagnostic.config for more advanced customization options. vim . diagnostic . config ({ virtual_text = true , signs = true , underline = true , update_in_insert = false , severity_sort = false , }) Note: With the default settings, you will not see updated diagnostics until you leave insert mode. Set update_in_insert = true if you want diagnostics to update while in insert mode .","title":"Customizing how diagnostics are displayed"},{"location":"help/customization/#change-diagnostic-symbols-in-the-sign-column-gutter","text":"local signs = { Error = \"\uf659 \" , Warn = \"\uf529 \" , Hint = \"\uf835 \" , Info = \"\uf449 \" } for type , icon in pairs ( signs ) do local hl = \"DiagnosticSign\" .. type vim . fn . sign_define ( hl , { text = icon , texthl = hl , numhl = hl }) end","title":"Change diagnostic symbols in the sign column (gutter)"},{"location":"help/customization/#print-diagnostics-to-message-area","text":"function PrintDiagnostics ( opts , bufnr , line_nr , client_id ) bufnr = bufnr or 0 line_nr = line_nr or ( vim . api . nvim_win_get_cursor ( 0 )[ 1 ] - 1 ) opts = opts or {[ 'lnum' ] = line_nr } local line_diagnostics = vim . diagnostic . get ( bufnr , opts ) if vim . tbl_isempty ( line_diagnostics ) then return end local diagnostic_message = \"\" for i , diagnostic in ipairs ( line_diagnostics ) do diagnostic_message = diagnostic_message .. string.format ( \"%d: %s\" , i , diagnostic . message or \"\" ) print ( diagnostic_message ) if i ~= # line_diagnostics then diagnostic_message = diagnostic_message .. \" \\n \" end end vim . api . nvim_echo ({{ diagnostic_message , \"Normal\" }}, false , {}) end vim . cmd [[ autocmd CursorHold * lua PrintDiagnostics() ]]","title":"Print diagnostics to message area"},{"location":"help/customization/#show-line-diagnostics-automatically-in-hover-window","text":"-- You will likely want to reduce updatetime which affects CursorHold -- note: this setting is global and should be set only once vim . o . updatetime = 250 vim . cmd [[autocmd CursorHold,CursorHoldI * lua vim.diagnostic.open_float(nil, {focus=false})]] For diagnostics for specific cursor position vim . cmd [[autocmd CursorHold,CursorHoldI * lua vim.diagnostic.open_float(nil, {focus=false, scope=\"cursor\"})]]","title":"Show line diagnostics automatically in hover window"},{"location":"help/customization/#filter-by-severity-in-signcolum","text":"See https://www.reddit.com/r/neovim/comments/mvhfw7/can_built_in_lsp_diagnostics_be_limited_to_show_a/","title":"Filter by severity in signcolum"},{"location":"help/customization/#go-to-definition-in-a-split-window","text":"local function goto_definition ( split_cmd ) local util = vim . lsp . util local log = require ( \"vim.lsp.log\" ) local api = vim . api -- note, this handler style is for neovim 0.5.1/0.6, if on 0.5, call with function(_, method, result) local handler = function ( _ , result , ctx ) if result == nil or vim . tbl_isempty ( result ) then local _ = log . info () and log . info ( ctx . method , \"No location found\" ) return nil end if split_cmd then vim . cmd ( split_cmd ) end if vim . tbl_islist ( result ) then util . jump_to_location ( result [ 1 ]) if # result > 1 then util . set_qflist ( util . locations_to_items ( result )) api . nvim_command ( \"copen\" ) api . nvim_command ( \"wincmd p\" ) end else util . jump_to_location ( result ) end end return handler end vim . lsp . handlers [ \"textDocument/definition\" ] = goto_definition ( 'split' )","title":"Go-to definition in a split window"},{"location":"help/customization/#show-source-in-diagnostics","text":"vim . diagnostic . config ({ virtual_text = { source = \"always\" , -- Or \"if_many\" }, float = { source = \"always\" , -- Or \"if_many\" }, })","title":"Show source in diagnostics"},{"location":"help/customization/#change-prefixcharacter-preceding-the-diagnostics-virtual-text","text":"By default, this character is a square icon (\u25a0). vim . diagnostic . config ({ virtual_text = { prefix = '\u25a0' , -- Could be '\u25cf', '\u258e', 'x' } })","title":"Change prefix/character preceding the diagnostics' virtual text"},{"location":"help/customization/#highlight-line-number-instead-of-having-icons-in-sign-column","text":"See the properties of the signs with sign list . vim . cmd [[ highlight DiagnosticLineNrError guibg=#51202A guifg=#FF0000 gui=bold highlight DiagnosticLineNrWarn guibg=#51412A guifg=#FFA500 gui=bold highlight DiagnosticLineNrInfo guibg=#1E535D guifg=#00FFFF gui=bold highlight DiagnosticLineNrHint guibg=#1E205D guifg=#0000FF gui=bold sign define DiagnosticSignError text= texthl=DiagnosticSignError linehl= numhl=DiagnosticLineNrError sign define DiagnosticSignWarn text= texthl=DiagnosticSignWarn linehl= numhl=DiagnosticLineNrWarn sign define DiagnosticSignInfo text= texthl=DiagnosticSignInfo linehl= numhl=DiagnosticLineNrInfo sign define DiagnosticSignHint text= texthl=DiagnosticSignHint linehl= numhl=DiagnosticLineNrHint ]]","title":"Highlight line number instead of having icons in sign column"},{"location":"help/customization/#highlight-symbol-under-cursor","text":"Add the following to your on_attach (this allows checking server capabilities to avoid calling invalid commands. if client . resolved_capabilities . document_highlight then vim . cmd [[ hi LspReferenceRead cterm=bold ctermbg=red guibg=LightYellow hi LspReferenceText cterm=bold ctermbg=red guibg=LightYellow hi LspReferenceWrite cterm=bold ctermbg=red guibg=LightYellow augroup lsp_document_highlight autocmd! * <buffer> autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight() autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references() augroup END ]] end","title":"Highlight symbol under cursor"},{"location":"help/init/","text":"Complete init.lua example For some users, following the readme may still prove a barrier to entry. See the kickstart.nvim repo for a complete example including snippets and autocompletion integration.","title":"Complete init.lua example"},{"location":"help/init/#complete-initlua-example","text":"For some users, following the readme may still prove a barrier to entry. See the kickstart.nvim repo for a complete example including snippets and autocompletion integration.","title":"Complete init.lua example"},{"location":"help/local/","text":"Project local settings Before doing this, please familiarize yourself with the risk of automatically running project local code in the lua interpreter. Local settings can be configured by enabling the exrc option with set exrc in your init.vim and creating a .nvimrc file in the project's root directory. If neovim is launched in the same directory as .nvimrc , it will evaluate your user configuration first, followed by the local configuration. An example .nvimrc might be as follows lua << EOF local nvim_lsp = require ( 'lspconfig' ) nvim_lsp.rust_analyzer.setup { root_dir = function () return vim .fn.getcwd () end } EOF Be aware, after enabling exrc, neovim will execute any .nvimrc or .exrc owned by your user, including git clones. If the only thing you care about configuring is the language server's settings, you might be able to use the on_init hook and the workspace/didChangeConfiguration notification: local nvim_lsp = require ( 'lspconfig' ) nvim_lsp . rust_analyzer . setup { on_init = function ( client ) client . config . settings . xxx = \"yyyy\" client . notify ( \"workspace/didChangeConfiguration\" ) return true end }","title":"Project local settings"},{"location":"help/local/#project-local-settings","text":"Before doing this, please familiarize yourself with the risk of automatically running project local code in the lua interpreter. Local settings can be configured by enabling the exrc option with set exrc in your init.vim and creating a .nvimrc file in the project's root directory. If neovim is launched in the same directory as .nvimrc , it will evaluate your user configuration first, followed by the local configuration. An example .nvimrc might be as follows lua << EOF local nvim_lsp = require ( 'lspconfig' ) nvim_lsp.rust_analyzer.setup { root_dir = function () return vim .fn.getcwd () end } EOF Be aware, after enabling exrc, neovim will execute any .nvimrc or .exrc owned by your user, including git clones. If the only thing you care about configuring is the language server's settings, you might be able to use the on_init hook and the workspace/didChangeConfiguration notification: local nvim_lsp = require ( 'lspconfig' ) nvim_lsp . rust_analyzer . setup { on_init = function ( client ) client . config . settings . xxx = \"yyyy\" client . notify ( \"workspace/didChangeConfiguration\" ) return true end }","title":"Project local settings"},{"location":"help/plugins/","text":"Language specific plugins Nvim-lspconfig is meant to implement basic configuration and settings for most language servers. The beauty of the language server protocol, is most language servers should expose their entire functionality without any special per-server treatment. Some servers send requests outside of the language server protocol specification to extend the functionality of the protocol. Eclipse JDTLS is one such example. An ecosystem of per language plugins is forming around neovim's core implementation to provide an enhanced experience compared to nvim-lspconfig. We recommend you install these plugins if you are using the language in question. Here are some recommendations: nvim-jdtls (Java's Eclipse JDT ) nvim-metals (Scala's Metals ) flutter-tools.nvim ( Flutter ) rust-tools.nvim (Rust's rust-analyzer ) lean.nvim ( Lean ) SchemaStore.nvim (jsonls): Note, this provides schemas for jsonls but still depends on lspconfig. grammar-guard.nvim (ltex-ls) omnisharp-extended-lsp.nvim Add support for decompiling.","title":"Language specific plugins"},{"location":"help/plugins/#language-specific-plugins","text":"Nvim-lspconfig is meant to implement basic configuration and settings for most language servers. The beauty of the language server protocol, is most language servers should expose their entire functionality without any special per-server treatment. Some servers send requests outside of the language server protocol specification to extend the functionality of the protocol. Eclipse JDTLS is one such example. An ecosystem of per language plugins is forming around neovim's core implementation to provide an enhanced experience compared to nvim-lspconfig. We recommend you install these plugins if you are using the language in question. Here are some recommendations: nvim-jdtls (Java's Eclipse JDT ) nvim-metals (Scala's Metals ) flutter-tools.nvim ( Flutter ) rust-tools.nvim (Rust's rust-analyzer ) lean.nvim ( Lean ) SchemaStore.nvim (jsonls): Note, this provides schemas for jsonls but still depends on lspconfig. grammar-guard.nvim (ltex-ls) omnisharp-extended-lsp.nvim Add support for decompiling.","title":"Language specific plugins"},{"location":"help/remote/","text":"Connecting to remote language servers See: https://github.com/chipsenkbeil/distant.nvim","title":"Connecting to remote language servers"},{"location":"help/remote/#connecting-to-remote-language-servers","text":"See: https://github.com/chipsenkbeil/distant.nvim","title":"Connecting to remote language servers"},{"location":"help/setup/","text":"Understanding setup {} The principal way of enabling a language server with lspconfig is the setup {} call. Setup has two primary functions: * Pass configuration options that are cached for a given language server (overriding the defaults) * Watch for buffers of a filetype that match a configured language server, launch, and attach a language server to said buffer (using a FileType autocommand) setup should only be invoked once per language server. It takes the same {config} table as :help vim.lsp.start_client() , as it's main role is to cache and pass this table to start_client() . In addition to the keys shared with start_client , it takes the following keys: * root_dir * name * filetypes * autostart * on_new_config The main keys users will (optionally) pass into setup to override the defaults are settings init_options , and on_attach . settings The settings table is sent to the language server via a workspace/didChangeConfiguration notification from the client. lspconfig sends this notification for you automatically during initialization of the language server using the cached settings table you pass to setup{} . In most cases, the default settings are correct. If you would like to override the settings you can see available options in server_configurations.md , these are auto-generated from the package.json used by the vscode plugin leveraging the language server, if available. These are the corresponding entries of the nested settings table that you must put in settings to override that option. For pyright as an example, the pyright.disableLanguageServices option listed in the drop down settings menu in server_configurations.md can be sent as follows: require ( 'lspconfig' ). pyright . setup { settings = { pyright = { disableLanguageServices = true , }, }, } init_options init_options corresponds to initializationOptions in the initialize request . These options may overlap with settings depending on the server, and less frequently need to be configured by the user. on_attach The purpose of the on_attach callback is to run a lua callback after the language server successfully attaches to a given buffer. This lets you conditionally map keybindings, enable autocompletion, set buffer options, etc. based on whether or not the language server is active in your buffer. Users typically use this to map keybindings to the client as seen in the example keybindings in the readme.","title":"Understanding `setup {}`"},{"location":"help/setup/#understanding-setup","text":"The principal way of enabling a language server with lspconfig is the setup {} call. Setup has two primary functions: * Pass configuration options that are cached for a given language server (overriding the defaults) * Watch for buffers of a filetype that match a configured language server, launch, and attach a language server to said buffer (using a FileType autocommand) setup should only be invoked once per language server. It takes the same {config} table as :help vim.lsp.start_client() , as it's main role is to cache and pass this table to start_client() . In addition to the keys shared with start_client , it takes the following keys: * root_dir * name * filetypes * autostart * on_new_config The main keys users will (optionally) pass into setup to override the defaults are settings init_options , and on_attach .","title":"Understanding setup {}"},{"location":"help/setup/#settings","text":"The settings table is sent to the language server via a workspace/didChangeConfiguration notification from the client. lspconfig sends this notification for you automatically during initialization of the language server using the cached settings table you pass to setup{} . In most cases, the default settings are correct. If you would like to override the settings you can see available options in server_configurations.md , these are auto-generated from the package.json used by the vscode plugin leveraging the language server, if available. These are the corresponding entries of the nested settings table that you must put in settings to override that option. For pyright as an example, the pyright.disableLanguageServices option listed in the drop down settings menu in server_configurations.md can be sent as follows: require ( 'lspconfig' ). pyright . setup { settings = { pyright = { disableLanguageServices = true , }, }, }","title":"settings"},{"location":"help/setup/#init_options","text":"init_options corresponds to initializationOptions in the initialize request . These options may overlap with settings depending on the server, and less frequently need to be configured by the user.","title":"init_options"},{"location":"help/setup/#on_attach","text":"The purpose of the on_attach callback is to run a lua callback after the language server successfully attaches to a given buffer. This lets you conditionally map keybindings, enable autocompletion, set buffer options, etc. based on whether or not the language server is active in your buffer. Users typically use this to map keybindings to the client as seen in the example keybindings in the readme.","title":"on_attach"},{"location":"help/snippets/","text":"Snippets Snippet support can be easily added to your config by installing an autocompletion plugin (such as nvim-cmp ) and a snippets plugins (such as LuaSnip ): To enable snippets support for a given server with LuaSnip, the main steps are to: * override the capabilities we send to a language server to let it know we support snippets * set up your snippets source, and the autocompletion plugin to acknowledge the snippets source * map the confirm and expand snippets keybinds. nvim-cmp and luasnip local use = require ( 'packer' ). use require ( 'packer' ). startup ( function () use 'neovim/nvim-lspconfig' -- Collection of configurations for built-in LSP client use 'hrsh7th/nvim-cmp' -- Autocompletion plugin use 'hrsh7th/cmp-nvim-lsp' -- LSP source for nvim-cmp use 'saadparwaiz1/cmp_luasnip' -- Snippets source for nvim-cmp use 'L3MON4D3/LuaSnip' -- Snippets plugin end ) -- Add additional capabilities supported by nvim-cmp local capabilities = vim . lsp . protocol . make_client_capabilities () capabilities = require ( 'cmp_nvim_lsp' ). update_capabilities ( capabilities ) local lspconfig = require ( 'lspconfig' ) -- Enable some language servers with the additional completion capabilities offered by nvim-cmp local servers = { 'clangd' , 'rust_analyzer' , 'pyright' , 'tsserver' } for _ , lsp in ipairs ( servers ) do lspconfig [ lsp ]. setup { -- on_attach = my_custom_on_attach, capabilities = capabilities , } end -- luasnip setup local luasnip = require 'luasnip' -- nvim-cmp setup local cmp = require 'cmp' cmp . setup { snippet = { expand = function ( args ) require ( 'luasnip' ). lsp_expand ( args . body ) end , }, mapping = { [ '<C-p>' ] = cmp . mapping . select_prev_item (), [ '<C-n>' ] = cmp . mapping . select_next_item (), [ '<C-d>' ] = cmp . mapping . scroll_docs ( - 4 ), [ '<C-f>' ] = cmp . mapping . scroll_docs ( 4 ), [ '<C-Space>' ] = cmp . mapping . complete (), [ '<C-e>' ] = cmp . mapping . close (), [ '<CR>' ] = cmp . mapping . confirm { behavior = cmp . ConfirmBehavior . Replace , select = true , }, [ '<Tab>' ] = function ( fallback ) if cmp . visible () then cmp . select_next_item () elseif luasnip . expand_or_jumpable () then vim . fn . feedkeys ( vim . api . nvim_replace_termcodes ( '<Plug>luasnip-expand-or-jump' , true , true , true ), '' ) else fallback () end end , [ '<S-Tab>' ] = function ( fallback ) if cmp . visible () then cmp . select_prev_item () elseif luasnip . jumpable ( - 1 ) then vim . fn . feedkeys ( vim . api . nvim_replace_termcodes ( '<Plug>luasnip-jump-prev' , true , true , true ), '' ) else fallback () end end , }, sources = { { name = 'nvim_lsp' }, { name = 'luasnip' }, }, } coq_nvim local use = require ( 'packer' ). use require ( 'packer' ). startup ( function () use 'neovim/nvim-lspconfig' -- Collection of configurations for built-in LSP client use 'ms-jpq/coq_nvim' use 'ms-jpq/coq.artifacts' use 'ms-jpq/coq.thirdparty' end ) local lspconfig = require ( 'lspconfig' ) -- Automatically start coq vim . g . coq_settings = { auto_start = true } -- Enable some language servers with the additional completion capabilities offered by nvim-cmp local servers = { 'clangd' , 'rust_analyzer' , 'pyright' , 'tsserver' } for _ , lsp in ipairs ( servers ) do lspconfig [ lsp ]. setup ( require ( 'coq' ). lsp_ensure_capabilities ({ -- on_attach = my_custom_on_attach, })) end","title":"Snippets"},{"location":"help/snippets/#snippets","text":"Snippet support can be easily added to your config by installing an autocompletion plugin (such as nvim-cmp ) and a snippets plugins (such as LuaSnip ): To enable snippets support for a given server with LuaSnip, the main steps are to: * override the capabilities we send to a language server to let it know we support snippets * set up your snippets source, and the autocompletion plugin to acknowledge the snippets source * map the confirm and expand snippets keybinds.","title":"Snippets"},{"location":"help/snippets/#nvim-cmp-and-luasnip","text":"local use = require ( 'packer' ). use require ( 'packer' ). startup ( function () use 'neovim/nvim-lspconfig' -- Collection of configurations for built-in LSP client use 'hrsh7th/nvim-cmp' -- Autocompletion plugin use 'hrsh7th/cmp-nvim-lsp' -- LSP source for nvim-cmp use 'saadparwaiz1/cmp_luasnip' -- Snippets source for nvim-cmp use 'L3MON4D3/LuaSnip' -- Snippets plugin end ) -- Add additional capabilities supported by nvim-cmp local capabilities = vim . lsp . protocol . make_client_capabilities () capabilities = require ( 'cmp_nvim_lsp' ). update_capabilities ( capabilities ) local lspconfig = require ( 'lspconfig' ) -- Enable some language servers with the additional completion capabilities offered by nvim-cmp local servers = { 'clangd' , 'rust_analyzer' , 'pyright' , 'tsserver' } for _ , lsp in ipairs ( servers ) do lspconfig [ lsp ]. setup { -- on_attach = my_custom_on_attach, capabilities = capabilities , } end -- luasnip setup local luasnip = require 'luasnip' -- nvim-cmp setup local cmp = require 'cmp' cmp . setup { snippet = { expand = function ( args ) require ( 'luasnip' ). lsp_expand ( args . body ) end , }, mapping = { [ '<C-p>' ] = cmp . mapping . select_prev_item (), [ '<C-n>' ] = cmp . mapping . select_next_item (), [ '<C-d>' ] = cmp . mapping . scroll_docs ( - 4 ), [ '<C-f>' ] = cmp . mapping . scroll_docs ( 4 ), [ '<C-Space>' ] = cmp . mapping . complete (), [ '<C-e>' ] = cmp . mapping . close (), [ '<CR>' ] = cmp . mapping . confirm { behavior = cmp . ConfirmBehavior . Replace , select = true , }, [ '<Tab>' ] = function ( fallback ) if cmp . visible () then cmp . select_next_item () elseif luasnip . expand_or_jumpable () then vim . fn . feedkeys ( vim . api . nvim_replace_termcodes ( '<Plug>luasnip-expand-or-jump' , true , true , true ), '' ) else fallback () end end , [ '<S-Tab>' ] = function ( fallback ) if cmp . visible () then cmp . select_prev_item () elseif luasnip . jumpable ( - 1 ) then vim . fn . feedkeys ( vim . api . nvim_replace_termcodes ( '<Plug>luasnip-jump-prev' , true , true , true ), '' ) else fallback () end end , }, sources = { { name = 'nvim_lsp' }, { name = 'luasnip' }, }, }","title":"nvim-cmp and luasnip"},{"location":"help/snippets/#coq_nvim","text":"local use = require ( 'packer' ). use require ( 'packer' ). startup ( function () use 'neovim/nvim-lspconfig' -- Collection of configurations for built-in LSP client use 'ms-jpq/coq_nvim' use 'ms-jpq/coq.artifacts' use 'ms-jpq/coq.thirdparty' end ) local lspconfig = require ( 'lspconfig' ) -- Automatically start coq vim . g . coq_settings = { auto_start = true } -- Enable some language servers with the additional completion capabilities offered by nvim-cmp local servers = { 'clangd' , 'rust_analyzer' , 'pyright' , 'tsserver' } for _ , lsp in ipairs ( servers ) do lspconfig [ lsp ]. setup ( require ( 'coq' ). lsp_ensure_capabilities ({ -- on_attach = my_custom_on_attach, })) end","title":"coq_nvim"},{"location":"help/tips/","text":"User contributed tips We list here some snippets to customize the LSP experience. These are too complex/arbitrary to be enabled by default. Range Formatting With a Motion If your language server supports formatting a range of text (as opposed to a whole file), you can use this snippet to map a key to formatting a range with a motion. For example, with this code, gmip in normal mode will format a paragraph. function format_range_operator () local old_func = vim . go . operatorfunc _G . op_func_formatting = function () local start = vim . api . nvim_buf_get_mark ( 0 , '[' ) local finish = vim . api . nvim_buf_get_mark ( 0 , ']' ) vim . lsp . buf . range_formatting ({}, start , finish ) vim . go . operatorfunc = old_func _G . op_func_formatting = nil end vim . go . operatorfunc = 'v:lua.op_func_formatting' vim . api . nvim_feedkeys ( 'g@' , 'n' , false ) end vim . api . nvim_set_keymap ( \"n\" , \"gm\" , \"<cmd>lua format_range_operator()<CR>\" , { noremap = true }) See https://github.com/neovim/neovim/issues/14680 for context. Peek Definition To open the target of a textDocument/definition request in a floating window (as in VS Code's \"Peek Definition\"), you can use the following snippet: local function preview_location_callback ( _ , result ) if result == nil or vim . tbl_isempty ( result ) then return nil end vim . lsp . util . preview_location ( result [ 1 ]) end function PeekDefinition () local params = vim . lsp . util . make_position_params () return vim . lsp . buf_request ( 0 , 'textDocument/definition' , params , preview_location_callback ) end If the server supports LocationLink , this will show the full target range (e.g., function body) of the definition. Other requests like textDocument/declaration can be \"peeked\" analogously. Clangd SwitchSourceHeader nvim-lspconfig offers the ClangdSwitchSourceHeader command by default. It simply replaces the current buffer with the corresponding file. If you'd like to open the corresponding file in a new split/vsplit, you can add such commands easily: local function switch_source_header_splitcmd ( bufnr , splitcmd ) bufnr = require 'lspconfig' . util . validate_bufnr ( bufnr ) local clangd_client = require 'lspconfig' . util . get_active_client_by_name ( bufnr , 'clangd' ) local params = { uri = vim . uri_from_bufnr ( bufnr )} if clangd_client then clangd_client . request ( \"textDocument/switchSourceHeader\" , params , function ( err , result ) if err then error ( tostring ( err )) end if not result then print ( \"Corresponding file can\u2019t be determined\" ) return end vim . api . nvim_command ( splitcmd .. \" \" .. vim . uri_to_fname ( result )) end , bufnr ) else print 'textDocument/switchSourceHeader is not supported by the clangd server active on the current buffer' end end require 'lspconfig' . clangd . setup { -----snip------ commands = { ClangdSwitchSourceHeader = { function () switch_source_header_splitcmd ( 0 , \"edit\" ) end ; description = \"Open source/header in current buffer\" ; }, ClangdSwitchSourceHeaderVSplit = { function () switch_source_header_splitcmd ( 0 , \"vsplit\" ) end ; description = \"Open source/header in a new vsplit\" ; }, ClangdSwitchSourceHeaderSplit = { function () switch_source_header_splitcmd ( 0 , \"split\" ) end ; description = \"Open source/header in a new split\" ; } } } The commands ClangdSwitchSourceHeader* are available like normal vim commands, that is: nnoremap <leader>h :ClangdSwitchSourceHeaderVSplit<CR> diagnosticls Auto generated config link eslint The following is an example of integrating with eslint, it uses the .eslinrc.js file to identify the project root, and then uses the instance of eslint available in node_modules : local util = require \"lspconfig\" . util require 'lspconfig' . diagnosticls . setup { filetypes = { \"javascript\" , \"typescript\" }, root_dir = function ( fname ) return util . root_pattern ( \"tsconfig.json\" )( fname ) or util . root_pattern ( \".eslintrc.js\" )( fname ); end , init_options = { linters = { eslint = { command = \"./node_modules/.bin/eslint\" , rootPatterns = { \".eslintrc.js\" , \".git\" }, debounce = 100 , args = { \"--stdin\" , \"--stdin-filename\" , \"%filepath\" , \"--format\" , \"json\" }, sourceName = \"eslint\" , parseJson = { errorsRoot = \"[0].messages\" , line = \"line\" , column = \"column\" , endLine = \"endLine\" , endColumn = \"endColumn\" , message = \"[eslint] ${message} [${ruleId}]\" , security = \"severity\" }, securities = { [ 2 ] = \"error\" , [ 1 ] = \"warning\" } }, }, filetypes = { javascript = \"eslint\" , typescript = \"eslint\" } } } EFM Auto generated config link eslint The following is an example of integrating with eslint, it uses the .eslinrc.js file to identify the project root, and then uses the instance of eslint available in node_modules : local eslint = { lintCommand = \"./node_modules/.bin/eslint -f unix --stdin --stdin-filename ${INPUT}\" , lintIgnoreExitCode = true , lintStdin = true } local util = require \"lspconfig\" . util require \"lspconfig\" . efm . setup { --cmd = {\"efm-langserver\",}, init_options = { documentFormatting = true }, filetypes = { \"javascript\" , \"typescript\" }, root_dir = function ( fname ) return util . root_pattern ( \"tsconfig.json\" )( fname ) or util . root_pattern ( \".eslintrc.js\" , \".git\" )( fname ); end , settings = { rootMarkers = { \".eslintrc.js\" , \".git/\" }, languages = { typescript = { eslint } } } } eslint_d This example uses eslint_d, which is much faster. Read more here local eslint = { lintCommand = \"eslint_d -f unix --stdin --stdin-filename ${INPUT}\" , lintStdin = true , lintFormats = { \"%f:%l:%c: %m\" }, lintIgnoreExitCode = true , formatCommand = \"eslint_d --fix-to-stdout --stdin --stdin-filename=${INPUT}\" , formatStdin = true } require \"lspconfig\" . efm . setup { init_options = { documentFormatting = true }, filetypes = { \"javascript\" , \"typescript\" }, root_dir = function ( fname ) return util . root_pattern ( \"tsconfig.json\" )( fname ) or util . root_pattern ( \".eslintrc.js\" , \".git\" )( fname ); end , settings = { rootMarkers = { \".eslintrc.js\" , \".git/\" }, languages = { javascript = { eslint }, typescript = { eslint } } } } Customize LSP CodeLens and Signs It can be helpful to customize the severity levels that get displayed as a gutter sign and/or codelens virtual text. For example, maybe you want to show everything in the gutter, but only Errors as virtualtext. -- Set which codelens text levels to show local original_set_virtual_text = vim . lsp . diagnostic . set_virtual_text local set_virtual_text_custom = function ( diagnostics , bufnr , client_id , sign_ns , opts ) opts = opts or {} -- show all messages that are Warning and above (Warning, Error) opts . severity_limit = \"Warning\" original_set_virtual_text ( diagnostics , bufnr , client_id , sign_ns , opts ) end vim . lsp . diagnostic . set_virtual_text = set_virtual_text_custom Or maybe you want to only show Errors in the gutter, local orig_set_signs = vim . lsp . diagnostic . set_signs local set_signs_limited = function ( diagnostics , bufnr , client_id , sign_ns , opts ) opts = opts or {} opts . severity_limit = \"Error\" orig_set_signs ( diagnostics , bufnr , client_id , sign_ns , opts ) end vim . lsp . diagnostic . set_signs = set_signs_limited source Another configuration that only shows the most severe item in the gutter per line, -- Capture real implementation of function that sets signs local orig_set_signs = vim . lsp . diagnostic . set_signs local set_signs_limited = function ( diagnostics , bufnr , client_id , sign_ns , opts ) -- original func runs some checks, which I think is worth doing -- but maybe overkill if not diagnostics then diagnostics = diagnostic_cache [ bufnr ][ client_id ] end -- early escape if not diagnostics then return end -- Work out max severity diagnostic per line local max_severity_per_line = {} for _ , d in pairs ( diagnostics ) do if max_severity_per_line [ d . range . start . line ] then local current_d = max_severity_per_line [ d . range . start . line ] if d . severity < current_d . severity then max_severity_per_line [ d . range . start . line ] = d end else max_severity_per_line [ d . range . start . line ] = d end end -- map to list local filtered_diagnostics = {} for i , v in pairs ( max_severity_per_line ) do table.insert ( filtered_diagnostics , v ) end -- call original function orig_set_signs ( filtered_diagnostics , bufnr , client_id , sign_ns , opts ) end vim . lsp . diagnostic . set_signs = set_signs_limited source jsonls Use JSON schemas from SchemaStore The SchemaStore project provides a large collection of JSON schema definitions for many common JSON file types. The SchemaStore.nvim plugin provides access to the SchemaStore catalog as a Lua library that can be used to configure jsonls. To use the entire SchemaStore catalog with jsonls, install the SchemaStore.nvim plugin, then update your lspconfig jsonls settings: To use SchemaStore.nvim with lspconfig + jsonls : require ( 'lspconfig' ). jsonls . setup { settings = { json = { schemas = require ( 'schemastore' ). json . schemas (), }, }, } To use a subset of the catalog, you can select schemas by name (see the catalog for a full list): require ( 'lspconfig' ). jsonls . setup { settings = { json = { schemas = require ( 'schemastore' ). json . schemas { select = { '.eslintrc' , 'package.json' , }, }, }, }, } To ignore certain schemas from the catalog: require ( 'lspconfig' ). jsonls . setup { settings = { json = { schemas = require ( 'schemastore' ). json . schemas { ignore = { '.eslintrc' , 'package.json' , }, }, }, }, } To replace certain schemas from the catalog with your own: require ( 'lspconfig' ). jsonls . setup { settings = { json = { schemas = require ( 'schemastore' ). json . schemas { replace = { [ 'package.json' ] = { description = 'package.json overriden' , fileMatch = { 'package.json' }, name = 'package.json' , url = 'https://example.com/package.json' , }, }, }, }, }, } If you want to use your own schemas in addition to schemas from SchemaStore, you can merge them: require ( 'lspconfig' ). jsonls . setup { settings = { json = { schemas = vim . list_extend ( { { description = 'My Custom JSON schema' , fileMatch = { 'foobar.json' , '.foobar.json' }, name = 'foobar.json' , url = 'https://example.com/schema/foobar.json' , }, }, require ( 'schemastore' ). json . schemas { select = { '.eslintrc' , 'package.json' , }, } ), }, }, } ltex-ls To add the user dictionary from the built-in Neovim spell checker to ltex-ls , add the following to your LSP setup: -- =========================================== -- Add user dictionary for ltex-ls -- * en.utf-8.add must be created using `zg` -- =========================================== local path = vim.fn.stdpath 'config' .. '/spell/en.utf-8.add' local words = {} for word in io.open(path, 'r'):lines() do table.insert(words, word) end nvim_lsp.ltex.setup { on_attach = on_attach, settings = { ltex = { dictionary = { ['en-US'] = words, }, }, }, } The changes take places when you reload the config. Use nvim-notify to display LSP messages The nvim-notify plugin can be used to display messages received from the LSP server. vim . lsp . handlers [ 'window/showMessage' ] = function ( _ , result , ctx ) local client = vim . lsp . get_client_by_id ( ctx . client_id ) local lvl = ({ 'ERROR' , 'WARN' , 'INFO' , 'DEBUG' , })[ result . type ] notify ({ result . message }, lvl , { title = 'LSP | ' .. client . name , timeout = 10000 , keep = function () return lvl == 'ERROR' or lvl == 'WARN' end , }) end","title":"User contributed tips"},{"location":"help/tips/#user-contributed-tips","text":"We list here some snippets to customize the LSP experience. These are too complex/arbitrary to be enabled by default.","title":"User contributed tips"},{"location":"help/tips/#range-formatting-with-a-motion","text":"If your language server supports formatting a range of text (as opposed to a whole file), you can use this snippet to map a key to formatting a range with a motion. For example, with this code, gmip in normal mode will format a paragraph. function format_range_operator () local old_func = vim . go . operatorfunc _G . op_func_formatting = function () local start = vim . api . nvim_buf_get_mark ( 0 , '[' ) local finish = vim . api . nvim_buf_get_mark ( 0 , ']' ) vim . lsp . buf . range_formatting ({}, start , finish ) vim . go . operatorfunc = old_func _G . op_func_formatting = nil end vim . go . operatorfunc = 'v:lua.op_func_formatting' vim . api . nvim_feedkeys ( 'g@' , 'n' , false ) end vim . api . nvim_set_keymap ( \"n\" , \"gm\" , \"<cmd>lua format_range_operator()<CR>\" , { noremap = true }) See https://github.com/neovim/neovim/issues/14680 for context.","title":"Range Formatting With a Motion"},{"location":"help/tips/#peek-definition","text":"To open the target of a textDocument/definition request in a floating window (as in VS Code's \"Peek Definition\"), you can use the following snippet: local function preview_location_callback ( _ , result ) if result == nil or vim . tbl_isempty ( result ) then return nil end vim . lsp . util . preview_location ( result [ 1 ]) end function PeekDefinition () local params = vim . lsp . util . make_position_params () return vim . lsp . buf_request ( 0 , 'textDocument/definition' , params , preview_location_callback ) end If the server supports LocationLink , this will show the full target range (e.g., function body) of the definition. Other requests like textDocument/declaration can be \"peeked\" analogously.","title":"Peek Definition"},{"location":"help/tips/#clangd","text":"","title":"Clangd"},{"location":"help/tips/#switchsourceheader","text":"nvim-lspconfig offers the ClangdSwitchSourceHeader command by default. It simply replaces the current buffer with the corresponding file. If you'd like to open the corresponding file in a new split/vsplit, you can add such commands easily: local function switch_source_header_splitcmd ( bufnr , splitcmd ) bufnr = require 'lspconfig' . util . validate_bufnr ( bufnr ) local clangd_client = require 'lspconfig' . util . get_active_client_by_name ( bufnr , 'clangd' ) local params = { uri = vim . uri_from_bufnr ( bufnr )} if clangd_client then clangd_client . request ( \"textDocument/switchSourceHeader\" , params , function ( err , result ) if err then error ( tostring ( err )) end if not result then print ( \"Corresponding file can\u2019t be determined\" ) return end vim . api . nvim_command ( splitcmd .. \" \" .. vim . uri_to_fname ( result )) end , bufnr ) else print 'textDocument/switchSourceHeader is not supported by the clangd server active on the current buffer' end end require 'lspconfig' . clangd . setup { -----snip------ commands = { ClangdSwitchSourceHeader = { function () switch_source_header_splitcmd ( 0 , \"edit\" ) end ; description = \"Open source/header in current buffer\" ; }, ClangdSwitchSourceHeaderVSplit = { function () switch_source_header_splitcmd ( 0 , \"vsplit\" ) end ; description = \"Open source/header in a new vsplit\" ; }, ClangdSwitchSourceHeaderSplit = { function () switch_source_header_splitcmd ( 0 , \"split\" ) end ; description = \"Open source/header in a new split\" ; } } } The commands ClangdSwitchSourceHeader* are available like normal vim commands, that is: nnoremap <leader>h :ClangdSwitchSourceHeaderVSplit<CR>","title":"SwitchSourceHeader"},{"location":"help/tips/#diagnosticls","text":"Auto generated config link","title":"diagnosticls"},{"location":"help/tips/#eslint","text":"The following is an example of integrating with eslint, it uses the .eslinrc.js file to identify the project root, and then uses the instance of eslint available in node_modules : local util = require \"lspconfig\" . util require 'lspconfig' . diagnosticls . setup { filetypes = { \"javascript\" , \"typescript\" }, root_dir = function ( fname ) return util . root_pattern ( \"tsconfig.json\" )( fname ) or util . root_pattern ( \".eslintrc.js\" )( fname ); end , init_options = { linters = { eslint = { command = \"./node_modules/.bin/eslint\" , rootPatterns = { \".eslintrc.js\" , \".git\" }, debounce = 100 , args = { \"--stdin\" , \"--stdin-filename\" , \"%filepath\" , \"--format\" , \"json\" }, sourceName = \"eslint\" , parseJson = { errorsRoot = \"[0].messages\" , line = \"line\" , column = \"column\" , endLine = \"endLine\" , endColumn = \"endColumn\" , message = \"[eslint] ${message} [${ruleId}]\" , security = \"severity\" }, securities = { [ 2 ] = \"error\" , [ 1 ] = \"warning\" } }, }, filetypes = { javascript = \"eslint\" , typescript = \"eslint\" } } }","title":"eslint"},{"location":"help/tips/#efm","text":"Auto generated config link","title":"EFM"},{"location":"help/tips/#eslint_1","text":"The following is an example of integrating with eslint, it uses the .eslinrc.js file to identify the project root, and then uses the instance of eslint available in node_modules : local eslint = { lintCommand = \"./node_modules/.bin/eslint -f unix --stdin --stdin-filename ${INPUT}\" , lintIgnoreExitCode = true , lintStdin = true } local util = require \"lspconfig\" . util require \"lspconfig\" . efm . setup { --cmd = {\"efm-langserver\",}, init_options = { documentFormatting = true }, filetypes = { \"javascript\" , \"typescript\" }, root_dir = function ( fname ) return util . root_pattern ( \"tsconfig.json\" )( fname ) or util . root_pattern ( \".eslintrc.js\" , \".git\" )( fname ); end , settings = { rootMarkers = { \".eslintrc.js\" , \".git/\" }, languages = { typescript = { eslint } } } }","title":"eslint"},{"location":"help/tips/#eslint_d","text":"This example uses eslint_d, which is much faster. Read more here local eslint = { lintCommand = \"eslint_d -f unix --stdin --stdin-filename ${INPUT}\" , lintStdin = true , lintFormats = { \"%f:%l:%c: %m\" }, lintIgnoreExitCode = true , formatCommand = \"eslint_d --fix-to-stdout --stdin --stdin-filename=${INPUT}\" , formatStdin = true } require \"lspconfig\" . efm . setup { init_options = { documentFormatting = true }, filetypes = { \"javascript\" , \"typescript\" }, root_dir = function ( fname ) return util . root_pattern ( \"tsconfig.json\" )( fname ) or util . root_pattern ( \".eslintrc.js\" , \".git\" )( fname ); end , settings = { rootMarkers = { \".eslintrc.js\" , \".git/\" }, languages = { javascript = { eslint }, typescript = { eslint } } } }","title":"eslint_d"},{"location":"help/tips/#customize-lsp-codelens-and-signs","text":"It can be helpful to customize the severity levels that get displayed as a gutter sign and/or codelens virtual text. For example, maybe you want to show everything in the gutter, but only Errors as virtualtext. -- Set which codelens text levels to show local original_set_virtual_text = vim . lsp . diagnostic . set_virtual_text local set_virtual_text_custom = function ( diagnostics , bufnr , client_id , sign_ns , opts ) opts = opts or {} -- show all messages that are Warning and above (Warning, Error) opts . severity_limit = \"Warning\" original_set_virtual_text ( diagnostics , bufnr , client_id , sign_ns , opts ) end vim . lsp . diagnostic . set_virtual_text = set_virtual_text_custom Or maybe you want to only show Errors in the gutter, local orig_set_signs = vim . lsp . diagnostic . set_signs local set_signs_limited = function ( diagnostics , bufnr , client_id , sign_ns , opts ) opts = opts or {} opts . severity_limit = \"Error\" orig_set_signs ( diagnostics , bufnr , client_id , sign_ns , opts ) end vim . lsp . diagnostic . set_signs = set_signs_limited source Another configuration that only shows the most severe item in the gutter per line, -- Capture real implementation of function that sets signs local orig_set_signs = vim . lsp . diagnostic . set_signs local set_signs_limited = function ( diagnostics , bufnr , client_id , sign_ns , opts ) -- original func runs some checks, which I think is worth doing -- but maybe overkill if not diagnostics then diagnostics = diagnostic_cache [ bufnr ][ client_id ] end -- early escape if not diagnostics then return end -- Work out max severity diagnostic per line local max_severity_per_line = {} for _ , d in pairs ( diagnostics ) do if max_severity_per_line [ d . range . start . line ] then local current_d = max_severity_per_line [ d . range . start . line ] if d . severity < current_d . severity then max_severity_per_line [ d . range . start . line ] = d end else max_severity_per_line [ d . range . start . line ] = d end end -- map to list local filtered_diagnostics = {} for i , v in pairs ( max_severity_per_line ) do table.insert ( filtered_diagnostics , v ) end -- call original function orig_set_signs ( filtered_diagnostics , bufnr , client_id , sign_ns , opts ) end vim . lsp . diagnostic . set_signs = set_signs_limited source","title":"Customize LSP CodeLens and Signs"},{"location":"help/tips/#jsonls","text":"","title":"jsonls"},{"location":"help/tips/#use-json-schemas-from-schemastore","text":"The SchemaStore project provides a large collection of JSON schema definitions for many common JSON file types. The SchemaStore.nvim plugin provides access to the SchemaStore catalog as a Lua library that can be used to configure jsonls. To use the entire SchemaStore catalog with jsonls, install the SchemaStore.nvim plugin, then update your lspconfig jsonls settings: To use SchemaStore.nvim with lspconfig + jsonls : require ( 'lspconfig' ). jsonls . setup { settings = { json = { schemas = require ( 'schemastore' ). json . schemas (), }, }, } To use a subset of the catalog, you can select schemas by name (see the catalog for a full list): require ( 'lspconfig' ). jsonls . setup { settings = { json = { schemas = require ( 'schemastore' ). json . schemas { select = { '.eslintrc' , 'package.json' , }, }, }, }, } To ignore certain schemas from the catalog: require ( 'lspconfig' ). jsonls . setup { settings = { json = { schemas = require ( 'schemastore' ). json . schemas { ignore = { '.eslintrc' , 'package.json' , }, }, }, }, } To replace certain schemas from the catalog with your own: require ( 'lspconfig' ). jsonls . setup { settings = { json = { schemas = require ( 'schemastore' ). json . schemas { replace = { [ 'package.json' ] = { description = 'package.json overriden' , fileMatch = { 'package.json' }, name = 'package.json' , url = 'https://example.com/package.json' , }, }, }, }, }, } If you want to use your own schemas in addition to schemas from SchemaStore, you can merge them: require ( 'lspconfig' ). jsonls . setup { settings = { json = { schemas = vim . list_extend ( { { description = 'My Custom JSON schema' , fileMatch = { 'foobar.json' , '.foobar.json' }, name = 'foobar.json' , url = 'https://example.com/schema/foobar.json' , }, }, require ( 'schemastore' ). json . schemas { select = { '.eslintrc' , 'package.json' , }, } ), }, }, }","title":"Use JSON schemas from SchemaStore"},{"location":"help/tips/#ltex-ls","text":"To add the user dictionary from the built-in Neovim spell checker to ltex-ls , add the following to your LSP setup: -- =========================================== -- Add user dictionary for ltex-ls -- * en.utf-8.add must be created using `zg` -- =========================================== local path = vim.fn.stdpath 'config' .. '/spell/en.utf-8.add' local words = {} for word in io.open(path, 'r'):lines() do table.insert(words, word) end nvim_lsp.ltex.setup { on_attach = on_attach, settings = { ltex = { dictionary = { ['en-US'] = words, }, }, }, } The changes take places when you reload the config.","title":"ltex-ls"},{"location":"help/tips/#use-nvim-notify-to-display-lsp-messages","text":"The nvim-notify plugin can be used to display messages received from the LSP server. vim . lsp . handlers [ 'window/showMessage' ] = function ( _ , result , ctx ) local client = vim . lsp . get_client_by_id ( ctx . client_id ) local lvl = ({ 'ERROR' , 'WARN' , 'INFO' , 'DEBUG' , })[ result . type ] notify ({ result . message }, lvl , { title = 'LSP | ' .. client . name , timeout = 10000 , keep = function () return lvl == 'ERROR' or lvl == 'WARN' end , }) end","title":"Use nvim-notify to display LSP messages"}]}